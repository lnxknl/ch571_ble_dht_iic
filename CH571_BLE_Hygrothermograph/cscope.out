cscope 15 $HOME/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph               0000436252
	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/APP/I2C.c

7 
	~"I2C.h
"

11 
	$I2CInô
()

13 
SCL_out
;

14 
SDA_out
;

15 
	}
}

18 
	$I2C_dñay
()

20 
	`mDñayuS
(100);

21 
	}
}

23 
	$I2CSèπ
()

25 
SDA_out
;

26 
	`mDñayuS
(1);

27 
SCL_H
;

28 
SDA_H
;

29 
	`mDñayuS
(5);

30 
SDA_L
;

31 
	`mDñayuS
(5);

32 
SCL_L
;

33 
	}
}

35 
	$I2CSt›
()

37 
SDA_out
;

38 
	`mDñayuS
(1);

39 
SCL_L
;

40 
SDA_L
;

41 
	`mDñayuS
(5);

42 
SCL_H
;

43 
	`mDñayuS
(5);

44 
SDA_H
;

45 
	`mDñayuS
(5);

46 
	}
}

48 
	$I2CWrôe
(
I2Cd©a
)

50 
mask
;

52 
SDA_out
;

53 
	`mDñayuS
(1);

54 
mask
 = 0x80; mask != 0; mask >>= 1)

56 i‡(
mask
 & 
I2Cd©a
)

57 
SDA_H
;

59 
SDA_L
;

60 
	`mDñayuS
(5);

61 
SCL_H
;

62 
	`mDñayuS
(5);

63 
SCL_L
;

65 
SDA_H
;

66 
SDA_ö
;

67 
	`mDñayuS
(5);

68 
SCL_H
;

69 
	`mDñayuS
(5);

70 if(
SDA_ªad
)

72 
SCL_L
;

77 
SCL_L
;

80 
	}
}

81 
	$I2CAddªss
(
addªss
)

83 
ack
 = 0;

85 
	`I2CSèπ
();

86 
ack
 = 
	`I2CWrôe
(
addªss
);

87 
	`I2CSt›
();

89  
ack
;

90 
	}
}

91 
	$I2CRódACK
()

93 
mask
;

94 
I2Cd©a
;

96 
SDA_H
;

97 
SDA_ö
;

99 
mask
 = 0x80;mask != 0; mask >>= 1)

101 
	`mDñayuS
(5);

102 
SCL_H
;

103 if(
SDA_ªad
 == 0)

104 
I2Cd©a
 &~
mask
;

106 
I2Cd©a
 |
mask
;

107 
	`mDñayuS
(5);

108 
SCL_L
;

110 
SDA_out
;

111 
	`mDñayuS
(1);

112 
SDA_L
;

113 
	`mDñayuS
(5);

114 
SCL_H
;

115 
	`mDñayuS
(5);

116 
SCL_L
;

118  
I2Cd©a
;

119 
	}
}

120 
	$I2CRódNAK
()

122 
mask
;

123 
I2Cd©a
;

125 
SDA_H
;

126 
SDA_ö
;

128 
mask
 = 0x80;mask != 0; mask >>= 1)

130 
	`mDñayuS
(5);

131 
SCL_H
;

132 if(
SDA_ªad
 == 0)

133 
I2Cd©a
 &~
mask
;

135 
I2Cd©a
 |
mask
;

136 
	`mDñayuS
(5);

137 
SCL_L
;

139 
SDA_out
;

140 
	`mDñayuS
(1);

141 
SDA_H
;

142 
	`mDñayuS
(5);

143 
SCL_H
;

144 
	`mDñayuS
(5);

145 
SCL_L
;

147  
I2Cd©a
;

148 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/APP/SHT4X.c

7 
	~"SHT4X.h
"

8 
	~"I2C.h
"

11 
	$SHT4XWrôeByã
(
Addªss
,
d©
)

13 
	`I2CSèπ
();

14 i‡(
	`I2CWrôe
(
Addªss
) == 0)

16 
	`I2CSt›
();

20 i‡(
	`I2CWrôe
(
d©
) == 0)

22 
	`I2CSt›
();

25 
	`I2CSt›
();

28 
	}
}

30 
	$SHT4XRódSîül
(
Addªss
,*
d©
,
Àn
)

32 
ACK
;

34 
	`I2CSèπ
();

35 
ACK
 = 
	`I2CWrôe
(
Addªss
);

36 i‡(
ACK
 == 0)

38 
	`I2CSt›
();

41 
Àn
 > 1)

43 *
d©
++ = 
	`I2CRódACK
();

44 
Àn
--;

46 *
d©
 = 
	`I2CRódNAK
();

47 
	`I2CSt›
();

50 
	}
}

52 
	$SHT4XRódTem≥øtuªAndHumidôy
(sig√d *
ãm≥øtuª
,sig√d *
humidôy
)

54 
RxBuff
[6];

55 sig√d 
Hd©aBuf
, 
Td©aBuf
;

56 
Hd©a
,
Td©a
;

58 
	`I2CInô
();

59 
	`DñayUs
(2);

61 
RxBuff
[0] = 
	`SHT4XWrôeByã
(0x88,0xfd);

62 if(
RxBuff
[0] == 0)

65 
	`GPIOA_SëBôs
(
GPIO_Pö_5
 | 
GPIO_Pö_15
);

66 
	`GPIOA_ModeCfg
(
GPIO_Pö_5
 | 
GPIO_Pö_15
, 
GPIO_ModeIN_PU
);

70 
	`DñayMs
(10);

71 
	`SHT4XRódSîül
(0x89,
RxBuff
,6);

74 
	`GPIOA_SëBôs
(
GPIO_Pö_5
 | 
GPIO_Pö_15
);

75 
	`GPIOA_ModeCfg
(
GPIO_Pö_5
 | 
GPIO_Pö_15
, 
GPIO_ModeIN_PU
);

77 
Td©a
 = 
RxBuff
[0]*256 + RxBuff[1];

78 
Hd©a
 = 
RxBuff
[3]*256 + RxBuff[4];

79 
Td©aBuf
 = (
Td©a
/65535) * 100;

80 
Hd©aBuf
 = (
Hd©a
/65535) * 100;

81 
Td©aBuf
 = 175*TdataBuf - 4500;

82 
Hd©aBuf
 = 125*HdataBuf - 600;

85 *
ãm≥øtuª
 = 
Td©aBuf
;

86 *
humidôy
 = 
Hd©aBuf
;

89 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/APP/broadcaster.c

15 
	~"CONFIG.h
"

16 
	~"devöfo£rvi˚.h
"

17 
	~"brﬂdˇ°î.h
"

18 
	~"SHT4X.h
"

19 
	gÆ¨mFœg
 = 0;

20 
	gn‹mÆFœg
 = 1;

22 
	#DEFAULT_ADVERTISING_INTERVAL
 5000

	)

23 
	#ALARM_ADVERTISING_INTERVAL
 100

	)

26 
	#mósuªmítAndAdvîtisögI¡îvÆ
 5000

	)

28 
	#advîtisögTime
 500

	)

31 
	#WCH_COMPANY_ID
 0x07D7

	)

34 
	#B_ADDR_STR_LEN
 15

	)

36 
uöt8_t
 
	gBrﬂdˇ°î_TaskID
;

39 
uöt8_t
 
	gsˇnR•D©a
[] = {

42 
GAP_ADTYPE_LOCAL_NAME_COMPLETE
, 0x42,

56 
GAP_ADTYPE_POWER_LEVEL
, 0

60 
uöt8_t
 
	gadvîtD©a
[] = {

62 
GAP_ADTYPE_FLAGS
,

63 
GAP_ADTYPE_FLAGS_BREDR_NOT_SUPPORTED
,

67 
GAP_ADTYPE_LOCAL_NAME_SHORT
,

75 
GAP_ADTYPE_MANUFACTURER_SPECIFIC
,

82 
Brﬂdˇ°î_Pro˚ssTMOSMsg
(
tmos_evít_hdr_t
 *
pMsg
);

83 
Brﬂdˇ°î_SèãNŸifiˇti⁄CB
(
g≠Rﬁe_Sèãs_t
 
√wSèã
);

84 
uöt8_t
 
B©ãryMósuªmí
();

91 
g≠RﬁesBrﬂdˇ°îCBs_t
 
	gBrﬂdˇ°î_Brﬂdˇ°îCBs
 = {
Brﬂdˇ°î_SèãNŸifiˇti⁄CB
,

92 
NULL
};

112 
	$Brﬂdˇ°î_Inô
()

114 
Brﬂdˇ°î_TaskID
 = 
	`TMOS_Pro˚ssEvítRegi°î
(
Brﬂdˇ°î_Pro˚ssEvít
);

119 
uöt8_t
 
öôül_advîtisög_íabÀ
 = 
TRUE
;

120 
uöt8_t
 
öôül_adv_evít_ty≥
 = 
GAP_ADTYPE_ADV_NONCONN_IND
;

122 
	`GAPRﬁe_SëP¨amëî
(
GAPROLE_ADVERT_ENABLED
, (
uöt8_t
), &
öôül_advîtisög_íabÀ
);

123 
	`GAPRﬁe_SëP¨amëî
(
GAPROLE_ADV_EVENT_TYPE
, (
uöt8_t
), &
öôül_adv_evít_ty≥
);

125 
	`GAPRﬁe_SëP¨amëî
(
GAPROLE_ADVERT_DATA
, (
advîtD©a
),ádvertData);

130 
uöt16_t
 
advI¡
 = 
	`MS1_TO_SYSTEM_TIME
–
DEFAULT_ADVERTISING_INTERVAL
 );

132 
	`GAP_SëP¨amVÆue
(
TGAP_DISC_ADV_INT_MIN
, 
advI¡
);

133 
	`GAP_SëP¨amVÆue
(
TGAP_DISC_ADV_INT_MAX
, 
advI¡
);

137 
	`tmos_£t_evít
(
Brﬂdˇ°î_TaskID
, 
SBP_START_DEVICE_EVT
);

138 
	}
}

153 
uöt16_t
 
	$Brﬂdˇ°î_Pro˚ssEvít
(
uöt8_t
 
èsk_id
, 
uöt16_t
 
evíts
)

155 if(
evíts
 & 
SYS_EVENT_MSG
)

157 
uöt8_t
 *
pMsg
;

159 if((
pMsg
 = 
	`tmos_msg_ª˚ive
(
Brﬂdˇ°î_TaskID
)Ë!
NULL
)

161 
	`Brﬂdˇ°î_Pro˚ssTMOSMsg
((
tmos_evít_hdr_t
 *)
pMsg
);

164 
	`tmos_msg_dóŒoˇã
(
pMsg
);

168  (
evíts
 ^ 
SYS_EVENT_MSG
);

171 if(
evíts
 & 
SBP_START_DEVICE_EVT
)

174 
	`GAPRﬁe_Brﬂdˇ°îSèπDevi˚
(&
Brﬂdˇ°î_Brﬂdˇ°îCBs
);

175 
	`tmos_°¨t_èsk
(
Brﬂdˇ°î_TaskID
, 
SBP_Brﬂdˇ°î_ON_EVT
, 
	`MS1_TO_SYSTEM_TIME
( 1000 ));

176 
	`tmos_£t_evít
(
Brﬂdˇ°î_TaskID
, 
SBP_Brﬂdˇ°î_Mósuªmí_EVT
);

178  (
evíts
 ^ 
SBP_START_DEVICE_EVT
);

180 if(
evíts
 & 
SBP_Brﬂdˇ°î_ON_EVT
)

182 
uöt8_t
 
öôül_advîtisög_íabÀ
 = 
TRUE
;

183 
uöt8_t
 
öôül_adv_evít_ty≥
 = 
GAP_ADTYPE_ADV_NONCONN_IND
;

185 
	`GAPRﬁe_SëP¨amëî
(
GAPROLE_ADVERT_ENABLED
, (
uöt8_t
), &
öôül_advîtisög_íabÀ
);

186 
	`GAPRﬁe_SëP¨amëî
(
GAPROLE_ADVERT_DATA
, (
advîtD©a
),ádvertData);

188 
	`GAPRﬁe_Brﬂdˇ°îSèπDevi˚
(&
Brﬂdˇ°î_Brﬂdˇ°îCBs
);

190  (
evíts
 ^ 
SBP_Brﬂdˇ°î_ON_EVT
);

192 if(
evíts
 & 
SBP_Brﬂdˇ°î_OFF_EVT
)

195 
uöt8
 
advîtisögE«bÀ
 = 
FALSE
;

196 
	`GAPRﬁe_SëP¨amëî
–
GAPROLE_ADVERT_ENABLED
, –
uöt8
 ), &
advîtisögE«bÀ
 );

198 #i‡
PrötfEN


199 
	`PRINT
("Broadcaster off.\r\n");

201  (
evíts
 ^ 
SBP_Brﬂdˇ°î_OFF_EVT
);

204 if(
evíts
 & 
SBP_Brﬂdˇ°î_Mósuªmí_EVT
)

206 
rc
;

207 sig√d 
ãm≥øtuªBuf
,
humidôyBuf
;

210 
rc
 = 
	`SHT4XRódTem≥øtuªAndHumidôy
(&
ãm≥øtuªBuf
, &
humidôyBuf
);

211 if(
rc
 == 1)

213 
advîtD©a
[19] = 
ãm≥øtuªBuf
 >> 8;

214 
advîtD©a
[20] = (
uöt8_t
)
ãm≥øtuªBuf
;

215 
advîtD©a
[21] = 
humidôyBuf
 >> 8;

216 
advîtD©a
[22] = (
uöt8_t
)
humidôyBuf
;

219 i‡(
ãm≥øtuªBuf
 > 6000)

222 i‡(
Æ¨mFœg
 == 0)

224 
Æ¨mFœg
 = 1;

228 i‡(
humidôyBuf
 > 9500)

231 i‡(
Æ¨mFœg
 == 0)

233 
Æ¨mFœg
 = 1;

238 if(
Æ¨mFœg
 == 1)álarmFlag = 0;

242 
advîtD©a
[19]=0;

243 
advîtD©a
[20]=0;

244 
advîtD©a
[21]=0;

245 
advîtD©a
[22]=0;

249 
advîtD©a
[23] = 
	`B©ãryMósuªmí
();

250 
	`GAP_Upd©eAdvîtisögD©a
–0,
TRUE
 ,–
advîtD©a
 ),advertData );

252 if(
Æ¨mFœg
 == 0)

254 
	`tmos_°¨t_èsk
(
Brﬂdˇ°î_TaskID
, 
SBP_Brﬂdˇ°î_Mósuªmí_EVT
, 
	`MS1_TO_SYSTEM_TIME
(5000));

255 i‡(
n‹mÆFœg
 == 0) {

257 
	`tmos_°¨t_èsk
(
Brﬂdˇ°î_TaskID
, 
SBP_Brﬂdˇ°î_OFF_EVT
, 
	`MS1_TO_SYSTEM_TIME
(10));

262 
	`tmos_°¨t_èsk
(
Brﬂdˇ°î_TaskID
, 
SBP_Brﬂdˇ°î_Mósuªmí_EVT
, 
	`MS1_TO_SYSTEM_TIME
(200));

263 i‡(
n‹mÆFœg
 == 1) {

265 
	`tmos_°¨t_èsk
(
Brﬂdˇ°î_TaskID
, 
SBP_Brﬂdˇ°î_OFF_EVT
, 
	`MS1_TO_SYSTEM_TIME
(10));

269  (
evíts
 ^ 
SBP_Brﬂdˇ°î_Mósuªmí_EVT
);

273 
	}
}

284 
	$Brﬂdˇ°î_Pro˚ssTMOSMsg
(
tmos_evít_hdr_t
 *
pMsg
)

286 
pMsg
->
evít
)

291 
	}
}

302 
	$Brﬂdˇ°î_SèãNŸifiˇti⁄CB
(
g≠Rﬁe_Sèãs_t
 
√wSèã
)

304 
√wSèã
)

306 
GAPROLE_STARTED
:

307 #i‡
PrötfEN


308 
	`PRINT
("Initialized..\n");

312 
GAPROLE_ADVERTISING
:

313 #i‡
PrötfEN


314 
	`PRINT
("Advertising..\n");

318 
GAPROLE_WAITING
:

319 if(
Æ¨mFœg
 == 1)

321 
öt8_t
 
öôül_advîtisög_íabÀ
 = 
TRUE
;

322 
uöt8_t
 
öôül_adv_evít_ty≥
 = 
GAP_ADTYPE_ADV_NONCONN_IND
;

323 
uöt16_t
 
advI¡
 = 
	`MS1_TO_SYSTEM_TIME
–
ALARM_ADVERTISING_INTERVAL
 );

325 
	`GAP_SëP¨amVÆue
(
TGAP_DISC_ADV_INT_MIN
, 
advI¡
);

326 
	`GAP_SëP¨amVÆue
(
TGAP_DISC_ADV_INT_MAX
, 
advI¡
);

327 
	`GAPRﬁe_SëP¨amëî
(
GAPROLE_ADVERT_ENABLED
, (
uöt8_t
), &
öôül_advîtisög_íabÀ
);

328 
	`GAPRﬁe_Brﬂdˇ°îSèπDevi˚
(&
Brﬂdˇ°î_Brﬂdˇ°îCBs
);

329 
n‹mÆFœg
 = 0;

332 i‡(
n‹mÆFœg
 == 0) {

333 
n‹mÆFœg
 = 1;

334 
öt8_t
 
öôül_advîtisög_íabÀ
 = 
TRUE
;

335 
uöt8_t
 
öôül_adv_evít_ty≥
 = 
GAP_ADTYPE_ADV_NONCONN_IND
;

336 
uöt16_t
 
advI¡
 = 
	`MS1_TO_SYSTEM_TIME
–
DEFAULT_ADVERTISING_INTERVAL
 );

338 
	`GAP_SëP¨amVÆue
(
TGAP_DISC_ADV_INT_MIN
, 
advI¡
);

339 
	`GAP_SëP¨amVÆue
(
TGAP_DISC_ADV_INT_MAX
, 
advI¡
);

340 
	`GAP_SëP¨amVÆue
(
TGAP_DISC_ADV_INT_MIN
, 
advI¡
);

341 
	`GAP_SëP¨amVÆue
(
TGAP_DISC_ADV_INT_MAX
, 
advI¡
);

342 
	`GAPRﬁe_SëP¨amëî
(
GAPROLE_ADVERT_ENABLED
, (
uöt8_t
), &
öôül_advîtisög_íabÀ
);

343 
	`GAPRﬁe_Brﬂdˇ°îSèπDevi˚
(&
Brﬂdˇ°î_Brﬂdˇ°îCBs
);

346 #i‡
PrötfEN


347 
	`PRINT
("Waiting forádvertising..\n");

351 
GAPROLE_ERROR
:

352 #i‡
PrötfEN


353 
	`PRINT
("Error..\n");

360 
	}
}

362 
uöt8_t
 
	$B©ãryMósuªmí
()

364 
b©Vﬁ
;

365 
uöt16_t
 
b©Buf
;

366 
uöt16_t
 
RoughCÆib_VÆue
 = 0;

368 
	`GPIOA_ModeCfg
(
GPIO_Pö_14
, 
GPIO_ModeOut_PP_5mA
);

369 
	`GPIOA_ModeCfg
(
GPIO_Pö_13
, 
GPIO_ModeIN_Flﬂtög
);

372 
	`GPIOA_SëBôs
(
GPIO_Pö_14
);

373 
	`DñayMs
(1);

375 
	`ADC_ExtSögÀChSampInô
(
Sam∂eFªq_3_2
, 
ADC_PGA_0
);

377 
RoughCÆib_VÆue
 = 
	`ADC_D©aCÆib_Rough
();

378 
	`ADC_Ch™√lCfg
(3);

381 
b©Buf
 = 
	`ADC_ExcutSögÀC⁄vî
(Ë+ 
RoughCÆib_VÆue
;

384 
	`GPIOA_Re£tBôs
(
GPIO_Pö_14
);

385 
	`GPIOA_ModeCfg
(
GPIO_Pö_13
 | 
GPIO_Pö_14
, 
GPIO_ModeIN_PD
);

388 
R8_TKEY_CFG
 &= 0xfe;

389 
R8_ADC_CFG
 &= 0xfc;

392 
b©Vﬁ
 = 
b©Buf
 * 1.05;

393 
b©Vﬁ
 = batVol / 2048;

395 
b©Buf
 = 
b©Vﬁ
 * 100;

398  (
uöt8_t
)
b©Buf
;

399 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/APP/broadcaster_main.c

13 
	~"CONFIG.h
"

14 
	~"HAL.h
"

15 
	~"brﬂdˇ°î.h
"

20 
__©åibuã__
((
	$Æig√d
(4))Ë
uöt32_t
 
MEM_BUF
[
BLE_MEMHEAP_SIZE
 / 4];

22 #if(
	`deföed
(
BLE_MAC
)Ë&& (BLE_MAC =
TRUE
)

23 c⁄° 
uöt8_t
 
MacAddr
[6] =

24 {0x84, 0xC2, 0xE4, 0x03, 0x02, 0x02
	}
};

34 
__©åibuã__
((
£˘i⁄
(".highcode")))

35 
__©åibuã__
((
noölöe
))

36 
	$Maö_Cúcuœti⁄
()

40 
	`TMOS_Sy°emPro˚ss
();

42 
	}
}

51 
	$maö
()

53 #if(
	`deföed
(
DCDC_ENABLE
)Ë&& (DCDC_ENABLE =
TRUE
)

54 
	`PWR_DCDCCfg
(
ENABLE
);

56 
	`SëSysClock
(
CLK_SOURCE_PLL_60MHz
);

57 #if(
	`deföed
(
HAL_SLEEP
)Ë&& (HAL_SLEEP =
TRUE
)

58 
	`GPIOA_ModeCfg
(
GPIO_Pö_AŒ
, 
GPIO_ModeIN_PU
);

59 
	`GPIOB_ModeCfg
(
GPIO_Pö_AŒ
, 
GPIO_ModeIN_PU
);

60 
	`GPIOA_ModeCfg
(
GPIO_Pö_13
 | 
GPIO_Pö_14
, 
GPIO_ModeIN_PD
);

63 #i‡
PrötfEN


64 
	`GPIOA_SëBôs
(
bTXD1
);

65 
	`GPIOA_ModeCfg
(
bTXD1
, 
GPIO_ModeOut_PP_5mA
);

66 
	`UART1_DefInô
();

67 
	`PRINT
("%s\n", 
VER_LIB
);

70 
	`CH57X_BLEInô
();

71 
	`HAL_Inô
();

72 
	`GAPRﬁe_Brﬂdˇ°îInô
();

73 
	`Brﬂdˇ°î_Inô
();

74 
	`Maö_Cúcuœti⁄
();

75 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/APP/include/I2C.h

8 #i‚de‡
SRC_I2C_H_


9 
	#SRC_I2C_H_


	)

10 
	~"CH57x_comm⁄.h
"

12 #i‚de‡
UINT8


13 
	tu8
;

15 
	#I2C_Pö_SCL
 
GPIO_Pö_5


	)

16 
	#I2C_Pö_SDA
 
GPIO_Pö_15


	)

18 
	#SCL_H
 
	`GPIOA_SëBôs
–
I2C_Pö_SCL
 )

	)

19 
	#SCL_L
 
	`GPIOA_Re£tBôs
–
I2C_Pö_SCL
 )

	)

20 
	#SDA_H
 
	`GPIOA_SëBôs
–
I2C_Pö_SDA
 )

	)

21 
	#SDA_L
 
	`GPIOA_Re£tBôs
–
I2C_Pö_SDA
 )

	)

22 
	#SCL_ªad
 
	`GPIOA_RódP‹tPö
–
I2C_Pö_SCL
 )

	)

23 
	#SDA_ªad
 
	`GPIOA_RódP‹tPö
–
I2C_Pö_SDA
 )

	)

24 
	#SCL_out
 
	`GPIOA_ModeCfg
(
I2C_Pö_SCL
, 
GPIO_ModeOut_PP_5mA
)

	)

25 
	#SCL_ö
 
	`GPIOA_ModeCfg
(
I2C_Pö_SCL
, 
GPIO_ModeIN_PU
)

	)

26 
	#SDA_out
 
	`GPIOA_ModeCfg
(
I2C_Pö_SDA
, 
GPIO_ModeOut_PP_5mA
)

	)

27 
	#SDA_ö
 
	`GPIOA_ModeCfg
(
I2C_Pö_SDA
, 
GPIO_ModeIN_PU
)

	)

30 
I2CInô
();

31 
I2C_dñay
();

32 
I2CSèπ
();

33 
I2CSt›
();

34 
I2CWrôe
(
I2Cd©a
);

35 
I2CAddªss
(
addªss
);

36 
I2CRódACK
();

37 
I2CRódNAK
();

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/APP/include/SHT4X.h

8 #i‚de‡
SRC_SHT4X_H_


9 
	#SRC_SHT4X_H_


	)

11 
SHT4XWrôeByã
(
Addªss
,
d©
);

12 
SHT4XRódSîül
(
Addªss
,*
d©
,
Àn
);

13 
SHT4XRódTem≥øtuªAndHumidôy
(sig√d *
ãm≥øtuª
,sig√d *
humidôy
);

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/APP/include/broadcaster.h

11 #i‚de‡
BROADCASTER_H


12 
	#BROADCASTER_H


	)

14 #ifde‡
__˝lu•lus


27 
	#SBP_START_DEVICE_EVT
 0x0001

	)

28 
	#SBP_Brﬂdˇ°î_ON_EVT
 0x0002

	)

29 
	#SBP_Brﬂdˇ°î_OFF_EVT
 0x0004

	)

42 
Brﬂdˇ°î_Inô
();

47 
uöt16_t
 
Brﬂdˇ°î_Pro˚ssEvít
(
uöt8_t
 
èsk_id
, uöt16_à
evíts
);

52 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/KEY.c

13 
	~"HAL.h
"

19 
uöt8_t
 
	ghÆKeySavedKeys
;

24 
hÆKeyCBack_t
 
	gpHÆKeyPro˚ssFun˘i⁄
;

35 
	$HAL_KeyInô
()

38 
hÆKeySavedKeys
 = 0;

40 
pHÆKeyPro˚ssFun˘i⁄
 = 
NULL
;

41 
KEY1_DIR
;

42 
KEY1_PU
;

43 
KEY2_DIR
;

44 
KEY2_PU
;

45 
	}
}

56 
	$HÆKeyC⁄fig
(
hÆKeyCBack_t
 
cback
)

59 
pHÆKeyPro˚ssFun˘i⁄
 = 
cback
;

60 
	`tmos_°¨t_èsk
(
hÆTaskID
, 
HAL_KEY_EVENT
, 
HAL_KEY_POLLING_VALUE
);

61 
	}
}

72 
uöt8_t
 
	$HÆKeyRód
()

74 
uöt8_t
 
keys
 = 0;

76 if(
	`HAL_PUSH_BUTTON1
())

78 
keys
 |
HAL_KEY_SW_1
;

80 if(
	`HAL_PUSH_BUTTON2
())

82 
keys
 |
HAL_KEY_SW_2
;

84 if(
	`HAL_PUSH_BUTTON3
())

86 
keys
 |
HAL_KEY_SW_3
;

88 if(
	`HAL_PUSH_BUTTON4
())

90 
keys
 |
HAL_KEY_SW_4
;

92  
keys
;

93 
	}
}

104 
	$HAL_KeyPﬁl
()

106 
uöt8_t
 
keys
 = 0;

107 if(
	`HAL_PUSH_BUTTON1
())

109 
keys
 |
HAL_KEY_SW_1
;

111 if(
	`HAL_PUSH_BUTTON2
())

113 
keys
 |
HAL_KEY_SW_2
;

115 if(
	`HAL_PUSH_BUTTON3
())

117 
keys
 |
HAL_KEY_SW_3
;

119 if(
	`HAL_PUSH_BUTTON4
())

121 
keys
 |
HAL_KEY_SW_4
;

123 if(
keys
 =
hÆKeySavedKeys
)

127 
hÆKeySavedKeys
 = 
keys
;

129 if(
keys
 && (
pHÆKeyPro˚ssFun˘i⁄
))

131 (
pHÆKeyPro˚ssFun˘i⁄
)(
keys
);

133 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/LED.c

13 
	~"HAL.h
"

18 
uöt8_t
 
	mmode
;

19 
uöt8_t
 
	mtodo
;

20 
uöt8_t
 
	m⁄P˘
;

21 
uöt16_t
 
	mtime
;

22 
uöt32_t
 
	m√xt
;

23 } 
	tHÆLedC⁄åﬁ_t
;

27 
HÆLedC⁄åﬁ_t
 
	mHÆLedC⁄åﬁTabÀ
[
HAL_LED_DEFAULT_MAX_LEDS
];

28 
uöt8_t
 
	m¶ìpA˘ive
;

29 } 
	tHÆLedSètus_t
;

34 
uöt8_t
 
	gHÆLedSèã
;

36 
uöt8_t
 
	g¥eBlökSèã
;

38 
HÆLedSètus_t
 
	gHÆLedSètusC⁄åﬁ
;

43 
HÆLedOnOff
(
uöt8_t
 
Àds
, uöt8_à
mode
);

56 
	$HAL_LedInô
()

59 
LED1_DDR
;

60 
	`HÆLedSë
(
HAL_LED_ALL
, 
HAL_LED_MODE_OFF
);

62 
	`HÆLedBlök
(
HAL_LED_1
, 10, 30, 4000);

64 
HÆLedSètusC⁄åﬁ
.
¶ìpA˘ive
 = 
FALSE
;

65 
	}
}

77 
uöt8_t
 
	$HÆLedSë
(
uöt8_t
 
Àds
, uöt8_à
mode
)

79 
uöt8_t
 
Àd
;

80 
HÆLedC⁄åﬁ_t
 *
°s
;

82 
mode
)

84 
HAL_LED_MODE_BLINK
:

87 
	`HÆLedBlök
(
Àds
, 1, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
);

91 
HAL_LED_MODE_FLASH
:

94 
	`HÆLedBlök
(
Àds
, 
HAL_LED_DEFAULT_FLASH_COUNT
, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
);

98 
HAL_LED_MODE_ON
:

99 
HAL_LED_MODE_OFF
:

100 
HAL_LED_MODE_TOGGLE
:

102 
Àd
 = 
HAL_LED_1
;

103 
Àds
 &
HAL_LED_ALL
;

104 
°s
 = 
HÆLedSètusC⁄åﬁ
.
HÆLedC⁄åﬁTabÀ
;

105 
Àds
)

107 if(
Àds
 & 
Àd
)

109 if(
mode
 !
HAL_LED_MODE_TOGGLE
)

111 
°s
->
mode
 = mode;

115 
°s
->
mode
 ^
HAL_LED_MODE_ON
;

117 
	`HÆLedOnOff
(
Àd
, 
°s
->
mode
);

118 
Àds
 ^
Àd
;

120 
Àd
 <<= 1;

121 
°s
++;

130 
	}
}

144 
	$HÆLedBlök
(
uöt8_t
 
Àds
, uöt8_à
numBlöks
, uöt8_à
≥r˚¡
, 
uöt16_t
 
≥riod
)

146 
uöt8_t
 
Àd
;

147 
HÆLedC⁄åﬁ_t
 *
°s
;

149 if(
Àds
 && 
≥r˚¡
 && 
≥riod
)

151 if(
≥r˚¡
 < 100)

153 
Àd
 = 
HAL_LED_1
;

154 
Àds
 &
HAL_LED_ALL
;

155 
°s
 = 
HÆLedSètusC⁄åﬁ
.
HÆLedC⁄åﬁTabÀ
;

156 
Àds
)

158 if(
Àds
 & 
Àd
)

161 
¥eBlökSèã
 |(
Àd
 & 
HÆLedSèã
);

162 
°s
->
mode
 = 
HAL_LED_MODE_OFF
;

163 
°s
->
time
 = 
≥riod
;

164 
°s
->
⁄P˘
 = 
≥r˚¡
;

165 
°s
->
todo
 = 
numBlöks
;

166 if(!
numBlöks
)

168 
°s
->
mode
 |
HAL_LED_MODE_FLASH
;

170 
°s
->
√xt
 = 
	`TMOS_GëSy°emClock
();

171 
°s
->
mode
 |
HAL_LED_MODE_BLINK
;

172 
Àds
 ^
Àd
;

174 
Àd
 <<= 1;

175 
°s
++;

177 
	`tmos_°¨t_èsk
(
hÆTaskID
, 
LED_BLINK_EVENT
, 0);

181 
	`HÆLedSë
(
Àds
, 
HAL_LED_MODE_ON
);

186 
	`HÆLedSë
(
Àds
, 
HAL_LED_MODE_OFF
);

188 
	}
}

197 
	$HÆLedUpd©e
()

199 
uöt8_t
 
Àd
, 
p˘
, 
Àds
;

200 
uöt16_t
 
√xt
, 
waô
;

201 
uöt32_t
 
time
;

202 
HÆLedC⁄åﬁ_t
 *
°s
;

204 
√xt
 = 0;

205 
Àd
 = 
HAL_LED_1
;

206 
Àds
 = 
HAL_LED_ALL
;

207 
°s
 = 
HÆLedSètusC⁄åﬁ
.
HÆLedC⁄åﬁTabÀ
;

210 if(!
HÆLedSètusC⁄åﬁ
.
¶ìpA˘ive
)

212 
Àds
)

214 if(
Àds
 & 
Àd
)

216 if(
°s
->
mode
 & 
HAL_LED_MODE_BLINK
)

218 
time
 = 
	`TMOS_GëSy°emClock
();

219 if(
time
 >
°s
->
√xt
)

221 if(
°s
->
mode
 & 
HAL_LED_MODE_ON
)

223 
p˘
 = 100 - 
°s
->
⁄P˘
;

224 
°s
->
mode
 &~
HAL_LED_MODE_ON
;

225 
	`HÆLedOnOff
(
Àd
, 
HAL_LED_MODE_OFF
);

226 if(!(
°s
->
mode
 & 
HAL_LED_MODE_FLASH
))

228 if(
°s
->
todo
 != 0xff)

230 
°s
->
todo
--;

232 if(!
°s
->
todo
)

234 
°s
->
mode
 ^
HAL_LED_MODE_BLINK
;

240 
p˘
 = 
°s
->
⁄P˘
;

241 
°s
->
mode
 |
HAL_LED_MODE_ON
;

242 
	`HÆLedOnOff
(
Àd
, 
HAL_LED_MODE_ON
);

244 if(
°s
->
mode
 & 
HAL_LED_MODE_BLINK
)

246 
waô
 = (((
uöt32_t
)
p˘
 * (uöt32_t)
°s
->
time
) / 100);

247 
°s
->
√xt
 = 
time
 + 
waô
;

252 
waô
 = 0;

254 
	`HÆLedSë
(
Àd
, ((
¥eBlökSèã
 &ÜedË!0Ë? 
HAL_LED_MODE_ON
 : 
HAL_LED_MODE_OFF
);

256 
¥eBlökSèã
 &(
Àd
 ^ 0xFF);

261 
waô
 = 
°s
->
√xt
 - 
time
;

263 if(!
√xt
 || (
waô
 && (wait <Çext)))

265 
√xt
 = 
waô
;

268 
Àds
 ^
Àd
;

270 
Àd
 <<= 1;

271 
°s
++;

273 if(
√xt
)

275 
	`tmos_°¨t_èsk
(
hÆTaskID
, 
LED_BLINK_EVENT
, 
√xt
);

278 
	}
}

290 
	$HÆLedOnOff
(
uöt8_t
 
Àds
, uöt8_à
mode
)

292 if(
Àds
 & 
HAL_LED_1
)

294 if(
mode
 =
HAL_LED_MODE_ON
)

296 
	`HAL_TURN_ON_LED1
();

300 
	`HAL_TURN_OFF_LED1
();

303 if(
Àds
 & 
HAL_LED_2
)

305 if(
mode
 =
HAL_LED_MODE_ON
)

307 
	`HAL_TURN_ON_LED2
();

311 
	`HAL_TURN_OFF_LED2
();

314 if(
Àds
 & 
HAL_LED_3
)

316 if(
mode
 =
HAL_LED_MODE_ON
)

318 
	`HAL_TURN_ON_LED3
();

322 
	`HAL_TURN_OFF_LED3
();

325 if(
Àds
 & 
HAL_LED_4
)

327 if(
mode
 =
HAL_LED_MODE_ON
)

329 
	`HAL_TURN_ON_LED4
();

333 
	`HAL_TURN_OFF_LED4
();

337 if(
mode
)

339 
HÆLedSèã
 |
Àds
;

343 
HÆLedSèã
 &(
Àds
 ^ 0xFF);

345 
	}
}

354 
uöt8_t
 
	$HÆLedGëSèã
()

356  
HÆLedSèã
;

357 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/MCU.c

13 
	~"HAL.h
"

15 
tmosTaskID
 
	ghÆTaskID
;

26 
	$Lib_CÆibøti⁄_LSI
()

28 if(
	`CÆibøti⁄_LSI_FLASH
() > 15)

30 
	`CÆibøti⁄_LSI_FLASH
();

32 if(
	`CÆibøti⁄_LSI_RAM
() > 15)

34 
	`CÆibøti⁄_LSI_RAM
();

36 
	`TMOS_Së32KTu√VÆue
(
I¡32K_Tu√_FLASH
, 
I¡32K_Tu√_RAM
);

37 
	}
}

39 #if(
deföed
(
BLE_SNV
)Ë&& (BLE_SNV =
TRUE
)

51 
uöt32_t
 
	$Lib_Ród_Fœsh
(
uöt32_t
 
addr
, uöt32_à
num
, uöt32_à*
pBuf
)

53 
	`EEPROM_READ
(
addr
, 
pBuf
, 
num
 * 4);

55 
	}
}

68 
uöt32_t
 
	$Lib_Wrôe_Fœsh
(
uöt32_t
 
addr
, uöt32_à
num
, uöt32_à*
pBuf
)

70 
	`EEPROM_ERASE
(
addr
, 
num
 * 4);

71 
	`EEPROM_WRITE
(
addr
, 
pBuf
, 
num
 * 4);

73 
	}
}

85 
	$CH57X_BLEInô
()

87 
uöt8_t
 
i
;

88 
bÀC⁄fig_t
 
cfg
;

89 if(
	`tmos_memcmp
(
VER_LIB
, 
VER_FILE
, 
	`°æí
(VER_FILE)Ë=
FALSE
)

91 #i‡
PrötfEN


92 
	`PRINT
("head fileÉrror...\n");

96 
	`SysTick_C⁄fig
(
SysTick_LOAD_RELOAD_Msk
);

97 
	`PFIC_DißbÀIRQ
(
SysTick_IRQn
);

99 
	`tmos_mem£t
(&
cfg
, 0, (
bÀC⁄fig_t
));

100 
cfg
.
MEMAddr
 = (
uöt32_t
)
MEM_BUF
;

101 
cfg
.
MEMLí
 = (
uöt32_t
)
BLE_MEMHEAP_SIZE
;

102 
cfg
.
BufMaxLí
 = (
uöt32_t
)
BLE_BUFF_MAX_LEN
;

103 
cfg
.
BufNumbî
 = (
uöt32_t
)
BLE_BUFF_NUM
;

104 
cfg
.
TxNumEvít
 = (
uöt32_t
)
BLE_TX_NUM_EVENT
;

105 
cfg
.
TxPowî
 = (
uöt32_t
)
BLE_TX_POWER
;

106 #if(
	`deföed
(
BLE_SNV
)Ë&& (BLE_SNV =
TRUE
)

107 
cfg
.
SNVAddr
 = (
uöt32_t
)
BLE_SNV_ADDR
;

108 
cfg
.
ªadFœshCB
 = 
Lib_Ród_Fœsh
;

109 
cfg
.
wrôeFœshCB
 = 
Lib_Wrôe_Fœsh
;

111 #if(
CLK_OSC32K
)

112 
cfg
.
SñRTCClock
 = (
uöt32_t
)
CLK_OSC32K
;

114 
cfg
.
C⁄√˘Numbî
 = (
PERIPHERAL_MAX_CONNECTION
 & 3Ë| (
CENTRAL_MAX_CONNECTION
 << 2);

115 
cfg
.
§™dCB
 = 
SYS_GëSysTickC¡
;

116 #if(
deföed
 
TEM_SAMPLE
Ë&& (TEM_SAMPLE =
TRUE
)

117 
cfg
.
tsCB
 = 
HAL_GëI¡îTempVÆue
;

118 #if(
CLK_OSC32K
)

119 
cfg
.
rcCB
 = 
Lib_CÆibøti⁄_LSI
;

122 #if(
	`deföed
(
HAL_SLEEP
)Ë&& (HAL_SLEEP =
TRUE
)

123 
cfg
.
WakeUpTime
 = 
WAKE_UP_RTC_MAX_TIME
;

124 
cfg
.
¶ìpCB
 = 
CH57X_LowPowî
;

126 #if(
	`deföed
(
BLE_MAC
)Ë&& (BLE_MAC =
TRUE
)

127 
i
 = 0; i < 6; i++)

129 
cfg
.
MacAddr
[
i
] = MacAddr[5 - i];

133 
uöt8_t
 
MacAddr
[6];

134 
	`GëMACAddªss
(
MacAddr
);

135 
i
 = 0; i < 6; i++)

137 
cfg
.
MacAddr
[
i
] = MacAddr[i];

141 if(!
cfg
.
MEMAddr
 || cfg.
MEMLí
 < 4 * 1024)

145 
i
 = 
	`BLE_LibInô
(&
cfg
);

146 if(
i
)

148 #i‡
PrötfEN


149 
	`PRINT
("LIB inôÉº‹ code: %x ...\n", 
i
);

153 
	}
}

166 
tmosEvíts
 
	$HAL_Pro˚ssEvít
(
tmosTaskID
 
èsk_id
, 
tmosEvíts
 
evíts
)

168 
uöt8_t
 *
msgPå
;

170 if(
evíts
 & 
SYS_EVENT_MSG
)

172 
msgPå
 = 
	`tmos_msg_ª˚ive
(
èsk_id
);

173 if(
msgPå
)

176 
	`tmos_msg_dóŒoˇã
(
msgPå
);

178  
evíts
 ^ 
SYS_EVENT_MSG
;

180 if(
evíts
 & 
LED_BLINK_EVENT
)

182 
	`GPIOB_ModeCfg
(
GPIO_Pö_14
, 
GPIO_ModeOut_PP_5mA
);

183 
	`DñayUs
(2);

184 
	`GPIOB_Re£tBôs
(
GPIO_Pö_14
);

185 
	`tmos_°¨t_èsk
(
hÆTaskID
,
LED_OFF_EVENT
,
	`MS1_TO_SYSTEM_TIME
(1000));

187  
evíts
 ^ 
LED_BLINK_EVENT
;

189 if(
evíts
 & 
LED_OFF_EVENT
)

191 
	`GPIOB_SëBôs
(
GPIO_Pö_14
);

192 
	`DñayUs
(2);

193 
	`GPIOB_ModeCfg
(
GPIO_Pö_14
, 
GPIO_ModeIN_PU
);

195  
evíts
 ^ 
LED_OFF_EVENT
;

197 if(
evíts
 & 
HAL_KEY_EVENT
)

199 #if(
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
)

200 
	`HAL_KeyPﬁl
();

201 
	`tmos_°¨t_èsk
(
hÆTaskID
, 
HAL_KEY_EVENT
, 
	`MS1_TO_SYSTEM_TIME
(100));

202  
evíts
 ^ 
HAL_KEY_EVENT
;

205 if(
evíts
 & 
HAL_REG_INIT_EVENT
)

207 #if(
deföed
 
BLE_CALIBRATION_ENABLE
Ë&& (BLE_CALIBRATION_ENABLE =
TRUE
)

208 
	`BLE_RegInô
();

209 #if(
CLK_OSC32K
)

210 
	`Lib_CÆibøti⁄_LSI
();

212 
	`tmos_°¨t_èsk
(
hÆTaskID
, 
HAL_REG_INIT_EVENT
, 
	`MS1_TO_SYSTEM_TIME
(
BLE_CALIBRATION_PERIOD
));

213  
evíts
 ^ 
HAL_REG_INIT_EVENT
;

216 if(
evíts
 & 
HAL_TEST_EVENT
)

218 #i‡
PrötfEN


219 
	`PRINT
("* \n");

221 
	`tmos_°¨t_èsk
(
hÆTaskID
, 
HAL_TEST_EVENT
, 
	`MS1_TO_SYSTEM_TIME
(1000));

222  
evíts
 ^ 
HAL_TEST_EVENT
;

225 
	}
}

236 
	$HAL_Inô
()

238 
hÆTaskID
 = 
	`TMOS_Pro˚ssEvítRegi°î
(
HAL_Pro˚ssEvít
);

239 
	`HAL_TimeInô
();

240 #if(
deföed
 
HAL_SLEEP
Ë&& (HAL_SLEEP =
TRUE
)

241 
	`HAL_SÀïInô
();

243 #if(
deföed
 
HAL_LED
Ë&& (HAL_LED =
TRUE
)

244 
	`HAL_LedInô
();

246 #if(
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
)

247 
	`HAL_KeyInô
();

249 #if(
deföed
 
BLE_CALIBRATION_ENABLE
Ë&& (BLE_CALIBRATION_ENABLE =
TRUE
)

250 
	`tmos_°¨t_èsk
(
hÆTaskID
, 
HAL_REG_INIT_EVENT
, 
	`MS1_TO_SYSTEM_TIME
(
BLE_CALIBRATION_PERIOD
));

252 
	`tmos_°¨t_èsk
–
hÆTaskID
, 
LED_BLINK_EVENT
, 160 );

253 
	}
}

262 
uöt16_t
 
	$HAL_GëI¡îTempVÆue
()

264 
uöt8_t
 
£ns‹
, 
ch™√l
, 
c⁄fig
, 
tkey_cfg
;

265 
uöt16_t
 
adc_d©a
;

267 
tkey_cfg
 = 
R8_TKEY_CFG
;

268 
£ns‹
 = 
R8_TEM_SENSOR
;

269 
ch™√l
 = 
R8_ADC_CHANNEL
;

270 
c⁄fig
 = 
R8_ADC_CFG
;

271 
	`ADC_I¡îTSSampInô
();

272 
R8_ADC_CONVERT
 |
RB_ADC_START
;

273 
R8_ADC_CONVERT
 & 
RB_ADC_START
);

274 
adc_d©a
 = 
R16_ADC_DATA
;

275 
R8_TEM_SENSOR
 = 
£ns‹
;

276 
R8_ADC_CHANNEL
 = 
ch™√l
;

277 
R8_ADC_CFG
 = 
c⁄fig
;

278 
R8_TKEY_CFG
 = 
tkey_cfg
;

279  (
adc_d©a
);

280 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/RTC.c

13 
	~"HAL.h
"

18 
	#RTC_INIT_TIME_HOUR
 0

	)

19 
	#RTC_INIT_TIME_MINUTE
 0

	)

20 
	#RTC_INIT_TIME_SECEND
 0

	)

25 vﬁ©ûê
uöt32_t
 
	gRTCTigFœg
;

36 
	$RTC_SëTignTime
(
uöt32_t
 
time
)

38 
	`sys_ß„_ac˚ss_íabÀ
();

39 
R32_RTC_TRIG
 = 
time
;

40 
RTCTigFœg
 = 0;

41 
	`sys_ß„_ac˚ss_dißbÀ
();

42 
	}
}

53 
__©åibuã__
((
öãºu±
("WCH-Interrupt-fast")))

54 
__©åibuã__
((
£˘i⁄
(".highcode")))

55 
	$RTC_IRQH™dÀr
()

57 
R8_RTC_FLAG_CTRL
 = (
RB_RTC_TMR_CLR
 | 
RB_RTC_TRIG_CLR
);

58 
RTCTigFœg
 = 1;

59 
	}
}

70 
	$HAL_TimeInô
()

72 #if(
CLK_OSC32K
)

73 
	`sys_ß„_ac˚ss_íabÀ
();

74 
R8_CK32K_CONFIG
 &~(
RB_CLK_OSC32K_XT
 | 
RB_CLK_XT32K_PON
);

75 
	`sys_ß„_ac˚ss_íabÀ
();

76 
R8_CK32K_CONFIG
 |
RB_CLK_INT32K_PON
;

77 
	`Lib_CÆibøti⁄_LSI
();

79 
	`sys_ß„_ac˚ss_íabÀ
();

80 
R8_CK32K_CONFIG
 |
RB_CLK_OSC32K_XT
 | 
RB_CLK_INT32K_PON
 | 
RB_CLK_XT32K_PON
;

82 
	`sys_ß„_ac˚ss_dißbÀ
();

83 
	`RTC_InôTime
(2020, 1, 1, 0, 0, 0);

84 
	`TMOS_TimîInô
(0);

85 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/SLEEP.c

13 
	~"HAL.h
"

24 
uöt32_t
 
	$CH57X_LowPowî
(
uöt32_t
 
time
)

26 #if(
	`deföed
(
HAL_SLEEP
)Ë&& (HAL_SLEEP =
TRUE
)

27 
uöt32_t
 
time_¶ìp
, 
time_cuº
, 
úq_°©us
;

29 
	`SYS_DißbÀAŒIrq
(&
úq_°©us
);

30 
time_cuº
 = 
	`RTC_GëCy˛e32k
();

32 i‡(
time
 < 
time_cuº
) {

33 
time_¶ìp
 = 
time
 + (
RTC_TIMER_MAX_VALUE
 - 
time_cuº
);

35 
time_¶ìp
 = 
time
 - 
time_cuº
;

38 i‡((
time_¶ìp
 < 
SLEEP_RTC_MIN_TIME
)) {

39 
	`SYS_RecovîIrq
(
úq_°©us
);

43 
	`RTC_SëTignTime
(
time
);

44 
	`SYS_RecovîIrq
(
úq_°©us
);

45 #if(
DEBUG
 =
Debug_UART1
)

46 (
R8_UART1_LSR
 & 
RB_LSR_TX_ALL_EMP
) == 0)

48 
	`__n›
();

52 if(!
RTCTigFœg
)

54 
	`LowPowî_SÀï
(
RB_PWR_RAM2K
 | 
RB_PWR_RAM16K
 | 
RB_PWR_EXTEND
);

55 #if(
	`deföed
(
DCDC_ENABLE
)Ë&& (DCDC_ENABLE =
TRUE
)

56 
	`PWR_DCDCCfg
(
ENABLE
);

58 if(
RTCTigFœg
)

60 
time
 +
WAKE_UP_RTC_MAX_TIME
;

61 if(
time
 > 0xA8C00000)

63 
time
 -= 0xA8C00000;

65 
	`RTC_SëTignTime
(
time
);

66 
	`LowPowî_IdÀ
();

68 
	`HSECFG_Cuºít
(
HSE_RCur_100
);

76 
	}
}

87 
	$HAL_SÀïInô
()

89 #if(
	`deföed
(
HAL_SLEEP
)Ë&& (HAL_SLEEP =
TRUE
)

90 
	`sys_ß„_ac˚ss_íabÀ
();

91 
R8_SLP_WAKE_CTRL
 |
RB_SLP_RTC_WAKE
;

92 
	`sys_ß„_ac˚ss_íabÀ
();

93 
R8_RTC_MODE_CTRL
 |
RB_RTC_TRIG_EN
;

94 
	`sys_ß„_ac˚ss_dißbÀ
();

95 
	`PFIC_E«bÀIRQ
(
RTC_IRQn
);

97 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/include/HAL.h

12 #i‚de‡
__HAL_H


13 
	#__HAL_H


	)

15 #ifde‡
__˝lu•lus


19 
	~"c⁄fig.h
"

20 
	~"RTC.h
"

21 
	~"SLEEP.h
"

22 
	~"LED.h
"

23 
	~"KEY.h
"

26 
	#LED_BLINK_EVENT
 0x0001

	)

27 
	#HAL_KEY_EVENT
 0x0002

	)

28 
	#LED_OFF_EVENT
 0x0004

	)

29 
	#HAL_REG_INIT_EVENT
 0x2000

	)

30 
	#HAL_TEST_EVENT
 0x4000

	)

35 
tmosTaskID
 
hÆTaskID
;

44 
HAL_Inô
();

53 
tmosEvíts
 
HAL_Pro˚ssEvít
(
tmosTaskID
 
èsk_id
,ÅmosEvít†
evíts
);

58 
CH57X_BLEInô
();

65 
uöt16_t
 
HAL_GëI¡îTempVÆue
();

70 
Lib_CÆibøti⁄_LSI
();

75 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/include/KEY.h

12 #i‚de‡
__KEY_H


13 
	#__KEY_H


	)

15 #ifde‡
__˝lu•lus


22 
	#HAL_KEY_POLLING_VALUE
 100

	)

25 
	#HAL_KEY_SW_1
 0x01

26 
	#HAL_KEY_SW_2
 0x02

27 
	#HAL_KEY_SW_3
 0x04

28 
	#HAL_KEY_SW_4
 0x08

29 

	)

33 
	#KEY1_BV
 
	`BV
(22)

	)

34 
	#KEY2_BV
 
	`BV
(4)

	)

35 
	#KEY3_BV
 ()

	)

36 
	#KEY4_BV
 ()

	)

38 
	#KEY1_PU
 (
R32_PB_PU
 |
KEY1_BV
)

	)

39 
	#KEY2_PU
 (
R32_PB_PU
 |
KEY2_BV
)

	)

40 
	#KEY3_PU
 ()

	)

41 
	#KEY4_PU
 ()

	)

43 
	#KEY1_DIR
 (
R32_PB_DIR
 &~
KEY1_BV
)

	)

44 
	#KEY2_DIR
 (
R32_PB_DIR
 &~
KEY2_BV
)

	)

45 
	#KEY3_DIR
 ()

	)

46 
	#KEY4_DIR
 ()

	)

48 
	#KEY1_IN
 (
	`ACTIVE_LOW
(
R32_PB_PIN
 & 
KEY1_BV
))

	)

49 
	#KEY2_IN
 (
	`ACTIVE_LOW
(
R32_PB_PIN
 & 
KEY2_BV
))

	)

50 
	#KEY3_IN
 ()

	)

51 
	#KEY4_IN
 ()

	)

53 
	#HAL_PUSH_BUTTON1
(Ë(
KEY1_IN
)

54 
	#HAL_PUSH_BUTTON2
(Ë(
KEY2_IN
)

	)

55 
	#HAL_PUSH_BUTTON3
(Ë(0)

	)

56 
	#HAL_PUSH_BUTTON4
(Ë(0)

	)

61 (*
hÆKeyCBack_t
)(
	tuöt8_t
 
	tkeys
);

65 
uöt8_t
 
keys
;

66 } 
	tkeyCh™ge_t
;

79 
HAL_KeyInô
();

84 
HAL_KeyPﬁl
();

91 
HÆKeyC⁄fig
(c⁄° 
hÆKeyCBack_t
 
cback
);

96 
HÆKeyCÆlback
(
uöt8_t
 
keys
);

101 
uöt8_t
 
HÆKeyRód
();

106 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/include/LED.h

12 #i‚de‡
__LED_H


13 
	#__LED_H


	)

15 #ifde‡
__˝lu•lus


24 
	#HAL_LED_1
 0x01

	)

25 
	#HAL_LED_2
 0x02

	)

26 
	#HAL_LED_3
 0x04

	)

27 
	#HAL_LED_4
 0x08

	)

28 
	#HAL_LED_ALL
 (
HAL_LED_1
 | 
HAL_LED_2
 | 
HAL_LED_3
 | 
HAL_LED_4
)

	)

31 
	#HAL_LED_MODE_OFF
 0x00

	)

32 
	#HAL_LED_MODE_ON
 0x01

	)

33 
	#HAL_LED_MODE_BLINK
 0x02

	)

34 
	#HAL_LED_MODE_FLASH
 0x04

	)

35 
	#HAL_LED_MODE_TOGGLE
 0x08

	)

38 
	#HAL_LED_DEFAULT_MAX_LEDS
 4

	)

39 
	#HAL_LED_DEFAULT_DUTY_CYCLE
 5

	)

40 
	#HAL_LED_DEFAULT_FLASH_COUNT
 50

	)

41 
	#HAL_LED_DEFAULT_FLASH_TIME
 1000

	)

50 
	#LED1_BV
 
	`BV
(15)

	)

51 
	#LED2_BV


	)

52 
	#LED3_BV


	)

54 
	#LED1_OUT
 (
R32_PB_OUT
)

	)

55 
	#LED2_OUT
 0

	)

56 
	#LED3_OUT
 0

	)

57 
	#LED4_OUT
 0

	)

59 
	#LED1_DDR
 (
R32_PB_DIR
 |
LED1_BV
)

	)

60 
	#LED2_DDR
 0

	)

61 
	#LED3_DDR
 0

	)

63 
	#HAL_TURN_OFF_LED1
(Ë(
LED1_OUT
 |
LED1_BV
)

	)

64 
	#HAL_TURN_OFF_LED2
()

	)

65 
	#HAL_TURN_OFF_LED3
()

	)

66 
	#HAL_TURN_OFF_LED4
()

	)

68 
	#HAL_TURN_ON_LED1
(Ë(
LED1_OUT
 &(~
LED1_BV
))

	)

69 
	#HAL_TURN_ON_LED2
()

	)

70 
	#HAL_TURN_ON_LED3
()

	)

71 
	#HAL_TURN_ON_LED4
()

	)

73 
	#HAL_STATE_LED1
(Ë0

	)

74 
	#HAL_STATE_LED2
(Ë0

	)

75 
	#HAL_STATE_LED3
(Ë0

	)

76 
	#HAL_STATE_LED4
(Ë0

	)

85 
HAL_LedInô
();

90 
HÆLedUpd©e
();

98 
uöt8_t
 
HÆLedSë
(uöt8_à
Àd
, uöt8_à
mode
);

108 
HÆLedBlök
(
uöt8_t
 
Àds
, uöt8_à
˙t
, uöt8_à
duty
, 
uöt16_t
 
time
);

113 
HÆLedE¡îSÀï
();

118 
HÆLedExôSÀï
();

123 
uöt8_t
 
HÆLedGëSèã
();

128 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/include/RTC.h

12 #i‚de‡
__RTC_H


13 
	#__RTC_H


	)

15 #ifde‡
__˝lu•lus


20 
	#RTC_TIMER_MAX_VALUE
 0xa8c00000

	)

22 vﬁ©ûê
uöt32_t
 
RTCTigFœg
;

27 
HAL_TimeInô
();

34 
RTC_SëTignTime
(
uöt32_t
 
time
);

36 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/include/SLEEP.h

12 #i‚de‡
__SLEEP_H


13 
	#__SLEEP_H


	)

15 #ifde‡
__˝lu•lus


30 
HAL_SÀïInô
();

39 
uöt32_t
 
CH57X_LowPowî
(uöt32_à
time
);

44 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/include/config.h

12 #i‚de‡
__CONFIG_H


13 
	#__CONFIG_H


	)

15 
	#ID_CH573
 0x73

	)

17 
	#CHIP_ID
 
ID_CH571


	)

19 #ifde‡
CH57xBLE_ROM


20 
	~"CH57xBLE_ROM.H
"

22 
	~"CH57xBLE_LIB.H
"

24 
	~"CH57x_comm⁄.h
"

74 
	#PrötfEN
 
FALSE


	)

75 #i‚de‡
BLE_MAC


76 
	#BLE_MAC
 
FALSE


	)

78 #i‚de‡
DCDC_ENABLE


79 
	#DCDC_ENABLE
 
TRUE


	)

81 #i‚de‡
HAL_SLEEP


82 
	#HAL_SLEEP
 
TRUE


	)

84 #i‚de‡
SLEEP_RTC_MIN_TIME


85 
	#SLEEP_RTC_MIN_TIME
 (30U)

	)

87 #i‚de‡
WAKE_UP_RTC_MAX_TIME


88 
	#WAKE_UP_RTC_MAX_TIME
 (45U)

	)

90 #i‚de‡
HAL_KEY


91 
	#HAL_KEY
 
FALSE


	)

93 #i‚de‡
HAL_LED


94 
	#HAL_LED
 
FALSE


	)

96 #i‚de‡
TEM_SAMPLE


97 
	#TEM_SAMPLE
 
TRUE


	)

99 #i‚de‡
BLE_CALIBRATION_ENABLE


100 
	#BLE_CALIBRATION_ENABLE
 
TRUE


	)

102 #i‚de‡
BLE_CALIBRATION_PERIOD


103 
	#BLE_CALIBRATION_PERIOD
 120000

	)

105 #i‚de‡
BLE_SNV


106 
	#BLE_SNV
 
TRUE


	)

108 #i‚de‡
BLE_SNV_ADDR


109 
	#BLE_SNV_ADDR
 0x77E00-
FLASH_ROM_MAX_SIZE


	)

111 #i‚de‡
CLK_OSC32K


112 
	#CLK_OSC32K
 1

114 #i‚de‡
BLE_MEMHEAP_SIZE


	)

115 
	#BLE_MEMHEAP_SIZE
 (1024*6)

	)

117 #i‚de‡
BLE_BUFF_MAX_LEN


118 
	#BLE_BUFF_MAX_LEN
 27

	)

120 #i‚de‡
BLE_BUFF_NUM


121 
	#BLE_BUFF_NUM
 10

	)

123 #i‚de‡
BLE_TX_NUM_EVENT


124 
	#BLE_TX_NUM_EVENT
 1

	)

126 #i‚de‡
BLE_TX_POWER


127 
	#BLE_TX_POWER
 
LL_TX_POWEER_0_DBM


	)

129 #i‚de‡
PERIPHERAL_MAX_CONNECTION


130 
	#PERIPHERAL_MAX_CONNECTION
 1

	)

132 #i‚de‡
CENTRAL_MAX_CONNECTION


133 
	#CENTRAL_MAX_CONNECTION
 3

	)

136 
uöt32_t
 
MEM_BUF
[
BLE_MEMHEAP_SIZE
 / 4];

137 c⁄° 
uöt8_t
 
MacAddr
[6];

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/LIB/CH57xBLE_LIB.h

13 #i‚de‡
__CH57xBLE_LIB_H


14 
	#__CH57xBLE_LIB_H


	)

16 #ifde‡
__˝lu•lus


20 
	~"°döt.h
"

22 #i‚de‡
öt8


23 
öt8_t
 
	töt8
;

25 #i‚de‡
öt16


26 
öt16_t
 
	töt16
;

28 #i‚de‡
BOOL


29 
uöt8_t
 
	tBOOL
;

31 #i‚de‡
s8


32 
öt8_t
 
	ts8
;

34 #i‚de‡
s16


35 
öt16_t
 
	ts16
;

37 #i‚de‡
s32


38 
öt32_t
 
	ts32
;

40 #i‚de‡
u8


41 
uöt8_t
 
	tu8
;

43 #i‚de‡
u16


44 
uöt16_t
 
	tu16
;

46 #i‚de‡
u32


47 
uöt32_t
 
	tu32
;

49 #i‚de‡
u64


50 
uöt64_t
 
	tu64
;

52 #i‚de‡
u8C


53 c⁄° 
	tuöt8_t
 
	tu8C
;

56 #i‚de‡
u8V


57 
uöt8_t
 vﬁ©ûê
	tu8V
;

59 #i‚de‡
u32V


60 
uöt32_t
 vﬁ©ûê
	tu32V
;

63 #i‚de‡
uöt8


64 
uöt8_t
 
	tuöt8
;

66 #i‚de‡
uöt16


67 
uöt16_t
 
	tuöt16
;

69 #i‚de‡
uöt32


70 
uöt32_t
 
	tuöt32
;

73 #i‚de‡
TRUE


74 
	#TRUE
 1

	)

76 #i‚de‡
FALSE


77 
	#FALSE
 0

	)

79 #i‚de‡
NULL


80 
	#NULL
 0

	)

82 #i‚de‡
SUCCESS


83 
	#SUCCESS
 0x00

	)

85 #i‚de‡ 
bSètus_t


86 
uöt8_t
 
	tbSètus_t
;

88 #i‚de‡ 
tmosTaskID


89 
uöt8_t
 
	ttmosTaskID
;

91 #i‚de‡ 
tmosEvíts


92 
uöt16_t
 
	ttmosEvíts
;

94 #i‚de‡ 
tmosTimî


95 
uöt32_t
 
	ttmosTimî
;

97 #i‚de‡ 
tmosSnvId_t


98 
uöt8_t
 
	ttmosSnvId_t
;

100 #i‚de‡ 
tmosSnvLí_t


101 
uöt8_t
 
	ttmosSnvLí_t
;

105 
uöt32_t
 (*
	tp‚SøndCB
)( );

107 
uöt32_t
 (*
	tp‚IdÀCB
)–
	tuöt32_t
 );

109 (*
p‚LSICÆibøti⁄CB
)( );

111 
uöt16_t
 (*
	tp‚TempSam∂eCB
)( );

113 (*
p‚EvítCB
)–
	tuöt32_t
 
	ttimeUs
 );

115 (*
p‚LibSètusEº‹CB
)–
	tuöt8_t
 
	tcode
, 
	tuöt32_t
 
	t°©us
 );

117 
tmosEvíts
 (*
	tpTaskEvítH™dÀrFn
)–
	ttmosTaskID
 
	tèskID
, 
	ttmosEvíts
 
	tevít
 );

119 
uöt32_t
 (*
	tp‚FœshRódCB
)–
	tuöt32_t
 
	taddr
, uöt32_à
	tnum
, uöt32_à*
	tpBuf
 );

121 
uöt32_t
 (*
	tp‚FœshWrôeCB
)–
	tuöt32_t
 
	taddr
, uöt32_à
	tnum
, uöt32_à*
	tpBuf
 );

123 
uöt32_t
 (*
	tp‚GëSysClock
)( );

126 
	sèg_bÀ_c⁄fig


128 
uöt32_t
 
MEMAddr
;

129 
uöt16_t
 
MEMLí
;

130 
uöt32_t
 
SNVAddr
;

131 
uöt16_t
 
SNVBlock
;

132 
uöt8_t
 
SNVNum
;

133 
uöt8_t
 
BufMaxLí
;

135 
uöt8_t
 
BufNumbî
;

137 
uöt8_t
 
TxNumEvít
;

138 
uöt8_t
 
TxPowî
;

139 
uöt8_t
 
WakeUpTime
;

140 
uöt8_t
 
SñRTCClock
;

143 
uöt8_t
 
RxNumEvít
;

144 
uöt8_t
 
MacAddr
[6];

145 
uöt8_t
 
C⁄√˘Numbî
;

146 
uöt8_t
 
WödowWidíög
;

147 
uöt8_t
 
WaôWödow
;

148 
p‚SøndCB
 
§™dCB
;

149 
p‚IdÀCB
 
¶ìpCB
;

150 
p‚TempSam∂eCB
 
tsCB
;

151 
p‚LSICÆibøti⁄CB
 
rcCB
;

152 
p‚LibSètusEº‹CB
 
°aCB
;

153 
p‚FœshRódCB
 
ªadFœshCB
;

154 
p‚FœshWrôeCB
 
wrôeFœshCB
;

155 } 
	tbÀC⁄fig_t
;

158 
	sèg_bÀ_∑_c⁄åﬁ_c⁄fig


160 
uöt32_t
 
txE«bÀGPIO
;

161 
uöt32_t
 
txDißbÀGPIO
;

162 
uöt32_t
 
tx_pö
;

163 
uöt32_t
 
rxE«bÀGPIO
;

164 
uöt32_t
 
rxDißbÀGPIO
;

165 
uöt32_t
 
rx_pö
;

166 } 
	tbÀPaC⁄åﬁC⁄fig_t
;

169 
	#SYS_EVENT_MSG
 (0x8000)

170 
	#INVALID_TASK_ID
 0xFF

171 
	#TASK_NO_TASK
 0xFF

	)

175 
uöt8_t
 
evít
;

176 
uöt8_t
 
°©us
;

177 } 
	ttmos_evít_hdr_t
;

182 
	#VER_FILE
 "CH57x_BLE_LIB_V1.9"

	)

183 c⁄° 
uöt8_t
 
VER_LIB
[];

184 
	#SYSTEM_TIME_MICROSEN
 625

185 
	#MS1_TO_SYSTEM_TIME
(
x
Ë((x)*1000/
SYSTEM_TIME_MICROSEN
)

186 

	)

187 
	#BREAK_UINT32
–
v¨
, 
ByãNum
 ) (
uöt8_t
)((
uöt32_t
)(((v¨Ë>>((ByãNumË* 8)Ë& 0x00FF))

	)

188 
	#HI_UINT16
(
a
Ë((◊Ë>> 8Ë& 0xFF)

	)

189 
	#LO_UINT16
(
a
Ë(◊Ë& 0xFF)

	)

190 
	#HI_UINT8
(
a
Ë((◊Ë>> 4Ë& 0x0F)

	)

191 
	#LO_UINT8
(
a
Ë(◊Ë& 0x0F)

	)

192 
	#BUILD_UINT32
(
Byã0
, 
Byã1
, 
Byã2
, 
Byã3
) \

193 ((
uöt32_t
)(((uöt32_t)(
Byã0
) & 0x00FF) \

194 + (((
uöt32_t
)(
Byã1
) & 0x00FF) << 8) \

195 + (((
uöt32_t
)(
Byã2
) & 0x00FF) << 16) \

196 + (((
uöt32_t
)(
Byã3
Ë& 0x00FFË<< 24)))

	)

197 
	#BUILD_UINT16
(
loByã
, 
hiByã
Ë((
uöt16_t
)((÷oByãË& 0x00FF)|(((hiByãË& 0x00FF)<<8)))

	)

199 
	#ACTIVE_LOW
 !

	)

200 
	#ACTIVE_HIGH
 !!

201 

	)

202 #i‚de‡
BV


203 
	#BV
(
n
Ë(1 << (n))

	)

206 #i‚de‡
BF


207 
	#BF
(
x
,
b
,
s
Ë(((xË& (b)Ë>> (s))

	)

210 #i‚de‡
MIN


211 
	#MIN
(
n
,
m
Ë((“Ë< (m)Ë? (nË: (m))

	)

214 #i‚de‡
MAX


215 
	#MAX
(
n
,
m
Ë((“Ë< (m)Ë? (mË: (n))

	)

218 #i‚de‡
ABS


219 
	#ABS
(
n
Ë((“Ë< 0Ë? -“Ë: (n))

	)

223 
	#LL_TX_POWEER_MINUS_20_DBM
 0x01

	)

224 
	#LL_TX_POWEER_MINUS_14_DBM
 0x03

	)

225 
	#LL_TX_POWEER_MINUS_8_DBM
 0x07

	)

226 
	#LL_TX_POWEER_MINUS_4_DBM
 0x0B

	)

227 
	#LL_TX_POWEER_0_DBM
 0x14

	)

228 
	#LL_TX_POWEER_1_DBM
 0x17

	)

229 
	#LL_TX_POWEER_2_DBM
 0x1A

	)

230 
	#LL_TX_POWEER_3_DBM
 0x1F

	)

231 
	#LL_TX_POWEER_4_DBM
 0x25

	)

232 
	#LL_TX_POWEER_5_DBM
 0x32

	)

235 
	#ERR_LLE_IRQ_HANDLE
 0x01

	)

236 
	#ERR_MEM_ALLOCATE_SIZE
 0x02

	)

237 
	#ERR_SET_MAC_ADDR
 0x03

	)

238 
	#ERR_GAP_ROLE_CONFIG
 0x04

	)

239 
	#ERR_CONNECT_NUMBER_CONFIG
 0x05

	)

240 
	#ERR_SNV_ADDR_CONFIG
 0x06

	)

241 
	#ERR_CLOCK_SELECT_CONFIG
 0x07

	)

244 
	#B_ADDR_LEN
 6

	)

246 
	#B_RANDOM_NUM_SIZE
 8

	)

248 
	#KEYLEN
 16

	)

250 
	#B_MAX_ADV_LEN
 31

251 

	)

252 
	#FAILURE
 0x01

253 
	#INVALIDPARAMETER
 0x02

254 
	#INVALID_TASK
 0x03

255 
	#MSG_BUFFER_NOT_AVAIL
 0x04

256 
	#INVALID_MSG_POINTER
 0x05

257 
	#INVALID_EVENT_ID
 0x06

258 
	#INVALID_TIMEOUT
 0x07

259 
	#NO_TIMER_AVAIL
 0x08

260 
	#NV_OPER_FAILED
 0x0A

261 
	#INVALID_MEM_SIZE
 0x0B

262 

	)

266 
	#bÀInvÆidTaskID
 
INVALID_TASK


267 
	#bÀEecKeyReque°Reje˘ed
 0x06

268 
	#bÀNŸRódy
 0x10

269 
	#bÀAÃódyInReque°edMode
 0x11

270 
	#bÀInc‹ª˘Mode
 0x12

271 
	#bÀMemAŒocEº‹
 0x13

272 
	#bÀNŸC⁄√˘ed
 0x14

273 
	#bÀNoResour˚s
 0x15

274 
	#bÀPídög
 0x16

275 
	#bÀTimeout
 0x17

276 
	#bÀInvÆidR™ge
 0x18

277 
	#bÀLökEn¸y±ed
 0x19

278 
	#bÀPro˚duªCom∂ëe
 0x1A

279 
	#bÀInvÆidMtuSize
 0x1B

280 

	)

283 
	#INVALID_CONNHANDLE
 0xFFFF

284 
	#LOOPBACK_CONNHANDLE
 0xFFFE

286 
	#LINK_NOT_CONNECTED
 0x00

287 
	#LINK_CONNECTED
 0x01

288 
	#LINK_AUTHENTICATED
 0x02

289 
	#LINK_BOUND
 0x04

290 
	#LINK_ENCRYPTED
 0x10

292 
	#LINKDB_STATUS_UPDATE_NEW
 0

293 
	#LINKDB_STATUS_UPDATE_REMOVED
 1

294 
	#LINKDB_STATUS_UPDATE_STATEFLAGS
 2

295 

	)

299 
	#GAP_SERVICE_UUID
 0x1800

300 
	#GATT_SERVICE_UUID
 0x1801

301 

	)

305 
	#GATT_PRIMARY_SERVICE_UUID
 0x2800

306 
	#GATT_SECONDARY_SERVICE_UUID
 0x2801

307 
	#GATT_INCLUDE_UUID
 0x2802

308 
	#GATT_CHARACTER_UUID
 0x2803

309 

	)

313 
	#GATT_CHAR_EXT_PROPS_UUID
 0x2900

314 
	#GATT_CHAR_USER_DESC_UUID
 0x2901

315 
	#GATT_CLIENT_CHAR_CFG_UUID
 0x2902

316 
	#GATT_SERV_CHAR_CFG_UUID
 0x2903

317 
	#GATT_CHAR_FORMAT_UUID
 0x2904

318 
	#GATT_CHAR_AGG_FORMAT_UUID
 0x2905

319 
	#GATT_VALID_RANGE_UUID
 0x2906

320 
	#GATT_EXT_REPORT_REF_UUID
 0x2907

321 
	#GATT_REPORT_REF_UUID
 0x2908

322 

	)

326 
	#DEVICE_NAME_UUID
 0x2A00

327 
	#APPEARANCE_UUID
 0x2A01

328 
	#PERI_PRIVACY_FLAG_UUID
 0x2A02

329 
	#RECONNECT_ADDR_UUID
 0x2A03

330 
	#PERI_CONN_PARAM_UUID
 0x2A04

331 
	#SERVICE_CHANGED_UUID
 0x2A05

332 
	#CENTRAL_ADDRESS_RESOLUTION_UUID
 0x2AA6

333 

	)

337 
	#IMMEDIATE_ALERT_SERV_UUID
 0x1802

338 
	#LINK_LOSS_SERV_UUID
 0x1803

339 
	#TX_PWR_LEVEL_SERV_UUID
 0x1804

340 
	#CURRENT_TIME_SERV_UUID
 0x1805

341 
	#REF_TIME_UPDATE_SERV_UUID
 0x1806

342 
	#NEXT_DST_CHANGE_SERV_UUID
 0x1807

343 
	#GLUCOSE_SERV_UUID
 0x1808

344 
	#THERMOMETER_SERV_UUID
 0x1809

345 
	#DEVINFO_SERV_UUID
 0x180A

346 
	#NWA_SERV_UUID
 0x180B

347 
	#HEARTRATE_SERV_UUID
 0x180D

348 
	#PHONE_ALERT_STS_SERV_UUID
 0x180E

349 
	#BATT_SERV_UUID
 0x180F

350 
	#BLOODPRESSURE_SERV_UUID
 0x1810

351 
	#ALERT_NOTIF_SERV_UUID
 0x1811

352 
	#HID_SERV_UUID
 0x1812

353 
	#SCAN_PARAM_SERV_UUID
 0x1813

354 
	#RSC_SERV_UUID
 0x1814

355 
	#CSC_SERV_UUID
 0x1816

356 
	#CYCPWR_SERV_UUID
 0x1818

357 
	#LOC_NAV_SERV_UUID
 0x1819

358 

	)

362 
	#ALERT_LEVEL_UUID
 0x2A06

363 
	#TX_PWR_LEVEL_UUID
 0x2A07

364 
	#DATE_TIME_UUID
 0x2A08

365 
	#DAY_OF_WEEK_UUID
 0x2A09

366 
	#DAY_DATE_TIME_UUID
 0x2A0A

367 
	#EXACT_TIME_256_UUID
 0x2A0C

368 
	#DST_OFFSET_UUID
 0x2A0D

369 
	#TIME_ZONE_UUID
 0x2A0E

370 
	#LOCAL_TIME_INFO_UUID
 0x2A0F

371 
	#TIME_WITH_DST_UUID
 0x2A11

372 
	#TIME_ACCURACY_UUID
 0x2A12

373 
	#TIME_SOURCE_UUID
 0x2A13

374 
	#REF_TIME_INFO_UUID
 0x2A14

375 
	#TIME_UPDATE_CTRL_PT_UUID
 0x2A16

376 
	#TIME_UPDATE_STATE_UUID
 0x2A17

377 
	#GLUCOSE_MEAS_UUID
 0x2A18

378 
	#BATT_LEVEL_UUID
 0x2A19

379 
	#TEMP_MEAS_UUID
 0x2A1C

380 
	#TEMP_TYPE_UUID
 0x2A1D

381 
	#IMEDIATE_TEMP_UUID
 0x2A1E

382 
	#MEAS_INTERVAL_UUID
 0x2A21

383 
	#BOOT_KEY_INPUT_UUID
 0x2A22

384 
	#SYSTEM_ID_UUID
 0x2A23

385 
	#MODEL_NUMBER_UUID
 0x2A24

386 
	#SERIAL_NUMBER_UUID
 0x2A25

387 
	#FIRMWARE_REV_UUID
 0x2A26

388 
	#HARDWARE_REV_UUID
 0x2A27

389 
	#SOFTWARE_REV_UUID
 0x2A28

390 
	#MANUFACTURER_NAME_UUID
 0x2A29

391 
	#IEEE_11073_CERT_DATA_UUID
 0x2A2A

392 
	#CURRENT_TIME_UUID
 0x2A2B

393 
	#SCAN_REFRESH_UUID
 0x2A31

394 
	#BOOT_KEY_OUTPUT_UUID
 0x2A32

395 
	#BOOT_MOUSE_INPUT_UUID
 0x2A33

396 
	#GLUCOSE_CONTEXT_UUID
 0x2A34

397 
	#BLOODPRESSURE_MEAS_UUID
 0x2A35

398 
	#IMEDIATE_CUFF_PRESSURE_UUID
 0x2A36

399 
	#HEARTRATE_MEAS_UUID
 0x2A37

400 
	#BODY_SENSOR_LOC_UUID
 0x2A38

401 
	#HEARTRATE_CTRL_PT_UUID
 0x2A39

402 
	#NETWORK_AVAIL_UUID
 0x2A3E

403 
	#ALERT_STATUS_UUID
 0x2A3F

404 
	#RINGER_CTRL_PT_UUID
 0x2A40

405 
	#RINGER_SETTING_UUID
 0x2A41

406 
	#ALERT_CAT_ID_BMASK_UUID
 0x2A42

407 
	#ALERT_CAT_ID_UUID
 0x2A43

408 
	#ALERT_NOTIF_CTRL_PT_UUID
 0x2A44

409 
	#UNREAD_ALERT_STATUS_UUID
 0x2A45

410 
	#NEW_ALERT_UUID
 0x2A46

411 
	#SUP_NEW_ALERT_CAT_UUID
 0x2A47

412 
	#SUP_UNREAD_ALERT_CAT_UUID
 0x2A48

413 
	#BLOODPRESSURE_FEATURE_UUID
 0x2A49

414 
	#HID_INFORMATION_UUID
 0x2A4A

415 
	#REPORT_MAP_UUID
 0x2A4B

416 
	#HID_CTRL_PT_UUID
 0x2A4C

417 
	#REPORT_UUID
 0x2A4D

418 
	#PROTOCOL_MODE_UUID
 0x2A4E

419 
	#SCAN_INTERVAL_WINDOW_UUID
 0x2A4F

420 
	#PNP_ID_UUID
 0x2A50

421 
	#GLUCOSE_FEATURE_UUID
 0x2A51

422 
	#RECORD_CTRL_PT_UUID
 0x2A52

423 
	#RSC_MEAS_UUID
 0x2A53

424 
	#RSC_FEATURE_UUID
 0x2A54

425 
	#SC_CTRL_PT_UUID
 0x2A55

426 
	#CSC_MEAS_UUID
 0x2A5B

427 
	#CSC_FEATURE_UUID
 0x2A5C

428 
	#SENSOR_LOC_UUID
 0x2A5D

429 
	#CYCPWR_MEAS_UUID
 0x2A63

430 
	#CYCPWR_VECTOR_UUID
 0x2A64

431 
	#CYCPWR_FEATURE_UUID
 0x2A65

432 
	#CYCPWR_CTRL_PT_UUID
 0x2A66

433 
	#LOC_SPEED_UUID
 0x2A67

434 
	#NAV_UUID
 0x2A68

435 
	#POS_QUALITY_UUID
 0x2A69

436 
	#LN_FEATURE_UUID
 0x2A6A

437 
	#LN_CTRL_PT_UUID
 0x2A6B

438 
	#ELE_UUID
 0x2A6C

439 
	#PRESSURE_UUID
 0x2A6D

440 
	#TEMP_UUID
 0x2A6E

441 
	#HUMI_UUID
 0x2A6F

442 
	#TRUE_WIND_SPEED_UUID
 0x2A70

443 
	#TRUE_WIND_DIRECTION_UUID
 0x2A71

444 
	#URI_UUID
 0x2AB6

445 
	#MEDIA_STATE_UUID
 0x2BA3

446 
	#MEDIA_CTRL_PT_UUID
 0x2BA4

447 
	#MEDIA_CTRL_PT_OS_UUID
 0x2BA5

448 
	#CALL_STATE_UUID
 0x2BBD

449 
	#CALL_CTRL_PT_UUID
 0x2BBE

450 
	#CALL_CTRL_PT_OO_UUID
 0x2BBF

451 
	#TERM_REASON_UUID
 0x2BC0

452 
	#INCOMING_CALL_UUID
 0x2BC1

453 
	#MUTE_UUID
 0x2BC3

454 

	)

458 
	#GATT_UNITLESS_UUID
 0x2700

459 
	#GATT_UNIT_LENGTH_METER_UUID
 0x2701

460 
	#GATT_UNIT_MASS_KGRAM_UUID
 0x2702

461 
	#GATT_UNIT_TIME_SECOND_UUID
 0x2703

462 
	#GATT_UNIT_ELECTRIC_CURRENT_A_UUID
 0x2704

463 
	#GATT_UNIT_THERMODYN_TEMP_K_UUID
 0x2705

464 
	#GATT_UNIT_AMOUNT_SUBSTANCE_M_UUID
 0x2706

465 
	#GATT_UNIT_LUMINOUS_INTENSITY_C_UUID
 0x2707

466 

	)

467 
	#GATT_UNIT_AREA_SQ_MTR_UUID
 0x2710

468 
	#GATT_UNIT_VOLUME_CUBIC_MTR_UUID
 0x2711

469 
	#GATT_UNIT_VELOCITY_MPS_UUID
 0x2712

470 
	#GATT_UNIT_ACCELERATION_MPS_SQ_UUID
 0x2713

471 
	#GATT_UNIT_WAVENUMBER_RM_UUID
 0x2714

472 
	#GATT_UNIT_DENSITY_KGPCM_UUID
 0x2715

473 
	#GATT_UNIT_SURFACE_DENSITY_KGPSM_UUID
 0x2716

474 
	#GATT_UNIT_SPECIFIC_VOLUME_CMPKG_UUID
 0x2717

475 
	#GATT_UNIT_CURRENT_DENSITY_APSM_UUID
 0x2718

476 
	#GATT_UNIT_MAG_FIELD_STRENGTH_UUID
 0x2719

477 
	#GATT_UNIT_AMOUNT_CONC_MPCM_UUID
 0x271A

478 
	#GATT_UNIT_MASS_CONC_KGPCM_UUID
 0x271B

479 
	#GATT_UNIT_LUMINANCE_CPSM_UUID
 0x271C

480 
	#GATT_UNIT_REFRACTIVE_INDEX_UUID
 0x271D

481 
	#GATT_UNIT_RELATIVE_PERMEABLILTY_UUID
 0x271E

482 
	#GATT_UNIT_PLANE_ANGLE_RAD_UUID
 0x2720

483 
	#GATT_UNIT_SOLID_ANGLE_STERAD_UUID
 0x2721

484 
	#GATT_UNIT_FREQUENCY_HTZ_UUID
 0x2722

485 
	#GATT_UNIT_FORCE_NEWTON_UUID
 0x2723

486 
	#GATT_UNIT_PRESSURE_PASCAL_UUID
 0x2724

487 
	#GATT_UNIT_ENERGY_JOULE_UUID
 0x2725

488 
	#GATT_UNIT_POWER_WATT_UUID
 0x2726

489 
	#GATT_UNIT_E_CHARGE_C_UUID
 0x2727

490 
	#GATT_UNIT_E_POTENTIAL_DIF_V_UUID
 0x2728

491 

	)

492 
	#GATT_UNIT_CELSIUS_TEMP_DC_UUID
 0x272F

493 

	)

494 
	#GATT_UNIT_TIME_MINUTE_UUID
 0x2760

495 
	#GATT_UNIT_TIME_HOUR_UUID
 0x2761

496 
	#GATT_UNIT_TIME_DAY_UUID
 0x2762

497 
	#GATT_UNIT_PLANE_ANGLE_DEGREE_UUID
 0x2763

498 
	#GATT_UNIT_PLANE_ANGLE_MINUTE_UUID
 0x2764

499 
	#GATT_UNIT_PLANE_ANGLE_SECOND_UUID
 0x2765

500 
	#GATT_UNIT_AREA_HECTARE_UUID
 0x2766

501 
	#GATT_UNIT_VOLUME_LITRE_UUID
 0x2767

502 
	#GATT_UNIT_MASS_TONNE_UUID
 0x2768

503 

	)

504 
	#GATT_UINT_LENGTH_YARD_UUID
 0x27A0

505 
	#GATT_UNIT_LENGTH_PARSEC_UUID
 0x27A1

506 
	#GATT_UNIT_LENGTH_INCH_UUID
 0x27A2

507 
	#GATT_UNIT_LENGTH_FOOT_UUID
 0x27A3

508 
	#GATT_UNIT_LENGTH_MILE_UUID
 0x27A4

509 
	#GATT_UNIT_PRESSURE_PFPSI_UUID
 0x27A5

510 
	#GATT_UNIT_VELOCITY_KMPH_UUID
 0x27A6

511 
	#GATT_UNIT_VELOCITY_MPH_UUID
 0x27A7

512 
	#GATT_UNIT_ANGULAR_VELOCITY_RPM_UUID
 0x27A8

513 
	#GATT_UNIT_ENERGY_GCAL_UUID
 0x27A9

514 
	#GATT_UNIT_ENERGY_KCAL_UUID
 0x27AA

515 
	#GATT_UNIT_ENERGY_KWH_UUID
 0x27AB

516 
	#GATT_UNIT_THERMODYN_TEMP_DF_UUID
 0x27AC

517 
	#GATT_UNIT_PERCENTAGE_UUID
 0x27AD

518 
	#GATT_UNIT_PER_MILE_UUID
 0x27AE

519 
	#GATT_UNIT_PERIOD_BPM_UUID
 0x27AF

520 
	#GATT_UNIT_E_CHARGE_AH_UUID
 0x27B0

521 
	#GATT_UNIT_MASS_DENSITY_MGPD_UUID
 0x27B1

522 
	#GATT_UNIT_MASS_DENSITY_MMPL_UUID
 0x27B2

523 
	#GATT_UNIT_TIME_YEAR_UUID
 0x27B3

524 
	#GATT_UNIT_TIME_MONTH_UUID
 0x27B4

525 

	)

528 
	#GATT_MSG_EVENT
 0xB0

529 
	#GATT_SERV_MSG_EVENT
 0xB1

531 
	#GAP_MSG_EVENT
 0xD0

532 

	)

533 
	#ATT_MTU_SIZE
 23

534 
	#ATT_MAX_MTU_SIZE
 247

536 
	#ATT_ERROR_RSP
 0x01

537 
	#ATT_EXCHANGE_MTU_REQ
 0x02

538 
	#ATT_EXCHANGE_MTU_RSP
 0x03

539 
	#ATT_FIND_INFO_REQ
 0x04

540 
	#ATT_FIND_INFO_RSP
 0x05

541 
	#ATT_FIND_BY_TYPE_VALUE_REQ
 0x06

542 
	#ATT_FIND_BY_TYPE_VALUE_RSP
 0x07

543 
	#ATT_READ_BY_TYPE_REQ
 0x08

544 
	#ATT_READ_BY_TYPE_RSP
 0x09

545 
	#ATT_READ_REQ
 0x0a

546 
	#ATT_READ_RSP
 0x0b

547 
	#ATT_READ_BLOB_REQ
 0x0c

548 
	#ATT_READ_BLOB_RSP
 0x0d

549 
	#ATT_READ_MULTI_REQ
 0x0e

550 
	#ATT_READ_MULTI_RSP
 0x0f

551 
	#ATT_READ_BY_GRP_TYPE_REQ
 0x10

552 
	#ATT_READ_BY_GRP_TYPE_RSP
 0x11

553 
	#ATT_WRITE_REQ
 0x12

554 
	#ATT_WRITE_RSP
 0x13

555 
	#ATT_PREPARE_WRITE_REQ
 0x16

556 
	#ATT_PREPARE_WRITE_RSP
 0x17

557 
	#ATT_EXECUTE_WRITE_REQ
 0x18

558 
	#ATT_EXECUTE_WRITE_RSP
 0x19

559 
	#ATT_HANDLE_VALUE_NOTI
 0x1b

560 
	#ATT_HANDLE_VALUE_IND
 0x1d

561 
	#ATT_HANDLE_VALUE_CFM
 0x1e

562 

	)

563 
	#ATT_WRITE_CMD
 0x52

564 
	#ATT_SIGNED_WRITE_CMD
 0xD2

565 

	)

567 
	#ATT_ERR_INVALID_HANDLE
 0x01

568 
	#ATT_ERR_READ_NOT_PERMITTED
 0x02

569 
	#ATT_ERR_WRITE_NOT_PERMITTED
 0x03

570 
	#ATT_ERR_INVALID_PDU
 0x04

571 
	#ATT_ERR_INSUFFICIENT_AUTHEN
 0x05

572 
	#ATT_ERR_UNSUPPORTED_REQ
 0x06

573 
	#ATT_ERR_INVALID_OFFSET
 0x07

574 
	#ATT_ERR_INSUFFICIENT_AUTHOR
 0x08

575 
	#ATT_ERR_PREPARE_QUEUE_FULL
 0x09

576 
	#ATT_ERR_ATTR_NOT_FOUND
 0x0a

577 
	#ATT_ERR_ATTR_NOT_LONG
 0x0b

578 
	#ATT_ERR_INSUFFICIENT_KEY_SIZE
 0x0c

579 
	#ATT_ERR_INVALID_VALUE_SIZE
 0x0d

580 
	#ATT_ERR_UNLIKELY
 0x0e

581 
	#ATT_ERR_INSUFFICIENT_ENCRYPT
 0x0f

582 
	#ATT_ERR_UNSUPPORTED_GRP_TYPE
 0x10

583 
	#ATT_ERR_INSUFFICIENT_RESOURCES
 0x11

584 
	#ATT_ERR_INVALID_VALUE
 0x80

585 

	)

590 
	#ATT_ATTR_HANDLE_IDX
–
i
 ) ( (iË* (2 + 2Ë)

	)

591 
	#ATT_GRP_END_HANDLE_IDX
–
i
 ) ( 
	`ATT_ATTR_HANDLE_IDX
–(iËË+ 2 )

	)

593 
	#ATT_ATTR_HANDLE
–
öfo
, 
i
 ) ( 
	`BUILD_UINT16
–(öfo)[
	`ATT_ATTR_HANDLE_IDX
((i))], \

594 (
öfo
)[
	`ATT_ATTR_HANDLE_IDX
((
i
))+1] ) )

	)

595 
	#ATT_GRP_END_HANDLE
–
öfo
, 
i
 ) ( 
	`BUILD_UINT16
–(öfo)[
	`ATT_GRP_END_HANDLE_IDX
((i))], \

596 (
öfo
)[
	`ATT_GRP_END_HANDLE_IDX
((
i
))+1] ) )

	)

600 
	#ATT_FLOW_CTRL_VIOLATED_EVENT
 0x7E

601 
	#ATT_MTU_UPDATED_EVENT
 0x7F

602 

	)

606 
	#ATT_BT_UUID_SIZE
 2

	)

608 
	#ATT_UUID_SIZE
 16

	)

612 
	#GATT_PERMIT_READ
 0x01

613 
	#GATT_PERMIT_WRITE
 0x02

614 
	#GATT_PERMIT_AUTHEN_READ
 0x04

615 
	#GATT_PERMIT_AUTHEN_WRITE
 0x08

616 
	#GATT_PERMIT_AUTHOR_READ
 0x10

617 
	#GATT_PERMIT_AUTHOR_WRITE
 0x20

618 
	#GATT_PERMIT_ENCRYPT_READ
 0x40

619 
	#GATT_PERMIT_ENCRYPT_WRITE
 0x80

620 

	)

622 
	#GATT_PROP_BCAST
 0x01

623 
	#GATT_PROP_READ
 0x02

624 
	#GATT_PROP_WRITE_NO_RSP
 0x04

625 
	#GATT_PROP_WRITE
 0x08

626 
	#GATT_PROP_NOTIFY
 0x10

627 
	#GATT_PROP_INDICATE
 0x20

628 
	#GATT_PROP_AUTHEN
 0x40

629 
	#GATT_PROP_EXTENDED
 0x80

630 

	)

632 
	#GATT_LOCAL_READ
 0xFF

	)

633 
	#GATT_LOCAL_WRITE
 0xFE

	)

636 
	#GATT_MIN_ENCRYPT_KEY_SIZE
 7

637 
	#GATT_MAX_ENCRYPT_KEY_SIZE
 16

638 

	)

640 
	#GATT_INVALID_HANDLE
 0x0000

641 
	#GATT_MIN_HANDLE
 0x0001

642 
	#GATT_MAX_HANDLE
 0xFFFF

643 

	)

644 
	#GATT_MAX_MTU
 0xFFFF

645 

	)

647 
	#g©tPîmôRód
–
a
 ) ( (aË& 
GATT_PERMIT_READ
 )

	)

648 
	#g©tPîmôWrôe
–
a
 ) ( (aË& 
GATT_PERMIT_WRITE
 )

	)

649 
	#g©tPîmôAuthíRód
–
a
 ) ( (aË& 
GATT_PERMIT_AUTHEN_READ
 )

	)

650 
	#g©tPîmôAuthíWrôe
–
a
 ) ( (aË& 
GATT_PERMIT_AUTHEN_WRITE
 )

	)

651 
	#g©tPîmôAuth‹Ród
–
a
 ) ( (aË& 
GATT_PERMIT_AUTHOR_READ
 )

	)

652 
	#g©tPîmôAuth‹Wrôe
–
a
 ) ( (aË& 
GATT_PERMIT_AUTHOR_WRITE
 )

	)

653 
	#g©tPîmôEn¸y±Ród
–
a
 ) ( (aË& 
GATT_PERMIT_ENCRYPT_READ
 )

	)

654 
	#g©tPîmôEn¸y±Wrôe
–
a
 ) ( (aË& 
GATT_PERMIT_ENCRYPT_WRITE
 )

	)

657 
	#g©tPrim¨ySîvi˚Ty≥
–
t
 ) ( 
	`ATT_Com∑ªUUID
–
¥im¨ySîvi˚UUID
, 
ATT_BT_UUID_SIZE
, (t).
uuid
, (t).
Àn
 ) )

	)

658 
	#g©tSec⁄d¨ySîvi˚Ty≥
–
t
 ) ( 
	`ATT_Com∑ªUUID
–
£c⁄d¨ySîvi˚UUID
, 
ATT_BT_UUID_SIZE
, (t).
uuid
, (t).
Àn
 ) )

	)

659 
	#g©tCh¨a˘îTy≥
–
t
 ) ( 
	`ATT_Com∑ªUUID
–
ch¨a˘îUUID
, 
ATT_BT_UUID_SIZE
, (t).
uuid
, (t).
Àn
 ) )

	)

660 
	#g©tIn˛udeTy≥
–
t
 ) ( 
	`ATT_Com∑ªUUID
–
ö˛udeUUID
, 
ATT_BT_UUID_SIZE
, (t).
uuid
, (t).
Àn
 ) )

	)

661 
	#g©tSîvi˚Ty≥
–
t
 ) ( 
	`g©tPrim¨ySîvi˚Ty≥
–—ËË|| 
	`g©tSec⁄d¨ySîvi˚Ty≥
–—ËË)

	)

662 
	#GATT_MAX_NUM_CONN
 (4)

	)

665 
	#GATT_CLIENT_CFG_NOTIFY
 0x0001

666 
	#GATT_CLIENT_CFG_INDICATE
 0x0002

667 

	)

668 
	#GATT_CFG_NO_OPERATION
 0x0000

669 

	)

671 
	#GATT_ALL_SERVICES
 0xFFFFFFFF

	)

674 
	#GATT_NUM_ATTRS
–
©ås
 ) ( –©å†Ë/ –
g©tAâribuã_t
 ) )

	)

677 
	#GATT_SERVICE_HANDLE
–
©ås
 ) ( (©ås)[0].
h™dÀ
 )

	)

680 
	#GATT_INCLUDED_HANDLE
–
©ås
, 
i
 ) ( *((
uöt16_t
 *)(◊ârs)[(i)].
pVÆue
)Ë)

	)

683 
	#GATT_CCC_TBL
–
pVÆue
 ) ( (
g©tCh¨Cfg_t
 *)(*((
PTR_TYPE
)(&pVÆue))))

	)

686 
	#GAP_MSG_EVENT_DEFINES


687 
	#GAP_DEVICE_INIT_DONE_EVENT
 0x00

688 
	#GAP_DEVICE_DISCOVERY_EVENT
 0x01

689 
	#GAP_ADV_DATA_UPDATE_DONE_EVENT
 0x02

690 
	#GAP_MAKE_DISCOVERABLE_DONE_EVENT
 0x03

691 
	#GAP_END_DISCOVERABLE_DONE_EVENT
 0x04

692 
	#GAP_LINK_ESTABLISHED_EVENT
 0x05

693 
	#GAP_LINK_TERMINATED_EVENT
 0x06

694 
	#GAP_LINK_PARAM_UPDATE_EVENT
 0x07

695 
	#GAP_RANDOM_ADDR_CHANGED_EVENT
 0x08

696 
	#GAP_SIGNATURE_UPDATED_EVENT
 0x09

697 
	#GAP_AUTHENTICATION_COMPLETE_EVENT
 0x0A

698 
	#GAP_PASSKEY_NEEDED_EVENT
 0x0B

699 
	#GAP_SLAVE_REQUESTED_SECURITY_EVENT
 0x0C

700 
	#GAP_DEVICE_INFO_EVENT
 0x0D

701 
	#GAP_BOND_COMPLETE_EVENT
 0x0E

702 
	#GAP_PAIRING_REQ_EVENT
 0x0F

703 
	#GAP_DIRECT_DEVICE_INFO_EVENT
 0x10

704 

	)

706 
	#GAP_PROFILE_BROADCASTER
 0x01

707 
	#GAP_PROFILE_OBSERVER
 0x02

708 
	#GAP_PROFILE_PERIPHERAL
 0x04

709 
	#GAP_PROFILE_CENTRAL
 0x08

710 

	)

712 
	#bÀGAPU£rC™˚Àd
 0x30

713 
	#bÀGAPC⁄nNŸAc˚±abÀ
 0x31

714 
	#bÀGAPB⁄dReje˘ed
 0x32

715 

	)

716 
	#GAP_DEVICE_NAME_LEN
 21

717 

	)

725 
	#GAP_CONNHANDLE_INIT
 0xFFFE

726 
	#GAP_CONNHANDLE_ALL
 0xFFFF

727 

	)

730 
	#GAP_PRIVACY_DISABLED
 0x00

	)

731 
	#GAP_PRIVACY_ENABLED
 0x01

	)

734 
	#GGS_DEVICE_NAME_ATT
 0

735 
	#GGS_APPEARANCE_ATT
 1

736 
	#GGS_PERI_PRIVACY_FLAG_ATT
 2

737 
	#GGS_RECONNCT_ADDR_ATT
 3

738 
	#GGS_PERI_CONN_PARAM_ATT
 4

739 
	#GGS_PERI_PRIVACY_FLAG_PROPS
 5

740 
	#GGS_W_PERMIT_DEVICE_NAME_ATT
 6

741 
	#GGS_W_PERMIT_APPEARANCE_ATT
 7

742 
	#GGS_W_PERMIT_PRIVACY_FLAG_ATT
 8

743 
	#GGS_CENT_ADDR_RES_ATT
 9

745 
	#GAP_SERVICE
 0x00000001

	)

749 
	#TGAP_GEN_DISC_ADV_MIN
 0

750 
	#TGAP_LIM_ADV_TIMEOUT
 1

751 
	#TGAP_DISC_SCAN
 2

752 

	)

754 
	#TGAP_DISC_ADV_INT_MIN
 3

755 
	#TGAP_DISC_ADV_INT_MAX
 4

756 
	#TGAP_DISC_SCAN_INT
 5

757 
	#TGAP_DISC_SCAN_WIND
 6

758 

	)

760 
	#TGAP_CONN_EST_INT_MIN
 7

761 
	#TGAP_CONN_EST_INT_MAX
 8

762 
	#TGAP_CONN_EST_SCAN_INT
 9

763 
	#TGAP_CONN_EST_SCAN_WIND
 10

764 
	#TGAP_CONN_EST_HIGH_SCAN_INT
 11

765 
	#TGAP_CONN_EST_HIGH_SCAN_WIND
 12

766 
	#TGAP_CONN_EST_SUPERV_TIMEOUT
 13

767 
	#TGAP_CONN_EST_LATENCY
 14

768 
	#TGAP_CONN_EST_MIN_CE_LEN
 15

769 
	#TGAP_CONN_EST_MAX_CE_LEN
 16

770 

	)

772 
	#TGAP_PRIVATE_ADDR_INT
 17

773 
	#TGAP_SM_TIMEOUT
 18

774 
	#TGAP_SM_MIN_KEY_LEN
 19

775 
	#TGAP_SM_MAX_KEY_LEN
 20

776 
	#TGAP_FILTER_ADV_REPORTS
 21

777 
	#TGAP_SCAN_RSSI_MIN
 22

778 
	#TGAP_REJECT_CONN_PARAMS
 23

779 
	#TGAP_AUTH_TASK_ID
 24

780 
	#TGAP_PARAMID_MAX
 25

781 

	)

783 
	#DEVDISC_MODE_NONDISCOVERABLE
 0x00

784 
	#DEVDISC_MODE_GENERAL
 0x01

785 
	#DEVDISC_MODE_LIMITED
 0x02

786 
	#DEVDISC_MODE_ALL
 0x03

787 

	)

789 
	#ADDRTYPE_PUBLIC
 0x00

790 
	#ADDRTYPE_STATIC
 0x01

791 
	#ADDRTYPE_PRIVATE_NONRESOLVE
 0x02

792 
	#ADDRTYPE_PRIVATE_RESOLVE
 0x03

793 

	)

795 
	#GAP_ADTYPE_ADV_IND
 0x00

796 
	#GAP_ADTYPE_ADV_HDC_DIRECT_IND
 0x01

797 
	#GAP_ADTYPE_ADV_SCAN_IND
 0x02

798 
	#GAP_ADTYPE_ADV_NONCONN_IND
 0x03

799 
	#GAP_ADTYPE_ADV_LDC_DIRECT_IND
 0x04

800 

	)

802 
	#GAP_ADVERTISEMENT_REPORT_TYPE_DEFINES


	)

803 
	#GAP_ADRPT_ADV_IND
 0x00

804 
	#GAP_ADRPT_ADV_DIRECT_IND
 0x01

805 
	#GAP_ADRPT_ADV_SCAN_IND
 0x02

806 
	#GAP_ADRPT_ADV_NONCONN_IND
 0x03

807 
	#GAP_ADRPT_SCAN_RSP
 0x04

808 

	)

810 
	#GAP_FILTER_POLICY_ALL
 0x00

811 
	#GAP_FILTER_POLICY_WHITE_SCAN
 0x01

812 
	#GAP_FILTER_POLICY_WHITE_CON
 0x02

813 
	#GAP_FILTER_POLICY_WHITE
 0x03

814 

	)

816 
	#GAP_PASSCODE_MAX
 999999

	)

821 
	#GAP_INIT_SIGN_COUNTER
 0xFFFFFFFF

	)

824 
	#GAP_ADVCHAN_37
 0x01

825 
	#GAP_ADVCHAN_38
 0x02

826 
	#GAP_ADVCHAN_39
 0x04

827 
	#GAP_ADVCHAN_ALL
 (
GAP_ADVCHAN_37
 | 
GAP_ADVCHAN_38
 | 
GAP_ADVCHAN_39
)

828 

	)

830 
	#GAP_ADTYPE_FLAGS
 0x01

831 
	#GAP_ADTYPE_16BIT_MORE
 0x02

832 
	#GAP_ADTYPE_16BIT_COMPLETE
 0x03

833 
	#GAP_ADTYPE_32BIT_MORE
 0x04

834 
	#GAP_ADTYPE_32BIT_COMPLETE
 0x05

835 
	#GAP_ADTYPE_128BIT_MORE
 0x06

836 
	#GAP_ADTYPE_128BIT_COMPLETE
 0x07

837 
	#GAP_ADTYPE_LOCAL_NAME_SHORT
 0x08

838 
	#GAP_ADTYPE_LOCAL_NAME_COMPLETE
 0x09

839 
	#GAP_ADTYPE_POWER_LEVEL
 0x0A

840 
	#GAP_ADTYPE_OOB_CLASS_OF_DEVICE
 0x0D

841 
	#GAP_ADTYPE_OOB_SIMPLE_PAIRING_HASHC
 0x0E

842 
	#GAP_ADTYPE_OOB_SIMPLE_PAIRING_RANDR
 0x0F

843 
	#GAP_ADTYPE_SM_TK
 0x10

844 
	#GAP_ADTYPE_SM_OOB_FLAG
 0x11

845 
	#GAP_ADTYPE_SLAVE_CONN_INTERVAL_RANGE
 0x12

846 
	#GAP_ADTYPE_SIGNED_DATA
 0x13

847 
	#GAP_ADTYPE_SERVICES_LIST_16BIT
 0x14

848 
	#GAP_ADTYPE_SERVICES_LIST_128BIT
 0x15

849 
	#GAP_ADTYPE_SERVICE_DATA
 0x16

850 
	#GAP_ADTYPE_PUBLIC_TARGET_ADDR
 0x17

851 
	#GAP_ADTYPE_RANDOM_TARGET_ADDR
 0x18

852 
	#GAP_ADTYPE_APPEARANCE
 0x19

853 
	#GAP_ADTYPE_ADV_INTERVAL
 0x1A

854 
	#GAP_ADTYPE_LE_BD_ADDR
 0x1B

855 
	#GAP_ADTYPE_LE_ROLE
 0x1C

856 
	#GAP_ADTYPE_SIMPLE_PAIRING_HASHC_256
 0x1D

857 
	#GAP_ADTYPE_SIMPLE_PAIRING_RANDR_256
 0x1E

858 
	#GAP_ADTYPE_SERVICE_DATA_32BIT
 0x20

859 
	#GAP_ADTYPE_SERVICE_DATA_128BIT
 0x21

860 
	#GAP_ADTYPE_3D_INFO_DATA
 0x3D

861 
	#GAP_ADTYPE_MANUFACTURER_SPECIFIC
 0xFF

862 

	)

864 
	#GAP_ADTYPE_FLAGS_LIMITED
 0x01

865 
	#GAP_ADTYPE_FLAGS_GENERAL
 0x02

866 
	#GAP_ADTYPE_FLAGS_BREDR_NOT_SUPPORTED
 0x04

867 

	)

869 
	#GAP_APPEARE_UNKNOWN
 0x0000

870 
	#GAP_APPEARE_GENERIC_PHONE
 0x0040

871 
	#GAP_APPEARE_GENERIC_COMPUTER
 0x0080

872 
	#GAP_APPEARE_GENERIC_WATCH
 0x00C0

873 
	#GAP_APPEARE_WATCH_SPORTS
 0x00C1

874 
	#GAP_APPEARE_GENERIC_CLOCK
 0x0100

875 
	#GAP_APPEARE_GENERIC_DISPLAY
 0x0140

876 
	#GAP_APPEARE_GENERIC_RC
 0x0180

877 
	#GAP_APPEARE_GENERIC_EYE_GALSSES
 0x01C0

878 
	#GAP_APPEARE_GENERIC_TAG
 0x0200

879 
	#GAP_APPEARE_GENERIC_KEYRING
 0x0240

880 
	#GAP_APPEARE_GENERIC_MEDIA_PLAYER
 0x0280

881 
	#GAP_APPEARE_GENERIC_BARCODE_SCANNER
 0x02C0

882 
	#GAP_APPEARE_GENERIC_THERMOMETER
 0x0300

883 
	#GAP_APPEARE_GENERIC_THERMO_EAR
 0x0301

884 
	#GAP_APPEARE_GENERIC_HR_SENSOR
 0x0340

885 
	#GAP_APPEARE_GENERIC_HRS_BELT
 0x0341

886 
	#GAP_APPEARE_GENERIC_BLOOD_PRESSURE
 0x0380

887 
	#GAP_APPEARE_GENERIC_BP_ARM
 0x0381

888 
	#GAP_APPEARE_GENERIC_BP_WRIST
 0x0382

889 
	#GAP_APPEARE_GENERIC_HID
 0x03C0

890 
	#GAP_APPEARE_HID_KEYBOARD
 0x03C1

891 
	#GAP_APPEARE_HID_MOUSE
 0x03C2

892 
	#GAP_APPEARE_HID_JOYSTIC
 0x03C3

893 
	#GAP_APPEARE_HID_GAMEPAD
 0x03C4

894 
	#GAP_APPEARE_HID_DIGITIZER_TYABLET
 0x03C5

895 
	#GAP_APPEARE_HID_DIGITAL_CARDREADER
 0x03C6

896 
	#GAP_APPEARE_HID_DIGITAL_PEN
 0x03C7

897 
	#GAP_APPEARE_HID_BARCODE_SCANNER
 0x03C8

898 

	)

901 
	#GAPROLE_PROFILEROLE
 0x300

902 
	#GAPROLE_IRK
 0x301

903 
	#GAPROLE_SRK
 0x302

904 
	#GAPROLE_SIGNCOUNTER
 0x303

905 
	#GAPROLE_BD_ADDR
 0x304

906 
	#GAPROLE_ADVERT_ENABLED
 0x305

907 
	#GAPROLE_ADVERT_DATA
 0x306

908 
	#GAPROLE_SCAN_RSP_DATA
 0x307

909 
	#GAPROLE_ADV_EVENT_TYPE
 0x308

910 
	#GAPROLE_ADV_DIRECT_TYPE
 0x309

911 
	#GAPROLE_ADV_DIRECT_ADDR
 0x30A

912 
	#GAPROLE_ADV_CHANNEL_MAP
 0x30B

913 
	#GAPROLE_ADV_FILTER_POLICY
 0x30C

914 
	#GAPROLE_STATE
 0x30D

915 
	#GAPROLE_MAX_SCAN_RES
 0x30E

916 
	#GAPROLE_MIN_CONN_INTERVAL
 0x311

917 
	#GAPROLE_MAX_CONN_INTERVAL
 0x312

918 

	)

921 
	#GAPBOND_PERI_PAIRING_MODE
 0x400

922 
	#GAPBOND_PERI_MITM_PROTECTION
 0x401

923 
	#GAPBOND_PERI_IO_CAPABILITIES
 0x402

924 
	#GAPBOND_PERI_OOB_ENABLED
 0x403

925 
	#GAPBOND_PERI_OOB_DATA
 0x404

926 
	#GAPBOND_PERI_BONDING_ENABLED
 0x405

927 
	#GAPBOND_PERI_KEY_DIST_LIST
 0x406

928 
	#GAPBOND_PERI_DEFAULT_PASSCODE
 0x407

929 
	#GAPBOND_CENT_PAIRING_MODE
 0x408

930 
	#GAPBOND_CENT_MITM_PROTECTION
 0x409

931 
	#GAPBOND_CENT_IO_CAPABILITIES
 0x40A

932 
	#GAPBOND_CENT_OOB_ENABLED
 0x40B

933 
	#GAPBOND_CENT_OOB_DATA
 0x40C

934 
	#GAPBOND_CENT_BONDING_ENABLED
 0x40D

935 
	#GAPBOND_CENT_KEY_DIST_LIST
 0x40E

936 
	#GAPBOND_CENT_DEFAULT_PASSCODE
 0x40F

937 
	#GAPBOND_ERASE_ALLBONDS
 0x410

938 
	#GAPBOND_AUTO_FAIL_PAIRING
 0x411

939 
	#GAPBOND_AUTO_FAIL_REASON
 0x412

940 
	#GAPBOND_KEYSIZE
 0x413

941 
	#GAPBOND_AUTO_SYNC_WL
 0x414

942 
	#GAPBOND_BOND_COUNT
 0x415

943 
	#GAPBOND_BOND_FAIL_ACTION
 0x416

944 
	#GAPBOND_ERASE_SINGLEBOND
 0x417

945 
	#GAPBOND_BOND_AUTO
 0x418

946 
	#GAPBOND_BOND_UPDATE
 0x419

947 
	#GAPBOND_DISABLE_SINGLEBOND
 0x41A

948 
	#GAPBOND_ENABLE_SINGLEBOND
 0x41B

949 
	#GAPBOND_DISABLE_ALLBONDS
 0x41C

950 
	#GAPBOND_ENABLE_ALLBONDS
 0x41D

951 
	#GAPBOND_ERASE_AUTO
 0x41E

952 
	#GAPBOND_AUTO_SYNC_RL
 0x41F

953 
	#GAPBOND_SET_ENC_PARAMS
 0x420

954 

	)

956 
	#GAPBOND_PAIRING_MODE_NO_PAIRING
 0x00

957 
	#GAPBOND_PAIRING_MODE_WAIT_FOR_REQ
 0x01

958 
	#GAPBOND_PAIRING_MODE_INITIATE
 0x02

959 

	)

961 
	#GAPBOND_IO_CAP_DISPLAY_ONLY
 0x00

962 
	#GAPBOND_IO_CAP_DISPLAY_YES_NO
 0x01

963 
	#GAPBOND_IO_CAP_KEYBOARD_ONLY
 0x02

964 
	#GAPBOND_IO_CAP_NO_INPUT_NO_OUTPUT
 0x03

965 
	#GAPBOND_IO_CAP_KEYBOARD_DISPLAY
 0x04

966 

	)

968 
	#GAPBOND_KEYDIST_SENCKEY
 0x01

969 
	#GAPBOND_KEYDIST_SIDKEY
 0x02

970 
	#GAPBOND_KEYDIST_SSIGN
 0x04

971 
	#GAPBOND_KEYDIST_SLINK
 0x08

972 
	#GAPBOND_KEYDIST_MENCKEY
 0x10

973 
	#GAPBOND_KEYDIST_MIDKEY
 0x20

974 
	#GAPBOND_KEYDIST_MSIGN
 0x40

975 
	#GAPBOND_KEYDIST_MLINK
 0x80

976 

	)

978 
	#GAPBOND_PAIRING_STATE_STARTED
 0x00

979 
	#GAPBOND_PAIRING_STATE_COMPLETE
 0x01

980 
	#GAPBOND_PAIRING_STATE_BONDED
 0x02

981 
	#GAPBOND_PAIRING_STATE_BOND_SAVED
 0x03

982 

	)

984 
	#SMP_PAIRING_FAILED_PASSKEY_ENTRY_FAILED
 0x01

985 
	#SMP_PAIRING_FAILED_OOB_NOT_AVAIL
 0x02

986 
	#SMP_PAIRING_FAILED_AUTH_REQ
 0x03

987 
	#SMP_PAIRING_FAILED_CONFIRM_VALUE
 0x04

988 
	#SMP_PAIRING_FAILED_NOT_SUPPORTED
 0x05

989 
	#SMP_PAIRING_FAILED_ENC_KEY_SIZE
 0x06

990 
	#SMP_PAIRING_FAILED_CMD_NOT_SUPPORTED
 0x07

991 
	#SMP_PAIRING_FAILED_UNSPECIFIED
 0x08

992 
	#SMP_PAIRING_FAILED_REPEATED_ATTEMPTS
 0x09

993 

	)

995 
	#GAPBOND_FAIL_NO_ACTION
 0x00

996 
	#GAPBOND_FAIL_INITIATE_PAIRING
 0x01

997 
	#GAPBOND_FAIL_TERMINATE_LINK
 0x02

998 
	#GAPBOND_FAIL_TERMINATE_ERASE_BONDS
 0x03

999 

	)

1001 
	#BLE_NVID_IRK
 0x02

1002 
	#BLE_NVID_CSRK
 0x03

1003 
	#BLE_NVID_SIGNCOUNTER
 0x04

1004 

	)

1006 
	#BLE_NVID_BOND_RF_START
 0x10

1007 

	)

1009 
	#BLE_NVID_GAP_BOND_START
 0x20

1010 

	)

1012 
	#GAP_BOND_REC_ID_OFFSET
 0

1013 
	#GAP_BOND_LOCAL_LTK_OFFSET
 1

1014 
	#GAP_BOND_DEV_LTK_OFFSET
 2

1015 
	#GAP_BOND_DEV_IRK_OFFSET
 3

1016 
	#GAP_BOND_DEV_CSRK_OFFSET
 4

1017 
	#GAP_BOND_DEV_SIGN_COUNTER_OFFSET
 5

1018 
	#GAP_BOND_REC_IDS
 6

	)

1021 
	#ˇlcNvID
(
Idx
, 
off£t
Ë(((((IdxË* 
GAP_BOND_REC_IDS
Ë+ (off£t))Ë+ 
BLE_NVID_GAP_BOND_START
)

	)

1022 
	#maöRec‹dNvID
(
b⁄dIdx
Ë(
	`ˇlcNvID
((b⁄dIdx), 
GAP_BOND_REC_ID_OFFSET
))

	)

1023 
	#loˇlLTKNvID
(
b⁄dIdx
Ë(
	`ˇlcNvID
((b⁄dIdx), 
GAP_BOND_LOCAL_LTK_OFFSET
))

	)

1024 
	#devLTKNvID
(
b⁄dIdx
Ë(
	`ˇlcNvID
((b⁄dIdx), 
GAP_BOND_DEV_LTK_OFFSET
))

	)

1025 
	#devIRKNvID
(
b⁄dIdx
Ë(
	`ˇlcNvID
((b⁄dIdx), 
GAP_BOND_DEV_IRK_OFFSET
))

	)

1026 
	#devCSRKNvID
(
b⁄dIdx
Ë(
	`ˇlcNvID
((b⁄dIdx), 
GAP_BOND_DEV_CSRK_OFFSET
))

	)

1027 
	#devSignCou¡îNvID
(
b⁄dIdx
Ë(
	`ˇlcNvID
((b⁄dIdx), 
GAP_BOND_DEV_SIGN_COUNTER_OFFSET
))

	)

1030 
	#BLE_NVID_GATT_CFG_START
 0x70

1031 

	)

1033 
	#g©tCfgNvID
(
Idx
Ë((IdxË+ 
BLE_NVID_GATT_CFG_START
)

	)

1035 
	#BLE_NVID_MAX_VAL
 0x7F

	)

1040 
uöt8_t
 
	gLTK
[
KEYLEN
];

1041 
uöt16_t
 
	gdiv
;

1042 
uöt8_t
 
	gønd
[
B_RANDOM_NUM_SIZE
];

1043 
uöt8_t
 
	gkeySize
;

1044 } 
	tg≠B⁄dLTK_t
;

1049 
uöt8_t
 
	gpublicAddr
[
B_ADDR_LEN
];

1050 
uöt8_t
 
	gªc⁄√˘Addr
[
B_ADDR_LEN
];

1051 
uöt16_t
 
	g°©eFœgs
;

1052 
uöt8_t
 
	gb⁄dsToDñëe
;

1053 } 
	tg≠B⁄dRec_t
;

1058 
uöt16_t
 
	g©åH™dÀ
;

1059 
uöt8_t
 
	gvÆue
;

1060 } 
	tg≠B⁄dCh¨Cfg_t
;

1067 
uöt8_t
 
	g§k
[
KEYLEN
];

1068 
uöt32_t
 
	gsignCou¡î
;

1069 } 
	tlökSec_t
;

1073 
uöt8_t
 
	g…k
[
KEYLEN
];

1074 
uöt16_t
 
	gdiv
;

1075 
uöt8_t
 
	gønd
[
B_RANDOM_NUM_SIZE
];

1076 
uöt8_t
 
	gkeySize
;

1077 
uöt8_t
 
	gg≠B⁄dInvÆid
;

1078 } 
	tícP¨ams_t
;

1082 
uöt8_t
 
	gc⁄nRﬁe
;

1083 
uöt8_t
 
	gaddrTy≥
;

1084 
uöt8_t
 
	gaddr
[
B_ADDR_LEN
];

1085 
ícP¨ams_t
 
	gícP¨ams
;

1086 } 
	tb⁄dEncP¨ams_t
;

1090 
uöt8_t
 
	gèskID
;

1091 
uöt16_t
 
	gc⁄√˘i⁄H™dÀ
;

1092 
uöt8_t
 
	g°©eFœgs
;

1093 
uöt8_t
 
	gaddrTy≥
;

1094 
uöt8_t
 
	gaddr
[
B_ADDR_LEN
];

1095 
uöt8_t
 
	gc⁄nRﬁe
;

1096 
uöt16_t
 
	gc⁄nI¡îvÆ
;

1097 
uöt16_t
 
	gc⁄nL©ícy
;

1098 
uöt16_t
 
	gc⁄nTimeout
;

1099 
uöt16_t
 
	gMTU
;

1100 
lökSec_t
 
	g£c
;

1101 
ícP¨ams_t
 *
	gpEncP¨ams
;

1102 
uöt16_t
 
	gsmEvtID
;

1103 *
	gpPaúögP¨ams
;

1104 *
	gpAuthLök
;

1105 } 
	tlökDBIãm_t
;

1108 (*
	gp‚LökDBCB_t
)–
	tuöt16_t
 
	tc⁄√˘i⁄H™dÀ
, 
	tuöt8_t
 
	tch™geTy≥
 );

1110 (*
	gp‚Pîf‹mFuncCB_t
)–
	tlökDBIãm_t
 *
	tpLökIãm
 );

1117 
uöt8_t
 
	gÀn
;

1118 
uöt8_t
 
	guuid
[
ATT_UUID_SIZE
];

1119 } 
	t©tAârTy≥_t
;

1126 
uöt8_t
 
	gÀn
;

1127 
uöt8_t
 
	guuid
[
ATT_BT_UUID_SIZE
];

1128 } 
	t©tAârBtTy≥_t
;

1135 
uöt8_t
 
	gªqOpcode
;

1136 
uöt16_t
 
	gh™dÀ
;

1137 
uöt8_t
 
	gîrCode
;

1138 } 
	t©tEº‹R•_t
;

1145 
uöt16_t
 
	g˛õ¡RxMTU
;

1146 } 
	t©tExch™geMTUReq_t
;

1153 
uöt16_t
 
	g£rvîRxMTU
;

1154 } 
	t©tExch™geMTUR•_t
;

1161 
uöt16_t
 
	g°¨tH™dÀ
;

1162 
uöt16_t
 
	gídH™dÀ
;

1163 } 
	t©tFödInfoReq_t
;

1170 
uöt16_t
 
	gnumInfo
;

1171 
uöt8_t
 
	gf‹m©
;

1172 
uöt8_t
 *
	gpInfo
;

1173 } 
	t©tFödInfoR•_t
;

1180 
uöt16_t
 
	g°¨tH™dÀ
;

1181 
uöt16_t
 
	gídH™dÀ
;

1182 
©tAârBtTy≥_t
 
	gty≥
;

1183 
uöt16_t
 
	gÀn
;

1184 
uöt8_t
 *
	gpVÆue
;

1185 } 
	t©tFödByTy≥VÆueReq_t
;

1192 
uöt16_t
 
	gnumInfo
;

1193 
uöt8_t
 *
	gpH™dÀsInfo
;

1194 } 
	t©tFödByTy≥VÆueR•_t
;

1201 
uöt16_t
 
	g°¨tH™dÀ
;

1202 
uöt16_t
 
	gídH™dÀ
;

1203 
©tAârTy≥_t
 
	gty≥
;

1204 } 
	t©tRódByTy≥Req_t
;

1211 
uöt16_t
 
	gnumPaús
;

1212 
uöt16_t
 
	gÀn
;

1213 
uöt8_t
 *
	gpD©aLi°
;

1214 } 
	t©tRódByTy≥R•_t
;

1221 
uöt16_t
 
	gh™dÀ
;

1222 } 
	t©tRódReq_t
;

1229 
uöt16_t
 
	gÀn
;

1230 
uöt8_t
 *
	gpVÆue
;

1231 } 
	t©tRódR•_t
;

1238 
uöt16_t
 
	gh™dÀ
;

1239 
uöt16_t
 
	goff£t
;

1240 } 
	t©tRódBlobReq_t
;

1247 
uöt16_t
 
	gÀn
;

1248 
uöt8_t
 *
	gpVÆue
;

1249 } 
	t©tRódBlobR•_t
;

1256 
uöt8_t
 *
	gpH™dÀs
;

1257 
uöt16_t
 
	gnumH™dÀs
;

1258 } 
	t©tRódMu…iReq_t
;

1265 
uöt16_t
 
	gÀn
;

1266 
uöt8_t
 *
	gpVÆues
;

1267 } 
	t©tRódMu…iR•_t
;

1274 
uöt16_t
 
	g°¨tH™dÀ
;

1275 
uöt16_t
 
	gídH™dÀ
;

1276 
©tAârTy≥_t
 
	gty≥
;

1277 } 
	t©tRódByGΩTy≥Req_t
;

1284 
uöt16_t
 
	gnumGΩs
;

1285 
uöt16_t
 
	gÀn
;

1286 
uöt8_t
 *
	gpD©aLi°
;

1287 } 
	t©tRódByGΩTy≥R•_t
;

1294 
uöt16_t
 
	gh™dÀ
;

1295 
uöt16_t
 
	gÀn
;

1296 
uöt8_t
 *
	gpVÆue
;

1297 
uöt8_t
 
	gsig
;

1298 
uöt8_t
 
	gcmd
;

1299 } 
	t©tWrôeReq_t
;

1306 
uöt16_t
 
	gh™dÀ
;

1307 
uöt16_t
 
	goff£t
;

1308 
uöt16_t
 
	gÀn
;

1309 
uöt8_t
 *
	gpVÆue
;

1310 } 
	t©tPª∑ªWrôeReq_t
;

1317 
uöt16_t
 
	gh™dÀ
;

1318 
uöt16_t
 
	goff£t
;

1319 
uöt16_t
 
	gÀn
;

1320 
uöt8_t
 *
	gpVÆue
;

1321 } 
	t©tPª∑ªWrôeR•_t
;

1328 
uöt8_t
 
	gÊags
;

1330 } 
	t©tExecuãWrôeReq_t
;

1337 
uöt16_t
 
	gh™dÀ
;

1338 
uöt16_t
 
	gÀn
;

1339 
uöt8_t
 *
	gpVÆue
;

1340 } 
	t©tH™dÀVÆueNŸi_t
;

1347 
uöt16_t
 
	gh™dÀ
;

1348 
uöt16_t
 
	gÀn
;

1349 
uöt8_t
 *
	gpVÆue
;

1350 } 
	t©tH™dÀVÆueInd_t
;

1364 
uöt8_t
 
	g›code
;

1365 
uöt8_t
 
	g≥ndögOpcode
;

1366 } 
	t©tFlowCålViﬁ©edEvt_t
;

1378 
uöt16_t
 
	gMTU
;

1379 } 
	t©tMtuUpd©edEvt_t
;

1389 
©tExch™geMTUReq_t
 
	gexch™geMTUReq
;

1390 
©tFödInfoReq_t
 
	gfödInfoReq
;

1391 
©tFödByTy≥VÆueReq_t
 
	gfödByTy≥VÆueReq
;

1392 
©tRódByTy≥Req_t
 
	gªadByTy≥Req
;

1393 
©tRódReq_t
 
	gªadReq
;

1394 
©tRódBlobReq_t
 
	gªadBlobReq
;

1395 
©tRódMu…iReq_t
 
	gªadMu…iReq
;

1396 
©tRódByGΩTy≥Req_t
 
	gªadByGΩTy≥Req
;

1397 
©tWrôeReq_t
 
	gwrôeReq
;

1398 
©tPª∑ªWrôeReq_t
 
	g¥ï¨eWrôeReq
;

1399 
©tExecuãWrôeReq_t
 
	gexecuãWrôeReq
;

1402 
©tEº‹R•_t
 
	gîr‹R•
;

1403 
©tExch™geMTUR•_t
 
	gexch™geMTUR•
;

1404 
©tFödInfoR•_t
 
	gfödInfoR•
;

1405 
©tFödByTy≥VÆueR•_t
 
	gfödByTy≥VÆueR•
;

1406 
©tRódByTy≥R•_t
 
	gªadByTy≥R•
;

1407 
©tRódR•_t
 
	gªadR•
;

1408 
©tRódBlobR•_t
 
	gªadBlobR•
;

1409 
©tRódMu…iR•_t
 
	gªadMu…iR•
;

1410 
©tRódByGΩTy≥R•_t
 
	gªadByGΩTy≥R•
;

1411 
©tPª∑ªWrôeR•_t
 
	g¥ï¨eWrôeR•
;

1414 
©tH™dÀVÆueNŸi_t
 
	gh™dÀVÆueNŸi
;

1415 
©tH™dÀVÆueInd_t
 
	gh™dÀVÆueInd
;

1418 
©tFlowCålViﬁ©edEvt_t
 
	gÊowCålEvt
;

1419 
©tMtuUpd©edEvt_t
 
	gmtuEvt
;

1420 } 
	t©tMsg_t
;

1427 
uöt16_t
 
	g°¨tH™dÀ
;

1428 
uöt16_t
 
	gídH™dÀ
;

1429 
©tAârTy≥_t
 
	gvÆue
;

1430 } 
	tg©tFödByTy≥VÆueReq_t
;

1437 
uöt8_t
 
	gdiscCh¨sByUUID
;

1438 
©tRódByTy≥Req_t
 
	gªq
;

1439 } 
	tg©tRódByTy≥Req_t
;

1446 
uöt8_t
 
	gªlübÀ
;

1447 
©tPª∑ªWrôeReq_t
 
	gªq
;

1448 
uöt16_t
 
	gœ°Off£t
;

1449 } 
	tg©tWrôeL⁄gReq_t
;

1456 
uöt8_t
 
	gªlübÀ
;

1457 
©tPª∑ªWrôeReq_t
 *
	gpReqs
;

1458 
uöt8_t
 
	gnumReqs
;

1459 
uöt8_t
 
	gödex
;

1460 
uöt8_t
 
	gÊags
;

1462 } 
	tg©tRñübÀWrôesReq_t
;

1472 
©tExch™geMTUReq_t
 
	gexch™geMTUReq
;

1473 
©tFödInfoReq_t
 
	gfödInfoReq
;

1474 
©tFödByTy≥VÆueReq_t
 
	gfödByTy≥VÆueReq
;

1475 
©tRódByTy≥Req_t
 
	gªadByTy≥Req
;

1476 
©tRódReq_t
 
	gªadReq
;

1477 
©tRódBlobReq_t
 
	gªadBlobReq
;

1478 
©tRódMu…iReq_t
 
	gªadMu…iReq
;

1479 
©tRódByGΩTy≥Req_t
 
	gªadByGΩTy≥Req
;

1480 
©tWrôeReq_t
 
	gwrôeReq
;

1481 
©tPª∑ªWrôeReq_t
 
	g¥ï¨eWrôeReq
;

1482 
©tExecuãWrôeReq_t
 
	gexecuãWrôeReq
;

1483 
g©tFödByTy≥VÆueReq_t
 
	gg©tFödByTy≥VÆueReq
;

1484 
g©tRódByTy≥Req_t
 
	gg©tRódByTy≥Req
;

1485 
g©tWrôeL⁄gReq_t
 
	gg©tWrôeL⁄gReq
;

1486 
g©tRñübÀWrôesReq_t
 
	gg©tRñübÀWrôesReq
;

1489 
©tEº‹R•_t
 
	gîr‹R•
;

1490 
©tExch™geMTUR•_t
 
	gexch™geMTUR•
;

1491 
©tFödInfoR•_t
 
	gfödInfoR•
;

1492 
©tFödByTy≥VÆueR•_t
 
	gfödByTy≥VÆueR•
;

1493 
©tRódByTy≥R•_t
 
	gªadByTy≥R•
;

1494 
©tRódR•_t
 
	gªadR•
;

1495 
©tRódBlobR•_t
 
	gªadBlobR•
;

1496 
©tRódMu…iR•_t
 
	gªadMu…iR•
;

1497 
©tRódByGΩTy≥R•_t
 
	gªadByGΩTy≥R•
;

1498 
©tPª∑ªWrôeR•_t
 
	g¥ï¨eWrôeR•
;

1501 
©tH™dÀVÆueNŸi_t
 
	gh™dÀVÆueNŸi
;

1502 
©tH™dÀVÆueInd_t
 
	gh™dÀVÆueInd
;

1505 
©tFlowCålViﬁ©edEvt_t
 
	gÊowCålEvt
;

1506 
©tMtuUpd©edEvt_t
 
	gmtuEvt
;

1507 } 
	tg©tMsg_t
;

1515 
tmos_evít_hdr_t
 
	ghdr
;

1516 
uöt16_t
 
	gc⁄nH™dÀ
;

1517 
uöt8_t
 
	gmëhod
;

1518 
g©tMsg_t
 
	gmsg
;

1519 } 
	tg©tMsgEvít_t
;

1526 
uöt8_t
 
	gÀn
;

1527 c⁄° 
uöt8_t
 *
	guuid
;

1528 } 
	tg©tAârTy≥_t
;

1533 
	s©tAâribuã_t


1535 
g©tAârTy≥_t
 
	gty≥
;

1536 
uöt8_t
 
	g≥rmissi⁄s
;

1537 
uöt16_t
 
	gh™dÀ
;

1538 
uöt8_t
 *
	gpVÆue
;

1541 } 
	tg©tAâribuã_t
;

1548 
uöt16_t
 
	gnumAârs
;

1549 
uöt8_t
 
	gícKeySize
;

1555 
g©tAâribuã_t
 *
	g©ås
;

1556 } 
	tg©tSîvi˚_t
;

1584 
uöt8_t
 (*
	tp‚GATTRódAârCB_t
)–
	tuöt16_t
 
	tc⁄nH™dÀ
, 
	tg©tAâribuã_t
 *
	tpAâr
, 
	tuöt8_t
 *
	tpVÆue
,

1585 
	tuöt16_t
 *
	tpLí
, uöt16_à
	toff£t
, uöt16_à
	tmaxLí
, 
	tuöt8_t
 
	tmëhod
 );

1614 
uöt8_t
 (*
	tp‚GATTWrôeAârCB_t
)–
	tuöt16_t
 
	tc⁄nH™dÀ
, 
	tg©tAâribuã_t
 *
	tpAâr
, 
	tuöt8_t
 *
	tpVÆue
,

1615 
	tuöt16_t
 
	tÀn
, uöt16_à
	toff£t
, 
	tuöt8_t
 
	tmëhod
 );

1628 
bSètus_t
 (*
	tp‚GATTAuth‹izeAârCB_t
)–
	tuöt16_t
 
	tc⁄nH™dÀ
, 
	tg©tAâribuã_t
 *
	tpAâr
,

1629 
	tuöt8_t
 
	t›code
 );

1636 
uöt16_t
 
	gc⁄nH™dÀ
;

1637 
uöt8_t
 
	gvÆue
;

1638 } 
	tg©tCh¨Cfg_t
;

1646 
p‚GATTRódAârCB_t
 
	gp‚RódAârCB
;

1647 
p‚GATTWrôeAârCB_t
 
	gp‚WrôeAârCB
;

1648 
p‚GATTAuth‹izeAârCB_t
 
	gp‚Auth‹izeAârCB
;

1649 } 
	tg©tSîvi˚CBs_t
;

1657 
tmos_evít_hdr_t
 
	ghdr
;

1658 
uöt8_t
 
	g›code
;

1659 } 
	tg≠EvítHdr_t
;

1668 
tmos_evít_hdr_t
 
	ghdr
;

1669 
uöt8_t
 
	g›code
;

1670 
uöt8_t
 
	gdevAddr
[
B_ADDR_LEN
];

1671 
uöt16_t
 
	gd©aPktLí
;

1672 
uöt8_t
 
	gnumD©aPkts
;

1673 } 
	tg≠Devi˚InôD⁄eEvít_t
;

1685 
tmos_evít_hdr_t
 
	ghdr
;

1686 
uöt8_t
 
	g›code
;

1687 
uöt8_t
 
	gaddrTy≥
;

1688 
uöt8_t
 
	gdevAddr
[
B_ADDR_LEN
];

1689 
uöt32_t
 
	gsignCou¡î
;

1690 } 
	tg≠SignUpd©eEvít_t
;

1699 
tmos_evít_hdr_t
 
	ghdr
;

1700 
uöt8_t
 
	g›code
;

1701 
uöt8_t
 
	gevítTy≥
;

1702 
uöt8_t
 
	gaddrTy≥
;

1703 
uöt8_t
 
	gaddr
[
B_ADDR_LEN
];

1704 
öt8_t
 
	grssi
;

1705 
uöt8_t
 
	gd©aLí
;

1706 
uöt8_t
 *
	gpEvtD©a
;

1707 } 
	tg≠Devi˚InfoEvít_t
;

1714 
uöt8_t
 
	gèskID
;

1715 
uöt8_t
 
	gmode
;

1716 
uöt8_t
 
	ga˘iveSˇn
;

1717 
uöt8_t
 
	gwhôeLi°
;

1718 } 
	tg≠DevDiscReq_t
;

1725 
uöt8_t
 
	gevítTy≥
;

1726 
uöt8_t
 
	gaddrTy≥
;

1727 
uöt8_t
 
	gaddr
[
B_ADDR_LEN
];

1728 
uöt8_t
 
	gd©aLí
;

1729 
uöt8_t
 *
	gpEvtD©a
;

1730 } 
	tg≠DevRec_t
;

1738 
tmos_evít_hdr_t
 
	ghdr
;

1739 
uöt8_t
 
	g›code
;

1740 
uöt8_t
 
	gnumDevs
;

1741 
g≠DevRec_t
 *
	gpDevLi°
;

1742 } 
	tg≠DevDiscEvít_t
;

1750 
tmos_evít_hdr_t
 
	ghdr
;

1751 
uöt8_t
 
	g›code
;

1752 } 
	tg≠MakeDiscovîabÀR•Evít_t
;

1760 
tmos_evít_hdr_t
 
	ghdr
;

1761 
uöt8_t
 
	g›code
;

1762 } 
	tg≠EndDiscovîabÀR•Evít_t
;

1770 
tmos_evít_hdr_t
 
	ghdr
;

1771 
uöt8_t
 
	g›code
;

1772 
uöt8_t
 
	gadTy≥
;

1773 } 
	tg≠AdvD©aUpd©eEvít_t
;

1784 
tmos_evít_hdr_t
 
	ghdr
;

1785 
uöt8_t
 
	g›code
;

1786 
uöt8_t
 
	gdevAddrTy≥
;

1787 
uöt8_t
 
	gdevAddr
[
B_ADDR_LEN
];

1788 
uöt16_t
 
	gc⁄√˘i⁄H™dÀ
;

1789 
uöt8_t
 
	gc⁄nRﬁe
;

1790 
uöt16_t
 
	gc⁄nI¡îvÆ
;

1791 
uöt16_t
 
	gc⁄nL©ícy
;

1792 
uöt16_t
 
	gc⁄nTimeout
;

1793 
uöt8_t
 
	g˛ockAccuøcy
;

1794 } 
	tg≠E°LökReqEvít_t
;

1802 
tmos_evít_hdr_t
 
	ghdr
;

1803 
uöt8_t
 
	g›code
;

1804 
uöt8_t
 
	g°©us
;

1805 
uöt16_t
 
	gc⁄√˘i⁄H™dÀ
;

1806 
uöt16_t
 
	gc⁄nI¡îvÆ
;

1807 
uöt16_t
 
	gc⁄nL©ícy
;

1808 
uöt16_t
 
	gc⁄nTimeout
;

1809 } 
	tg≠LökUpd©eEvít_t
;

1817 
tmos_evít_hdr_t
 
	ghdr
;

1818 
uöt8_t
 
	g›code
;

1819 
uöt16_t
 
	gc⁄√˘i⁄H™dÀ
;

1820 
uöt8_t
 
	gªas⁄
;

1821 
uöt8_t
 
	gc⁄nRﬁe
;

1822 } 
	tg≠Tîmö©eLökEvít_t
;

1830 
tmos_evít_hdr_t
 
	ghdr
;

1831 
uöt8_t
 
	g›code
;

1832 
uöt8_t
 
	gdevi˚Addr
[
B_ADDR_LEN
];

1833 
uöt16_t
 
	gc⁄√˘i⁄H™dÀ
;

1834 
uöt8_t
 
	guiI≈uts
;

1835 
uöt8_t
 
	guiOuçuts
;

1836 } 
	tg≠PasskeyNìdedEvít_t
;

1841 (*
	gp‚PasscodeCB_t
)–
	tuöt8_t
 *
	tdevi˚Addr
,

1842 
	tuöt16_t
 
	tc⁄√˘i⁄H™dÀ
,

1843 
	tuöt8_t
 
	tuiI≈uts
,

1844 
	tuöt8_t
 
	tuiOuçuts


1850 (*
	gp‚PaúSèãCB_t
)–
	tuöt16_t
 
	tc⁄√˘i⁄H™dÀ
,

1851 
	tuöt8_t
 
	t°©e
,

1852 
	tuöt8_t
 
	t°©us


1860 
p‚PasscodeCB_t
 
	g∑sscodeCB
;

1861 
p‚PaúSèãCB_t
 
	g∑úSèãCB
;

1862 } 
	tg≠B⁄dCBs_t
;

1866 
	gGAPROLE_INIT
 = 0,

1867 
	gGAPROLE_STARTED
,

1868 
	gGAPROLE_ADVERTISING
,

1869 
	gGAPROLE_WAITING
,

1870 
	gGAPROLE_CONNECTED
,

1871 
	gGAPROLE_CONNECTED_ADV
,

1872 
	gGAPROLE_ERROR


1873 } 
	tg≠Rﬁe_Sèãs_t
;

1880 
g≠EvítHdr_t
 
	gg≠
;

1881 
g≠Devi˚InôD⁄eEvít_t
 
	göôD⁄e
;

1882 
g≠Devi˚InfoEvít_t
 
	gdevi˚Info
;

1883 
g≠DevDiscEvít_t
 
	gdiscCm∂
;

1884 
g≠AdvD©aUpd©eEvít_t
 
	gadvD©aUpd©e
;

1885 
g≠MakeDiscovîabÀR•Evít_t
 
	gadvDiscEvt
;

1887 
g≠E°LökReqEvít_t
 
	glökCm∂
;

1888 
g≠LökUpd©eEvít_t
 
	glökUpd©e
;

1889 
g≠Tîmö©eLökEvít_t
 
	glökTîmö©e
;

1890 } 
	tg≠RﬁeEvít_t
;

1897 
uöt8_t
 
	gevítTy≥
;

1898 
uöt8_t
 
	gaddrTy≥
;

1899 
uöt8_t
 
	gaddr
[
B_ADDR_LEN
];

1900 
öt8_t
 
	grssi
;

1901 } 
	tg≠SˇnRec_t
;

1907 (*
	gg≠RﬁesBrﬂdˇ°îSèãNŸify_t
)–
	tg≠Rﬁe_Sèãs_t
 
	t√wSèã
 );

1909 (*
	gg≠RﬁesSˇnReqRecv_t
)–
	tg≠SˇnRec_t
 * 
	tpEvít
 );

1913 
g≠RﬁesBrﬂdˇ°îSèãNŸify_t
 
	gp‚SèãCh™ge
;

1914 
g≠RﬁesSˇnReqRecv_t
 
	gp‚SˇnRecv
;

1915 } 
	tg≠RﬁesBrﬂdˇ°îCBs_t
;

1920 (*
	gp‚G≠Ob£rvîRﬁeEvítCB_t
)–
	tg≠RﬁeEvít_t
 *
	tpEvít


1928 
p‚G≠Ob£rvîRﬁeEvítCB_t
 
	gevítCB
;

1929 } 
	tg≠RﬁeOb£rvîCB_t
;

1934 (*
	gg≠RﬁesRssiRód_t
)–
	tuöt16_t
 
	tc⁄nH™dÀ
, 
	töt8_t
 
	t√wRSSI
 );

1940 (*
	gg≠RﬁesSèãNŸify_t
)–
	tg≠Rﬁe_Sèãs_t
 
	t√wSèã
, 
	tg≠RﬁeEvít_t
 * 
	tpEvít
 );

1945 (*
	gg≠RﬁesP¨amUpd©eCB_t
)–
	tuöt16_t
 
	tc⁄nH™dÀ
, uöt16_à
	tc⁄nI¡îvÆ
,

1946 
	tuöt16_t
 
	tc⁄nSœveL©ícy
, uöt16_à
	tc⁄nTimeout
 );

1953 
g≠RﬁesSèãNŸify_t
 
	gp‚SèãCh™ge
;

1954 
g≠RﬁesRssiRód_t
 
	gp‚RssiRód
;

1955 
g≠RﬁesP¨amUpd©eCB_t
 
	gp‚P¨amUpd©e
;

1956 } 
	tg≠RﬁesCBs_t
;

1961 (*
	gp‚G≠CíåÆRﬁeEvítCB_t
)–
	tg≠RﬁeEvít_t
 *
	tpEvít
 );

1966 (*
	gp‚HciD©aLíCh™geEvCB_t
)–
	tuöt16_t
 
	tc⁄nH™dÀ
, uöt16_à
	tmaxTxO˘ës
,

1967 
	tuöt16_t
 
	tmaxRxO˘ës
 );

1974 
g≠RﬁesRssiRód_t
 
	grssiCB
;

1975 
p‚G≠CíåÆRﬁeEvítCB_t
 
	gevítCB
;

1976 
p‚HciD©aLíCh™geEvCB_t
 
	gCh™gCB
;

1977 } 
	tg≠CíåÆRﬁeCB_t
;

1985 
	#TX_MODE_TX_FINISH
 0x01

1988 
	#TX_MODE_TX_FAIL
 0x11

1989 
	#TX_MODE_TX_TIMEOUT
 
TX_MODE_TX_FAIL


1990 
	#TX_MODE_RX_DATA
 0x02

1991 
	#TX_MODE_RX_TIMEOUT
 0x12

1992 
	#TX_MODE_HOP_SHUT
 0x22

	)

1995 
	#RX_MODE_RX_DATA
 0x03

1999 
	#RX_MODE_TX_FINISH
 0x04

2000 
	#RX_MODE_TX_FAIL
 0x14

2001 
	#RX_MODE_TX_TIMEOUT
 
RX_MODE_TX_FAIL


2002 
	#RX_MODE_HOP_SHUT
 0x24

	)

2005 
	#LLE_MODE_BASIC
 (0)

2006 
	#LLE_MODE_AUTO
 (1)

2007 

	)

2009 
	#LLE_WHITENING_ON
 (0<<1)

	)

2010 
	#LLE_WHITENING_OFF
 (1<<1)

	)

2012 
	#LLE_MODE_EX_CHANNEL
 (1<<6)

	)

2014 
	#LLE_MODE_NON_RSSI
 (1<<7)

	)

2019 (*
	gp‚RFSètusCB_t
)–
	tuöt8_t
 
	t°a
, uöt8_à
	tr§
, uöt8_à*
	trxBuf
 );

2024 
	sèg_rf_c⁄fig


2026 
uöt8_t
 
	gLLEMode
;

2032 
uöt8_t
 
	gCh™√l
;

2033 
uöt32_t
 
	gFªquícy
;

2034 
uöt32_t
 
	gac˚ssAddªss
;

2035 
uöt32_t
 
	gCRCInô
;

2036 
p‚RFSètusCB_t
 
	grfSètusCB
;

2037 
uöt32_t
 
	gCh™√lM≠
;

2039 
uöt8_t
 
	gResv
;

2040 
uöt8_t
 
	gHóπPîiod
;

2041 
uöt8_t
 
	gH›Pîiod
;

2042 
uöt8_t
 
	gH›Index
;

2043 
uöt8_t
 
	gRxMaxÀn
;

2044 
uöt8_t
 
	gTxMaxÀn
;

2045 } 
	trfC⁄fig_t
;

2055 c⁄° 
uöt8_t
 
g≠Sîvi˚UUID
[];

2056 c⁄° 
uöt8_t
 
g©tSîvi˚UUID
[];

2061 c⁄° 
uöt8_t
 
¥im¨ySîvi˚UUID
[];

2062 c⁄° 
uöt8_t
 
£c⁄d¨ySîvi˚UUID
[];

2063 c⁄° 
uöt8_t
 
ö˛udeUUID
[];

2064 c⁄° 
uöt8_t
 
ch¨a˘îUUID
[];

2069 c⁄° 
uöt8_t
 
ch¨ExtPr›sUUID
[];

2070 c⁄° 
uöt8_t
 
ch¨U£rDescUUID
[];

2071 c⁄° 
uöt8_t
 
˛õ¡Ch¨CfgUUID
[];

2072 c⁄° 
uöt8_t
 
£rvCh¨CfgUUID
[];

2073 c⁄° 
uöt8_t
 
ch¨F‹m©UUID
[];

2074 c⁄° 
uöt8_t
 
ch¨AggF‹m©UUID
[];

2075 c⁄° 
uöt8_t
 
vÆidR™geUUID
[];

2076 c⁄° 
uöt8_t
 
extRï‹tRefUUID
[];

2077 c⁄° 
uöt8_t
 
ªp‹tRefUUID
[];

2082 c⁄° 
uöt8_t
 
devi˚NameUUID
[];

2083 c⁄° 
uöt8_t
 
≠≥¨™˚UUID
[];

2084 c⁄° 
uöt8_t
 
≥riPrivacyFœgUUID
[];

2085 c⁄° 
uöt8_t
 
ªc⁄√˘AddrUUID
[];

2086 c⁄° 
uöt8_t
 
≥riC⁄nP¨amUUID
[];

2087 c⁄° 
uöt8_t
 
£rvi˚Ch™gedUUID
[];

2088 c⁄° 
uöt8_t
 
˚¡AddrResUUID
[];

2093 
uöt32_t
 
tmos_ønd
( );

2094 
BOOL
 
tmos_memcmp
–c⁄° *
§c1
, c⁄° *
§c2
, 
uöt32_t
 
Àn
 );

2095 
BOOL
 
tmos_isbuf£t
–
uöt8_t
 *
buf
, uöt8_à
vÆ
, 
uöt32_t
 
Àn
 );

2096 
uöt32_t
 
tmos_°æí
–*
pSåög
 );

2097 
tmos_mem£t
–* 
pD°
, 
uöt8_t
 
VÆue
, 
uöt32_t
 
Àn
 );

2098 
tmos_mem˝y
–*
d°
, c⁄° *
§c
, 
uöt32_t
 
Àn
 );

2108 
bSètus_t
 
tmos_£t_evít
–
tmosTaskID
 
èskID
, 
tmosEvíts
 
evít
 );

2118 
bSètus_t
 
tmos_˛ór_evít
–
tmosTaskID
 
èskID
, 
tmosEvíts
 
evít
 );

2129 
BOOL
 
tmos_°¨t_èsk
–
tmosTaskID
 
èskID
, 
tmosEvíts
 
evít
, 
tmosTimî
 
time
 );

2142 
bSètus_t
 
tmos_°¨t_ªlﬂd_èsk
–
tmosTaskID
 
èskID
, 
tmosEvíts
 
evít
, 
tmosTimî
 
time
 );

2154 
bSètus_t
 
tmos_°›_èsk
–
tmosTaskID
 
èskID
, 
tmosEvíts
 
evít
 );

2164 
tmosTimî
 
tmos_gë_èsk_timî
–
tmosTaskID
 
èskID
, 
tmosEvíts
 
evít
 );

2174 
bSètus_t
 
tmos_msg_£nd
–
tmosTaskID
 
èskID
, 
uöt8_t
 *
msg_±r
 );

2183 
bSètus_t
 
tmos_msg_dóŒoˇã
–
uöt8_t
 *
msg_±r
 );

2192 
uöt8_t
 *
tmos_msg_ª˚ive
–
tmosTaskID
 
èskID
 );

2201 
uöt8_t
 *
tmos_msg_Æloˇã
–
uöt16_t
 
Àn
 );

2212 
bSètus_t
 
tmos_¢v_ªad
–
tmosSnvId_t
 
id
, 
tmosSnvLí_t
 
Àn
, *
pBuf
 );

2224 
bSètus_t
 
TMOS_TimîInô
–
p‚GëSysClock
 
‚GëClock
 );

2233 
TMOS_Sy°emPro˚ss
( );

2242 
uöt32_t
 
TMOS_GëSy°emClock
( );

2251 
tmosTaskID
 
TMOS_Pro˚ssEvítRegi°î
–
pTaskEvítH™dÀrFn
 
evítCb
 );

2261 
TMOS_Së32KTu√VÆue
–
uöt16_t
 
Êash_vÆ
, uöt16_à
øm_vÆ
 );

2271 
bSètus_t
 
LL_AddWhôeLi°Devi˚
–
uöt8_t
 
addrTy≥
, uöt8_à*
devAddr
 );

2281 
bSètus_t
 
LL_RemoveWhôeLi°Devi˚
–
uöt8_t
 
addrTy≥
, uöt8_à*
devAddr
 );

2290 
bSètus_t
 
LL_CÀ¨WhôeLi°
( );

2301 
bSètus_t
 
LL_En¸y±
–
uöt8_t
 *
key
, uöt8_à*
∂aöãxtD©a
, uöt8_à*
í¸y±D©a
 );

2312 
bSètus_t
 
LL_De¸y±
–
uöt8_t
 *
key
, uöt8_à*
∂aöãxtD©a
, uöt8_à*
de¸y±D©a
 );

2321 
uöt32_t
 
LL_GëNumbîOfUnAckPackë
–
uöt16_t
 
h™dÀ
 );

2331 
LL_C⁄√˘EvítRegi°î
–
p‚EvítCB
 
c⁄nEvítCB
 );

2340 
LL_Advîti£EvítRegi°î
–
p‚EvítCB
 
advEvítCB
 );

2349 
bSètus_t
 
LL_SëTxPowîLevñ
–
uöt8_t
 
powî
 );

2358 
öt8_t
 
BLE_RódRssi
( );

2367 
öt16_t
 
BLE_RódCfo
( );

2378 
BLE_PAC⁄åﬁInô
–
bÀPaC⁄åﬁC⁄fig_t
 *
∑C⁄åﬁ
 );

2387 
BLE_RegInô
( );

2396 
bSètus_t
 
BLE_LibInô
–
bÀC⁄fig_t
* 
pCfg
 );

2412 
uöt32_t
 
BLE_Ac˚ssAddªssGíî©e
( );

2418 
uöt8_t
 
lökDB_Regi°î
–
p‚LökDBCB_t
 
pFunc
 );

2425 
uöt8_t
 
lökDB_Sèã
–
uöt16_t
 
c⁄√˘i⁄H™dÀ
, uöt8_à
°©e
 );

2430 
lökDB_Pîf‹mFunc
–
p‚Pîf‹mFuncCB_t
 
cb
 );

2437 
	#lökDB_Up
–
c⁄√˘i⁄H™dÀ
 ) 
	`lökDB_Sèã
–(c⁄√˘i⁄H™dÀ), 
LINK_CONNECTED
 )

	)

2446 
uöt16_t
 
ATT_GëMTU
–uöt16_à
c⁄nH™dÀ
 );

2459 
bSètus_t
 
ATT_H™dÀVÆueCfm
–
uöt16_t
 
c⁄nH™dÀ
 );

2464 
uöt8_t
 
ATT_Com∑ªUUID
–c⁄° uöt8_à*
pUUID1
, 
uöt16_t
 
Àn1
, c⁄° uöt8_à*
pUUID2
, uöt16_à
Àn2
 );

2472 
bSètus_t
 
GATT_InôClõ¡
( );

2482 
GATT_Regi°îF‹Ind
–
uöt8_t
 
èskId
 );

2492 
g©tAâribuã_t
 *
GATT_FödH™dÀ
–
uöt16_t
 
h™dÀ
, uöt16_à*
pH™dÀ
 );

2522 
bSètus_t
 
GATT_Indiˇti⁄
–
uöt16_t
 
c⁄nH™dÀ
, 
©tH™dÀVÆueInd_t
 *
pInd
, 
uöt8_t
 
authítiˇãd
, uöt8_à
èskId
 );

2546 
bSètus_t
 
GATT_NŸifiˇti⁄
–
uöt16_t
 
c⁄nH™dÀ
, 
©tH™dÀVÆueNŸi_t
 *
pNŸi
, 
uöt8_t
 
authítiˇãd
 );

2578 
bSètus_t
 
GATT_Exch™geMTU
–
uöt16_t
 
c⁄nH™dÀ
, 
©tExch™geMTUReq_t
 *
pReq
, 
uöt8_t
 
èskId
 );

2609 
bSètus_t
 
GATT_DiscAŒPrim¨ySîvi˚s
–
uöt16_t
 
c⁄nH™dÀ
, 
uöt8_t
 
èskId
 );

2646 
bSètus_t
 
GATT_DiscPrim¨ySîvi˚ByUUID
–
uöt16_t
 
c⁄nH™dÀ
, 
uöt8_t
 *
pUUID
, uöt8_à
Àn
, uöt8_à
èskId
 );

2682 
bSètus_t
 
GATT_FödIn˛udedSîvi˚s
–
uöt16_t
 
c⁄nH™dÀ
, uöt16_à
°¨tH™dÀ
, uöt16_à
ídH™dÀ
, 
uöt8_t
 
èskId
 );

2718 
bSètus_t
 
GATT_DiscAŒCh¨s
–
uöt16_t
 
c⁄nH™dÀ
, uöt16_à
°¨tH™dÀ
, uöt16_à
ídH™dÀ
, 
uöt8_t
 
èskId
 );

2754 
bSètus_t
 
GATT_DiscCh¨sByUUID
–
uöt16_t
 
c⁄nH™dÀ
, 
©tRódByTy≥Req_t
 *
pReq
, 
uöt8_t
 
èskId
 );

2790 
bSètus_t
 
GATT_DiscAŒCh¨Descs
–
uöt16_t
 
c⁄nH™dÀ
, uöt16_à
°¨tH™dÀ
, uöt16_à
ídH™dÀ
, 
uöt8_t
 
èskId
 );

2827 
bSètus_t
 
GATT_RódCh¨VÆue
–
uöt16_t
 
c⁄nH™dÀ
, 
©tRódReq_t
 *
pReq
, 
uöt8_t
 
èskId
 );

2862 
bSètus_t
 
GATT_RódUsögCh¨UUID
–
uöt16_t
 
c⁄nH™dÀ
, 
©tRódByTy≥Req_t
 *
pReq
, 
uöt8_t
 
èskId
 );

2893 
bSètus_t
 
GATT_RódL⁄gCh¨VÆue
–
uöt16_t
 
c⁄nH™dÀ
, 
©tRódBlobReq_t
 *
pReq
, 
uöt8_t
 
èskId
 );

2926 
bSètus_t
 
GATT_RódMu…iCh¨VÆues
–
uöt16_t
 
c⁄nH™dÀ
, 
©tRódMu…iReq_t
 *
pReq
, 
uöt8_t
 
èskId
 );

2959 
bSètus_t
 
GATT_WrôeNoR•
–
uöt16_t
 
c⁄nH™dÀ
, 
©tWrôeReq_t
 *
pReq
 );

2997 
bSètus_t
 
GATT_Sig√dWrôeNoR•
–
uöt16_t
 
c⁄nH™dÀ
, 
©tWrôeReq_t
 *
pReq
 );

3033 
bSètus_t
 
GATT_WrôeCh¨VÆue
–
uöt16_t
 
c⁄nH™dÀ
, 
©tWrôeReq_t
 *
pReq
, 
uöt8_t
 
èskId
 );

3069 
bSètus_t
 
GATT_WrôeL⁄gCh¨VÆue
–
uöt16_t
 
c⁄nH™dÀ
, 
©tPª∑ªWrôeReq_t
 *
pReq
, 
uöt8_t
 
èskId
 );

3116 
bSètus_t
 
GATT_RñübÀWrôes
–
uöt16_t
 
c⁄nH™dÀ
, 
©tPª∑ªWrôeReq_t
 *
pReqs
, 
uöt8_t
 
numReqs
,

3117 
uöt8_t
 
Êags
, uöt8_à
èskId
 );

3150 
bSètus_t
 
GATT_RódCh¨Desc
–
uöt16_t
 
c⁄nH™dÀ
, 
©tRódReq_t
 *
pReq
, 
uöt8_t
 
èskId
 );

3185 
bSètus_t
 
GATT_RódL⁄gCh¨Desc
–
uöt16_t
 
c⁄nH™dÀ
, 
©tRódBlobReq_t
 *
pReq
, 
uöt8_t
 
èskId
 );

3218 
bSètus_t
 
GATT_WrôeCh¨Desc
–
uöt16_t
 
c⁄nH™dÀ
, 
©tWrôeReq_t
 *
pReq
, 
uöt8_t
 
èskId
 );

3254 
bSètus_t
 
GATT_WrôeL⁄gCh¨Desc
–
uöt16_t
 
c⁄nH™dÀ
, 
©tPª∑ªWrôeReq_t
 *
pReq
, 
uöt8_t
 
èskId
 );

3269 *
GATT_bm_Æloc
–
uöt16_t
 
c⁄nH™dÀ
, 
uöt8_t
 
›code
, uöt16_à
size
, uöt16_à*
pSizeAŒoc
, uöt8_à
Êag
 );

3279 
GATT_bm_‰ì
–
g©tMsg_t
 *
pMsg
, 
uöt8_t
 
›code
 );

3296 
bSètus_t
 
GATTSîvAµ_Regi°îSîvi˚
–
g©tAâribuã_t
 *
pAârs
, 
uöt16_t
 
numAârs
,

3297 
uöt8_t
 
ícKeySize
, 
g©tSîvi˚CBs_t
 *
pSîvi˚CBs
 );

3310 
bSètus_t
 
GATTSîvAµ_AddSîvi˚
–
uöt32_t
 
£rvi˚s
 );

3325 
bSètus_t
 
GATTSîvAµ_Dîegi°îSîvi˚
–
uöt16_t
 
h™dÀ
, 
g©tAâribuã_t
 **
p2pAârs
 );

3339 
GATTSîvAµ_InôCh¨Cfg
–
uöt16_t
 
c⁄nH™dÀ
, 
g©tCh¨Cfg_t
 *
ch¨CfgTbl
 );

3354 
bSètus_t
 
GATTSîvAµ_SídSîvi˚Ch™gedInd
–
uöt16_t
 
c⁄nH™dÀ
, 
uöt8_t
 
èskId
 );

3368 
uöt16_t
 
GATTSîvAµ_RódCh¨Cfg
–uöt16_à
c⁄nH™dÀ
, 
g©tCh¨Cfg_t
 *
ch¨CfgTbl
 );

3383 
uöt8_t
 
GATTSîvAµ_WrôeCh¨Cfg
–
uöt16_t
 
c⁄nH™dÀ
, 
g©tCh¨Cfg_t
 *
ch¨CfgTbl
, uöt16_à
vÆue
 );

3398 
bSètus_t
 
GATTSîvAµ_Pro˚ssCCCWrôeReq
–
uöt16_t
 
c⁄nH™dÀ
, 
g©tAâribuã_t
 *
pAâr
,

3399 
uöt8_t
 *
pVÆue
, 
uöt16_t
 
Àn
, uöt16_à
off£t
, uöt16_à
vÆidCfg
 );

3413 
bSètus_t
 
GGS_SëP¨amëî
–
uöt8_t
 
∑øm
, uöt8_à
Àn
, *
vÆue
 );

3426 
bSètus_t
 
GGS_GëP¨amëî
–
uöt8_t
 
∑øm
, *
vÆue
 );

3439 
bSètus_t
 
GGS_AddSîvi˚
–
uöt32_t
 
£rvi˚s
 );

3453 
bSètus_t
 
GAP_SëP¨amVÆue
–
uöt16_t
 
∑ømID
, uöt16_à
∑ømVÆue
 );

3465 
uöt16_t
 
GAP_GëP¨amVÆue
–uöt16_à
∑ømID
 );

3481 
bSètus_t
 
GAP_C⁄figDevi˚Addr
–
uöt8_t
 
addrTy≥
, uöt8_à*
pSèticAddr
 );

3496 
bSètus_t
 
GAP_ResﬁvePriv©eAddr
–
uöt8_t
 *
pIRK
, uöt8_à*
pAddr
 );

3512 
bSètus_t
 
GAP_Upd©eAdvîtisögD©a
–
uöt8_t
 
èskID
, uöt8_à
adTy≥
, uöt8_à
d©aLí
, uöt8_à*
pAdvîtD©a
 );

3531 
bSètus_t
 
GAPB⁄dMgr_SëP¨amëî
–
uöt16_t
 
∑øm
, 
uöt8_t
 
Àn
, *
pVÆue
 );

3545 
bSètus_t
 
GAPB⁄dMgr_GëP¨amëî
–
uöt16_t
 
∑øm
, *
pVÆue
 );

3557 
bSètus_t
 
GAPB⁄dMgr_PasscodeR•
–
uöt16_t
 
c⁄√˘i⁄H™dÀ
, 
uöt8_t
 
°©us
, 
uöt32_t
 
∑sscode
 );

3568 
bSètus_t
 
GAPB⁄dMgr_PîiSecurôyReq
–
uöt16_t
 
c⁄nH™dÀ
 );

3586 
bSètus_t
 
GAPRﬁe_SëP¨amëî
–
uöt16_t
 
∑øm
, 
uöt8_t
 
Àn
, *
pVÆue
 );

3601 
bSètus_t
 
GAPRﬁe_GëP¨amëî
–
uöt16_t
 
∑øm
, *
pVÆue
 );

3608 
bSètus_t
 
GAPRﬁe_Tîmö©eLök
–
uöt16_t
 
c⁄nH™dÀ
 );

3618 
bSètus_t
 
GAPRﬁe_RódRssiCmd
–
uöt16_t
 
c⁄nH™dÀ
 );

3632 
bSètus_t
 
GAPRﬁe_Upd©eLök
–
uöt16_t
 
c⁄nH™dÀ
, uöt16_à
c⁄nI¡îvÆMö
,

3633 
uöt16_t
 
c⁄nI¡îvÆMax
, uöt16_à
c⁄nL©ícy
, uöt16_à
c⁄nTimeout
 );

3646 
bSètus_t
 
GAPRﬁe_Brﬂdˇ°îInô
( );

3655 
bSètus_t
 
GAPRﬁe_Brﬂdˇ°îSèπDevi˚
–
g≠RﬁesBrﬂdˇ°îCBs_t
 *
pAµCÆlbacks
 );

3664 
GAPRﬁe_Brﬂdˇ°îSëCB
–
g≠RﬁesBrﬂdˇ°îCBs_t
 *
pAµCÆlbacks
 );

3678 
bSètus_t
 
GAPRﬁe_Ob£rvîInô
( );

3689 
bSètus_t
 
GAPRﬁe_Ob£rvîSèπDevi˚
–
g≠RﬁeOb£rvîCB_t
 *
pAµCÆlbacks
 );

3702 
bSètus_t
 
GAPRﬁe_Ob£rvîSèπDiscovîy
–
uöt8_t
 
mode
, uöt8_à
a˘iveSˇn
, uöt8_à
whôeLi°
 );

3711 
bSètus_t
 
GAPRﬁe_Ob£rvîC™˚lDiscovîy
( );

3729 
bSètus_t
 
GAPRﬁe_PîùhîÆInô
( );

3738 
bSètus_t
 
GAPRﬁe_PîùhîÆSèπDevi˚
–
uöt8_t
 
èskid
, 
g≠B⁄dCBs_t
 *
pCB
, 
g≠RﬁesCBs_t
 *
pAµCÆlbacks
 );

3752 
bSètus_t
 
GAPRﬁe_PîùhîÆC⁄nP¨amUpd©eReq
–
uöt16_t
 
c⁄nH™dÀ
, uöt16_à
c⁄nI¡îvÆMö
,

3753 
uöt16_t
 
c⁄nI¡îvÆMax
, uöt16_à
œãncy
, uöt16_à
c⁄nTimeout
, 
uöt8_t
 
èskId
 );

3767 
bSètus_t
 
GAPRﬁe_CíåÆInô
( );

3778 
bSètus_t
 
GAPRﬁe_CíåÆSèπDevi˚
–
uöt8_t
 
èskid
, 
g≠B⁄dCBs_t
 *
pCB
, 
g≠CíåÆRﬁeCB_t
 *
pAµCÆlbacks
 );

3791 
bSètus_t
 
GAPRﬁe_CíåÆSèπDiscovîy
–
uöt8_t
 
mode
, uöt8_à
a˘iveSˇn
, uöt8_à
whôeLi°
 );

3800 
bSètus_t
 
GAPRﬁe_CíåÆC™˚lDiscovîy
( );

3816 
bSètus_t
 
GAPRﬁe_CíåÆE°ablishLök
–
uöt8_t
 
highDutyCy˛e
, uöt8_à
whôeLi°
, uöt8_à
addrTy≥Pìr
, uöt8_à*
≥îAddr
 );

3829 
bSètus_t
 
RF_RﬁeInô
( );

3838 
bSètus_t
 
RF_C⁄fig
–
rfC⁄fig_t
 *
pC⁄fig
 );

3854 
bSètus_t
 
RF_Rx
–
uöt8_t
 *
txBuf
, uöt8_à
txLí
, uöt8_à
pktRxTy≥
, uöt8_à
pktTxTy≥
 );

3870 
bSètus_t
 
RF_Tx
–
uöt8_t
 *
txBuf
, uöt8_à
txLí
, uöt8_à
pktTxTy≥
, uöt8_à
pktRxTy≥
 );

3879 
bSètus_t
 
RF_Shut
( );

3888 
RF_SëCh™√l
–
uöt32_t
 
ch™√l
 );

3897 
RF_FªquícyH›pögShut
( );

3906 
uöt8_t
 
RF_FªquícyH›pögTx
–uöt8_à
ª£ndCou¡
 );

3915 
uöt8_t
 
RF_FªquícyH›pögRx
–
uöt32_t
 
timeoutMS
 );

3924 
RF_B⁄dögEø£
( );

3933 
bSètus_t
 
LL_SögÀCh™√l
–
uöt8_t
 
ch
 );

3944 
bSètus_t
 
LL_Te°End
–
uöt8_t
 *
pPktNum
 );

3953 
bSètus_t
 
API_LE_Re˚ivîTe°Cmd
–
uöt8_t
 
rx_ch™√l
 );

3965 
bSètus_t
 
API_LE_TønsmôãrTe°Cmd
–
uöt8_t
 
tx_ch™√l
, uöt8_à
Àn
, uöt8_à
∑ylﬂd
, uöt8_à
tx_powî
 );

3974 
bSètus_t
 
API_LE_Te°EndCmd
( );

3983 
RFEND_SëSísôivôy
( );

3992 
bSètus_t
 
RFEND_TXCtu√Së
–
uöt8_t
 *
pP¨m
 );

4001 
bSètus_t
 
RFEND_TXCtu√Gë
–
uöt8_t
 *
pP¨m
 );

4011 
RFEND_SëAdcMode
–
uöt8_t
 
mode
 );

4017 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/LIB/CH57xBLE_ROM.h

20 #i‚de‡
__CH57xBLE_ROM_H


21 
	#__CH57xBLE_ROM_H


	)

23 #ifde‡
__˝lu•lus


27 
	~"°döt.h
"

29 #i‚de‡
öt8


30 
öt8_t
 
	töt8
;

32 #i‚de‡
öt16


33 
öt16_t
 
	töt16
;

35 #i‚de‡
BOOL


36 
uöt8_t
 
	tBOOL
;

38 #i‚de‡
s8


39 
öt8_t
 
	ts8
;

41 #i‚de‡
s16


42 
öt16_t
 
	ts16
;

44 #i‚de‡
s32


45 
öt32_t
 
	ts32
;

47 #i‚de‡
u8


48 
uöt8_t
 
	tu8
;

50 #i‚de‡
u16


51 
uöt16_t
 
	tu16
;

53 #i‚de‡
u32


54 
uöt32_t
 
	tu32
;

56 #i‚de‡
u64


57 
uöt64_t
 
	tu64
;

59 #i‚de‡
u8C


60 c⁄° 
	tuöt8_t
 
	tu8C
;

63 #i‚de‡
u8V


64 
uöt8_t
 vﬁ©ûê
	tu8V
;

66 #i‚de‡
u32V


67 
uöt32_t
 vﬁ©ûê
	tu32V
;

70 #i‚de‡
uöt8


71 
uöt8_t
 
	tuöt8
;

73 #i‚de‡
uöt16


74 
uöt16_t
 
	tuöt16
;

76 #i‚de‡
uöt32


77 
uöt32_t
 
	tuöt32
;

80 #i‚de‡
TRUE


81 
	#TRUE
 1

	)

83 #i‚de‡
FALSE


84 
	#FALSE
 0

	)

86 #i‚de‡
NULL


87 
	#NULL
 0

	)

89 #i‚de‡
SUCCESS


90 
	#SUCCESS
 0x00

	)

92 #i‚de‡ 
bSètus_t


93 
uöt8_t
 
	tbSètus_t
;

95 #i‚de‡ 
tmosTaskID


96 
uöt8_t
 
	ttmosTaskID
;

98 #i‚de‡ 
tmosEvíts


99 
uöt16_t
 
	ttmosEvíts
;

101 #i‚de‡ 
tmosTimî


102 
uöt32_t
 
	ttmosTimî
;

104 #i‚de‡ 
tmosSnvId_t


105 
uöt8_t
 
	ttmosSnvId_t
;

107 #i‚de‡ 
tmosSnvLí_t


108 
uöt8_t
 
	ttmosSnvLí_t
;

112 
uöt32_t
 (*
	tp‚SøndCB
)( );

114 
uöt32_t
 (*
	tp‚IdÀCB
)–
	tuöt32_t
 );

116 (*
p‚LSICÆibøti⁄CB
)( );

118 
uöt16_t
 (*
	tp‚TempSam∂eCB
)( );

120 (*
p‚EvítCB
)–
	tuöt32_t
 
	ttimeUs
 );

122 (*
p‚LibSètusEº‹CB
)–
	tuöt8_t
 
	tcode
, 
	tuöt32_t
 
	t°©us
 );

124 
tmosEvíts
 (*
	tpTaskEvítH™dÀrFn
)–
	ttmosTaskID
 
	tèskID
, 
	ttmosEvíts
 
	tevít
 );

126 
uöt32_t
 (*
	tp‚FœshRódCB
)–
	tuöt32_t
 
	taddr
, uöt32_à
	tnum
, uöt32_à*
	tpBuf
 );

128 
uöt32_t
 (*
	tp‚FœshWrôeCB
)–
	tuöt32_t
 
	taddr
, uöt32_à
	tnum
, uöt32_à*
	tpBuf
 );

130 
uöt32_t
 (*
	tp‚GëSysClock
)( );

133 
	sèg_bÀ_c⁄fig


135 
uöt32_t
 
MEMAddr
;

136 
uöt16_t
 
MEMLí
;

137 
uöt32_t
 
SNVAddr
;

138 
uöt16_t
 
SNVBlock
;

139 
uöt8_t
 
SNVNum
;

140 
uöt8_t
 
BufMaxLí
;

142 
uöt8_t
 
BufNumbî
;

144 
uöt8_t
 
TxNumEvít
;

145 
uöt8_t
 
TxPowî
;

146 
uöt8_t
 
WakeUpTime
;

147 
uöt8_t
 
SñRTCClock
;

150 
uöt8_t
 
RxNumEvít
;

151 
uöt8_t
 
MacAddr
[6];

152 
uöt8_t
 
C⁄√˘Numbî
;

153 
uöt8_t
 
WödowWidíög
;

154 
uöt8_t
 
WaôWödow
;

155 
p‚SøndCB
 
§™dCB
;

156 
p‚IdÀCB
 
¶ìpCB
;

157 
p‚TempSam∂eCB
 
tsCB
;

158 
p‚LSICÆibøti⁄CB
 
rcCB
;

159 
p‚LibSètusEº‹CB
 
°aCB
;

160 
p‚FœshRódCB
 
ªadFœshCB
;

161 
p‚FœshWrôeCB
 
wrôeFœshCB
;

162 } 
	tbÀC⁄fig_t
;

165 
	sèg_bÀ_∑_c⁄åﬁ_c⁄fig


167 
uöt32_t
 
txE«bÀGPIO
;

168 
uöt32_t
 
txDißbÀGPIO
;

169 
uöt32_t
 
tx_pö
;

170 
uöt32_t
 
rxE«bÀGPIO
;

171 
uöt32_t
 
rxDißbÀGPIO
;

172 
uöt32_t
 
rx_pö
;

173 } 
	tbÀPaC⁄åﬁC⁄fig_t
;

176 
	#SYS_EVENT_MSG
 (0x8000)

177 
	#INVALID_TASK_ID
 0xFF

178 
	#TASK_NO_TASK
 0xFF

	)

182 
uöt8_t
 
evít
;

183 
uöt8_t
 
°©us
;

184 } 
	ttmos_evít_hdr_t
;

189 
	#VER_FILE
 "CH57x_BLE_LIB_V1.9"

	)

190 c⁄° 
uöt8_t
 
VER_LIB
[];

191 
	#SYSTEM_TIME_MICROSEN
 625

192 
	#MS1_TO_SYSTEM_TIME
(
x
Ë((x)*1000/
SYSTEM_TIME_MICROSEN
)

193 

	)

194 
	#BREAK_UINT32
–
v¨
, 
ByãNum
 ) (
uöt8_t
)((
uöt32_t
)(((v¨Ë>>((ByãNumË* 8)Ë& 0x00FF))

	)

195 
	#HI_UINT16
(
a
Ë((◊Ë>> 8Ë& 0xFF)

	)

196 
	#LO_UINT16
(
a
Ë(◊Ë& 0xFF)

	)

197 
	#HI_UINT8
(
a
Ë((◊Ë>> 4Ë& 0x0F)

	)

198 
	#LO_UINT8
(
a
Ë(◊Ë& 0x0F)

	)

199 
	#BUILD_UINT32
(
Byã0
, 
Byã1
, 
Byã2
, 
Byã3
) \

200 ((
uöt32_t
)(((uöt32_t)(
Byã0
) & 0x00FF) \

201 + (((
uöt32_t
)(
Byã1
) & 0x00FF) << 8) \

202 + (((
uöt32_t
)(
Byã2
) & 0x00FF) << 16) \

203 + (((
uöt32_t
)(
Byã3
Ë& 0x00FFË<< 24)))

	)

204 
	#BUILD_UINT16
(
loByã
, 
hiByã
Ë((
uöt16_t
)((÷oByãË& 0x00FF)|(((hiByãË& 0x00FF)<<8)))

	)

206 
	#ACTIVE_LOW
 !

	)

207 
	#ACTIVE_HIGH
 !!

208 

	)

209 #i‚de‡
BV


210 
	#BV
(
n
Ë(1 << (n))

	)

213 #i‚de‡
BF


214 
	#BF
(
x
,
b
,
s
Ë(((xË& (b)Ë>> (s))

	)

217 #i‚de‡
MIN


218 
	#MIN
(
n
,
m
Ë((“Ë< (m)Ë? (nË: (m))

	)

221 #i‚de‡
MAX


222 
	#MAX
(
n
,
m
Ë((“Ë< (m)Ë? (mË: (n))

	)

225 #i‚de‡
ABS


226 
	#ABS
(
n
Ë((“Ë< 0Ë? -“Ë: (n))

	)

230 
	#LL_TX_POWEER_MINUS_20_DBM
 0x01

	)

231 
	#LL_TX_POWEER_MINUS_14_DBM
 0x03

	)

232 
	#LL_TX_POWEER_MINUS_8_DBM
 0x07

	)

233 
	#LL_TX_POWEER_MINUS_4_DBM
 0x0B

	)

234 
	#LL_TX_POWEER_0_DBM
 0x14

	)

235 
	#LL_TX_POWEER_1_DBM
 0x17

	)

236 
	#LL_TX_POWEER_2_DBM
 0x1A

	)

237 
	#LL_TX_POWEER_3_DBM
 0x1F

	)

238 
	#LL_TX_POWEER_4_DBM
 0x25

	)

239 
	#LL_TX_POWEER_5_DBM
 0x32

	)

242 
	#ERR_LLE_IRQ_HANDLE
 0x01

	)

243 
	#ERR_MEM_ALLOCATE_SIZE
 0x02

	)

244 
	#ERR_SET_MAC_ADDR
 0x03

	)

245 
	#ERR_GAP_ROLE_CONFIG
 0x04

	)

246 
	#ERR_CONNECT_NUMBER_CONFIG
 0x05

	)

247 
	#ERR_SNV_ADDR_CONFIG
 0x06

	)

248 
	#ERR_CLOCK_SELECT_CONFIG
 0x07

	)

251 
	#B_ADDR_LEN
 6

	)

253 
	#B_RANDOM_NUM_SIZE
 8

	)

255 
	#KEYLEN
 16

	)

257 
	#B_MAX_ADV_LEN
 31

258 

	)

259 
	#FAILURE
 0x01

260 
	#INVALIDPARAMETER
 0x02

261 
	#INVALID_TASK
 0x03

262 
	#MSG_BUFFER_NOT_AVAIL
 0x04

263 
	#INVALID_MSG_POINTER
 0x05

264 
	#INVALID_EVENT_ID
 0x06

265 
	#INVALID_TIMEOUT
 0x07

266 
	#NO_TIMER_AVAIL
 0x08

267 
	#NV_OPER_FAILED
 0x0A

268 
	#INVALID_MEM_SIZE
 0x0B

269 

	)

273 
	#bÀInvÆidTaskID
 
INVALID_TASK


274 
	#bÀEecKeyReque°Reje˘ed
 0x06

275 
	#bÀNŸRódy
 0x10

276 
	#bÀAÃódyInReque°edMode
 0x11

277 
	#bÀInc‹ª˘Mode
 0x12

278 
	#bÀMemAŒocEº‹
 0x13

279 
	#bÀNŸC⁄√˘ed
 0x14

280 
	#bÀNoResour˚s
 0x15

281 
	#bÀPídög
 0x16

282 
	#bÀTimeout
 0x17

283 
	#bÀInvÆidR™ge
 0x18

284 
	#bÀLökEn¸y±ed
 0x19

285 
	#bÀPro˚duªCom∂ëe
 0x1A

286 
	#bÀInvÆidMtuSize
 0x1B

287 

	)

290 
	#INVALID_CONNHANDLE
 0xFFFF

291 
	#LOOPBACK_CONNHANDLE
 0xFFFE

293 
	#LINK_NOT_CONNECTED
 0x00

294 
	#LINK_CONNECTED
 0x01

295 
	#LINK_AUTHENTICATED
 0x02

296 
	#LINK_BOUND
 0x04

297 
	#LINK_ENCRYPTED
 0x10

299 
	#LINKDB_STATUS_UPDATE_NEW
 0

300 
	#LINKDB_STATUS_UPDATE_REMOVED
 1

301 
	#LINKDB_STATUS_UPDATE_STATEFLAGS
 2

302 

	)

306 
	#GAP_SERVICE_UUID
 0x1800

307 
	#GATT_SERVICE_UUID
 0x1801

308 

	)

312 
	#GATT_PRIMARY_SERVICE_UUID
 0x2800

313 
	#GATT_SECONDARY_SERVICE_UUID
 0x2801

314 
	#GATT_INCLUDE_UUID
 0x2802

315 
	#GATT_CHARACTER_UUID
 0x2803

316 

	)

320 
	#GATT_CHAR_EXT_PROPS_UUID
 0x2900

321 
	#GATT_CHAR_USER_DESC_UUID
 0x2901

322 
	#GATT_CLIENT_CHAR_CFG_UUID
 0x2902

323 
	#GATT_SERV_CHAR_CFG_UUID
 0x2903

324 
	#GATT_CHAR_FORMAT_UUID
 0x2904

325 
	#GATT_CHAR_AGG_FORMAT_UUID
 0x2905

326 
	#GATT_VALID_RANGE_UUID
 0x2906

327 
	#GATT_EXT_REPORT_REF_UUID
 0x2907

328 
	#GATT_REPORT_REF_UUID
 0x2908

329 

	)

333 
	#DEVICE_NAME_UUID
 0x2A00

334 
	#APPEARANCE_UUID
 0x2A01

335 
	#PERI_PRIVACY_FLAG_UUID
 0x2A02

336 
	#RECONNECT_ADDR_UUID
 0x2A03

337 
	#PERI_CONN_PARAM_UUID
 0x2A04

338 
	#SERVICE_CHANGED_UUID
 0x2A05

339 
	#CENTRAL_ADDRESS_RESOLUTION_UUID
 0x2AA6

340 

	)

344 
	#IMMEDIATE_ALERT_SERV_UUID
 0x1802

345 
	#LINK_LOSS_SERV_UUID
 0x1803

346 
	#TX_PWR_LEVEL_SERV_UUID
 0x1804

347 
	#CURRENT_TIME_SERV_UUID
 0x1805

348 
	#REF_TIME_UPDATE_SERV_UUID
 0x1806

349 
	#NEXT_DST_CHANGE_SERV_UUID
 0x1807

350 
	#GLUCOSE_SERV_UUID
 0x1808

351 
	#THERMOMETER_SERV_UUID
 0x1809

352 
	#DEVINFO_SERV_UUID
 0x180A

353 
	#NWA_SERV_UUID
 0x180B

354 
	#HEARTRATE_SERV_UUID
 0x180D

355 
	#PHONE_ALERT_STS_SERV_UUID
 0x180E

356 
	#BATT_SERV_UUID
 0x180F

357 
	#BLOODPRESSURE_SERV_UUID
 0x1810

358 
	#ALERT_NOTIF_SERV_UUID
 0x1811

359 
	#HID_SERV_UUID
 0x1812

360 
	#SCAN_PARAM_SERV_UUID
 0x1813

361 
	#RSC_SERV_UUID
 0x1814

362 
	#CSC_SERV_UUID
 0x1816

363 
	#CYCPWR_SERV_UUID
 0x1818

364 
	#LOC_NAV_SERV_UUID
 0x1819

365 

	)

369 
	#ALERT_LEVEL_UUID
 0x2A06

370 
	#TX_PWR_LEVEL_UUID
 0x2A07

371 
	#DATE_TIME_UUID
 0x2A08

372 
	#DAY_OF_WEEK_UUID
 0x2A09

373 
	#DAY_DATE_TIME_UUID
 0x2A0A

374 
	#EXACT_TIME_256_UUID
 0x2A0C

375 
	#DST_OFFSET_UUID
 0x2A0D

376 
	#TIME_ZONE_UUID
 0x2A0E

377 
	#LOCAL_TIME_INFO_UUID
 0x2A0F

378 
	#TIME_WITH_DST_UUID
 0x2A11

379 
	#TIME_ACCURACY_UUID
 0x2A12

380 
	#TIME_SOURCE_UUID
 0x2A13

381 
	#REF_TIME_INFO_UUID
 0x2A14

382 
	#TIME_UPDATE_CTRL_PT_UUID
 0x2A16

383 
	#TIME_UPDATE_STATE_UUID
 0x2A17

384 
	#GLUCOSE_MEAS_UUID
 0x2A18

385 
	#BATT_LEVEL_UUID
 0x2A19

386 
	#TEMP_MEAS_UUID
 0x2A1C

387 
	#TEMP_TYPE_UUID
 0x2A1D

388 
	#IMEDIATE_TEMP_UUID
 0x2A1E

389 
	#MEAS_INTERVAL_UUID
 0x2A21

390 
	#BOOT_KEY_INPUT_UUID
 0x2A22

391 
	#SYSTEM_ID_UUID
 0x2A23

392 
	#MODEL_NUMBER_UUID
 0x2A24

393 
	#SERIAL_NUMBER_UUID
 0x2A25

394 
	#FIRMWARE_REV_UUID
 0x2A26

395 
	#HARDWARE_REV_UUID
 0x2A27

396 
	#SOFTWARE_REV_UUID
 0x2A28

397 
	#MANUFACTURER_NAME_UUID
 0x2A29

398 
	#IEEE_11073_CERT_DATA_UUID
 0x2A2A

399 
	#CURRENT_TIME_UUID
 0x2A2B

400 
	#SCAN_REFRESH_UUID
 0x2A31

401 
	#BOOT_KEY_OUTPUT_UUID
 0x2A32

402 
	#BOOT_MOUSE_INPUT_UUID
 0x2A33

403 
	#GLUCOSE_CONTEXT_UUID
 0x2A34

404 
	#BLOODPRESSURE_MEAS_UUID
 0x2A35

405 
	#IMEDIATE_CUFF_PRESSURE_UUID
 0x2A36

406 
	#HEARTRATE_MEAS_UUID
 0x2A37

407 
	#BODY_SENSOR_LOC_UUID
 0x2A38

408 
	#HEARTRATE_CTRL_PT_UUID
 0x2A39

409 
	#NETWORK_AVAIL_UUID
 0x2A3E

410 
	#ALERT_STATUS_UUID
 0x2A3F

411 
	#RINGER_CTRL_PT_UUID
 0x2A40

412 
	#RINGER_SETTING_UUID
 0x2A41

413 
	#ALERT_CAT_ID_BMASK_UUID
 0x2A42

414 
	#ALERT_CAT_ID_UUID
 0x2A43

415 
	#ALERT_NOTIF_CTRL_PT_UUID
 0x2A44

416 
	#UNREAD_ALERT_STATUS_UUID
 0x2A45

417 
	#NEW_ALERT_UUID
 0x2A46

418 
	#SUP_NEW_ALERT_CAT_UUID
 0x2A47

419 
	#SUP_UNREAD_ALERT_CAT_UUID
 0x2A48

420 
	#BLOODPRESSURE_FEATURE_UUID
 0x2A49

421 
	#HID_INFORMATION_UUID
 0x2A4A

422 
	#REPORT_MAP_UUID
 0x2A4B

423 
	#HID_CTRL_PT_UUID
 0x2A4C

424 
	#REPORT_UUID
 0x2A4D

425 
	#PROTOCOL_MODE_UUID
 0x2A4E

426 
	#SCAN_INTERVAL_WINDOW_UUID
 0x2A4F

427 
	#PNP_ID_UUID
 0x2A50

428 
	#GLUCOSE_FEATURE_UUID
 0x2A51

429 
	#RECORD_CTRL_PT_UUID
 0x2A52

430 
	#RSC_MEAS_UUID
 0x2A53

431 
	#RSC_FEATURE_UUID
 0x2A54

432 
	#SC_CTRL_PT_UUID
 0x2A55

433 
	#CSC_MEAS_UUID
 0x2A5B

434 
	#CSC_FEATURE_UUID
 0x2A5C

435 
	#SENSOR_LOC_UUID
 0x2A5D

436 
	#CYCPWR_MEAS_UUID
 0x2A63

437 
	#CYCPWR_VECTOR_UUID
 0x2A64

438 
	#CYCPWR_FEATURE_UUID
 0x2A65

439 
	#CYCPWR_CTRL_PT_UUID
 0x2A66

440 
	#LOC_SPEED_UUID
 0x2A67

441 
	#NAV_UUID
 0x2A68

442 
	#POS_QUALITY_UUID
 0x2A69

443 
	#LN_FEATURE_UUID
 0x2A6A

444 
	#LN_CTRL_PT_UUID
 0x2A6B

445 
	#ELE_UUID
 0x2A6C

446 
	#PRESSURE_UUID
 0x2A6D

447 
	#TEMP_UUID
 0x2A6E

448 
	#HUMI_UUID
 0x2A6F

449 
	#TRUE_WIND_SPEED_UUID
 0x2A70

450 
	#TRUE_WIND_DIRECTION_UUID
 0x2A71

451 
	#URI_UUID
 0x2AB6

452 
	#MEDIA_STATE_UUID
 0x2BA3

453 
	#MEDIA_CTRL_PT_UUID
 0x2BA4

454 
	#MEDIA_CTRL_PT_OS_UUID
 0x2BA5

455 
	#CALL_STATE_UUID
 0x2BBD

456 
	#CALL_CTRL_PT_UUID
 0x2BBE

457 
	#CALL_CTRL_PT_OO_UUID
 0x2BBF

458 
	#TERM_REASON_UUID
 0x2BC0

459 
	#INCOMING_CALL_UUID
 0x2BC1

460 
	#MUTE_UUID
 0x2BC3

461 

	)

465 
	#GATT_UNITLESS_UUID
 0x2700

466 
	#GATT_UNIT_LENGTH_METER_UUID
 0x2701

467 
	#GATT_UNIT_MASS_KGRAM_UUID
 0x2702

468 
	#GATT_UNIT_TIME_SECOND_UUID
 0x2703

469 
	#GATT_UNIT_ELECTRIC_CURRENT_A_UUID
 0x2704

470 
	#GATT_UNIT_THERMODYN_TEMP_K_UUID
 0x2705

471 
	#GATT_UNIT_AMOUNT_SUBSTANCE_M_UUID
 0x2706

472 
	#GATT_UNIT_LUMINOUS_INTENSITY_C_UUID
 0x2707

473 

	)

474 
	#GATT_UNIT_AREA_SQ_MTR_UUID
 0x2710

475 
	#GATT_UNIT_VOLUME_CUBIC_MTR_UUID
 0x2711

476 
	#GATT_UNIT_VELOCITY_MPS_UUID
 0x2712

477 
	#GATT_UNIT_ACCELERATION_MPS_SQ_UUID
 0x2713

478 
	#GATT_UNIT_WAVENUMBER_RM_UUID
 0x2714

479 
	#GATT_UNIT_DENSITY_KGPCM_UUID
 0x2715

480 
	#GATT_UNIT_SURFACE_DENSITY_KGPSM_UUID
 0x2716

481 
	#GATT_UNIT_SPECIFIC_VOLUME_CMPKG_UUID
 0x2717

482 
	#GATT_UNIT_CURRENT_DENSITY_APSM_UUID
 0x2718

483 
	#GATT_UNIT_MAG_FIELD_STRENGTH_UUID
 0x2719

484 
	#GATT_UNIT_AMOUNT_CONC_MPCM_UUID
 0x271A

485 
	#GATT_UNIT_MASS_CONC_KGPCM_UUID
 0x271B

486 
	#GATT_UNIT_LUMINANCE_CPSM_UUID
 0x271C

487 
	#GATT_UNIT_REFRACTIVE_INDEX_UUID
 0x271D

488 
	#GATT_UNIT_RELATIVE_PERMEABLILTY_UUID
 0x271E

489 
	#GATT_UNIT_PLANE_ANGLE_RAD_UUID
 0x2720

490 
	#GATT_UNIT_SOLID_ANGLE_STERAD_UUID
 0x2721

491 
	#GATT_UNIT_FREQUENCY_HTZ_UUID
 0x2722

492 
	#GATT_UNIT_FORCE_NEWTON_UUID
 0x2723

493 
	#GATT_UNIT_PRESSURE_PASCAL_UUID
 0x2724

494 
	#GATT_UNIT_ENERGY_JOULE_UUID
 0x2725

495 
	#GATT_UNIT_POWER_WATT_UUID
 0x2726

496 
	#GATT_UNIT_E_CHARGE_C_UUID
 0x2727

497 
	#GATT_UNIT_E_POTENTIAL_DIF_V_UUID
 0x2728

498 

	)

499 
	#GATT_UNIT_CELSIUS_TEMP_DC_UUID
 0x272F

500 

	)

501 
	#GATT_UNIT_TIME_MINUTE_UUID
 0x2760

502 
	#GATT_UNIT_TIME_HOUR_UUID
 0x2761

503 
	#GATT_UNIT_TIME_DAY_UUID
 0x2762

504 
	#GATT_UNIT_PLANE_ANGLE_DEGREE_UUID
 0x2763

505 
	#GATT_UNIT_PLANE_ANGLE_MINUTE_UUID
 0x2764

506 
	#GATT_UNIT_PLANE_ANGLE_SECOND_UUID
 0x2765

507 
	#GATT_UNIT_AREA_HECTARE_UUID
 0x2766

508 
	#GATT_UNIT_VOLUME_LITRE_UUID
 0x2767

509 
	#GATT_UNIT_MASS_TONNE_UUID
 0x2768

510 

	)

511 
	#GATT_UINT_LENGTH_YARD_UUID
 0x27A0

512 
	#GATT_UNIT_LENGTH_PARSEC_UUID
 0x27A1

513 
	#GATT_UNIT_LENGTH_INCH_UUID
 0x27A2

514 
	#GATT_UNIT_LENGTH_FOOT_UUID
 0x27A3

515 
	#GATT_UNIT_LENGTH_MILE_UUID
 0x27A4

516 
	#GATT_UNIT_PRESSURE_PFPSI_UUID
 0x27A5

517 
	#GATT_UNIT_VELOCITY_KMPH_UUID
 0x27A6

518 
	#GATT_UNIT_VELOCITY_MPH_UUID
 0x27A7

519 
	#GATT_UNIT_ANGULAR_VELOCITY_RPM_UUID
 0x27A8

520 
	#GATT_UNIT_ENERGY_GCAL_UUID
 0x27A9

521 
	#GATT_UNIT_ENERGY_KCAL_UUID
 0x27AA

522 
	#GATT_UNIT_ENERGY_KWH_UUID
 0x27AB

523 
	#GATT_UNIT_THERMODYN_TEMP_DF_UUID
 0x27AC

524 
	#GATT_UNIT_PERCENTAGE_UUID
 0x27AD

525 
	#GATT_UNIT_PER_MILE_UUID
 0x27AE

526 
	#GATT_UNIT_PERIOD_BPM_UUID
 0x27AF

527 
	#GATT_UNIT_E_CHARGE_AH_UUID
 0x27B0

528 
	#GATT_UNIT_MASS_DENSITY_MGPD_UUID
 0x27B1

529 
	#GATT_UNIT_MASS_DENSITY_MMPL_UUID
 0x27B2

530 
	#GATT_UNIT_TIME_YEAR_UUID
 0x27B3

531 
	#GATT_UNIT_TIME_MONTH_UUID
 0x27B4

532 

	)

535 
	#GATT_MSG_EVENT
 0xB0

536 
	#GATT_SERV_MSG_EVENT
 0xB1

538 
	#GAP_MSG_EVENT
 0xD0

539 

	)

540 
	#ATT_MTU_SIZE
 23

541 
	#ATT_MAX_MTU_SIZE
 247

543 
	#ATT_ERROR_RSP
 0x01

544 
	#ATT_EXCHANGE_MTU_REQ
 0x02

545 
	#ATT_EXCHANGE_MTU_RSP
 0x03

546 
	#ATT_FIND_INFO_REQ
 0x04

547 
	#ATT_FIND_INFO_RSP
 0x05

548 
	#ATT_FIND_BY_TYPE_VALUE_REQ
 0x06

549 
	#ATT_FIND_BY_TYPE_VALUE_RSP
 0x07

550 
	#ATT_READ_BY_TYPE_REQ
 0x08

551 
	#ATT_READ_BY_TYPE_RSP
 0x09

552 
	#ATT_READ_REQ
 0x0a

553 
	#ATT_READ_RSP
 0x0b

554 
	#ATT_READ_BLOB_REQ
 0x0c

555 
	#ATT_READ_BLOB_RSP
 0x0d

556 
	#ATT_READ_MULTI_REQ
 0x0e

557 
	#ATT_READ_MULTI_RSP
 0x0f

558 
	#ATT_READ_BY_GRP_TYPE_REQ
 0x10

559 
	#ATT_READ_BY_GRP_TYPE_RSP
 0x11

560 
	#ATT_WRITE_REQ
 0x12

561 
	#ATT_WRITE_RSP
 0x13

562 
	#ATT_PREPARE_WRITE_REQ
 0x16

563 
	#ATT_PREPARE_WRITE_RSP
 0x17

564 
	#ATT_EXECUTE_WRITE_REQ
 0x18

565 
	#ATT_EXECUTE_WRITE_RSP
 0x19

566 
	#ATT_HANDLE_VALUE_NOTI
 0x1b

567 
	#ATT_HANDLE_VALUE_IND
 0x1d

568 
	#ATT_HANDLE_VALUE_CFM
 0x1e

569 

	)

570 
	#ATT_WRITE_CMD
 0x52

571 
	#ATT_SIGNED_WRITE_CMD
 0xD2

572 

	)

574 
	#ATT_ERR_INVALID_HANDLE
 0x01

575 
	#ATT_ERR_READ_NOT_PERMITTED
 0x02

576 
	#ATT_ERR_WRITE_NOT_PERMITTED
 0x03

577 
	#ATT_ERR_INVALID_PDU
 0x04

578 
	#ATT_ERR_INSUFFICIENT_AUTHEN
 0x05

579 
	#ATT_ERR_UNSUPPORTED_REQ
 0x06

580 
	#ATT_ERR_INVALID_OFFSET
 0x07

581 
	#ATT_ERR_INSUFFICIENT_AUTHOR
 0x08

582 
	#ATT_ERR_PREPARE_QUEUE_FULL
 0x09

583 
	#ATT_ERR_ATTR_NOT_FOUND
 0x0a

584 
	#ATT_ERR_ATTR_NOT_LONG
 0x0b

585 
	#ATT_ERR_INSUFFICIENT_KEY_SIZE
 0x0c

586 
	#ATT_ERR_INVALID_VALUE_SIZE
 0x0d

587 
	#ATT_ERR_UNLIKELY
 0x0e

588 
	#ATT_ERR_INSUFFICIENT_ENCRYPT
 0x0f

589 
	#ATT_ERR_UNSUPPORTED_GRP_TYPE
 0x10

590 
	#ATT_ERR_INSUFFICIENT_RESOURCES
 0x11

591 
	#ATT_ERR_INVALID_VALUE
 0x80

592 

	)

597 
	#ATT_ATTR_HANDLE_IDX
–
i
 ) ( (iË* (2 + 2Ë)

	)

598 
	#ATT_GRP_END_HANDLE_IDX
–
i
 ) ( 
	`ATT_ATTR_HANDLE_IDX
–(iËË+ 2 )

	)

600 
	#ATT_ATTR_HANDLE
–
öfo
, 
i
 ) ( 
	`BUILD_UINT16
–(öfo)[
	`ATT_ATTR_HANDLE_IDX
((i))], \

601 (
öfo
)[
	`ATT_ATTR_HANDLE_IDX
((
i
))+1] ) )

	)

602 
	#ATT_GRP_END_HANDLE
–
öfo
, 
i
 ) ( 
	`BUILD_UINT16
–(öfo)[
	`ATT_GRP_END_HANDLE_IDX
((i))], \

603 (
öfo
)[
	`ATT_GRP_END_HANDLE_IDX
((
i
))+1] ) )

	)

607 
	#ATT_FLOW_CTRL_VIOLATED_EVENT
 0x7E

608 
	#ATT_MTU_UPDATED_EVENT
 0x7F

609 

	)

613 
	#ATT_BT_UUID_SIZE
 2

	)

615 
	#ATT_UUID_SIZE
 16

	)

619 
	#GATT_PERMIT_READ
 0x01

620 
	#GATT_PERMIT_WRITE
 0x02

621 
	#GATT_PERMIT_AUTHEN_READ
 0x04

622 
	#GATT_PERMIT_AUTHEN_WRITE
 0x08

623 
	#GATT_PERMIT_AUTHOR_READ
 0x10

624 
	#GATT_PERMIT_AUTHOR_WRITE
 0x20

625 
	#GATT_PERMIT_ENCRYPT_READ
 0x40

626 
	#GATT_PERMIT_ENCRYPT_WRITE
 0x80

627 

	)

629 
	#GATT_PROP_BCAST
 0x01

630 
	#GATT_PROP_READ
 0x02

631 
	#GATT_PROP_WRITE_NO_RSP
 0x04

632 
	#GATT_PROP_WRITE
 0x08

633 
	#GATT_PROP_NOTIFY
 0x10

634 
	#GATT_PROP_INDICATE
 0x20

635 
	#GATT_PROP_AUTHEN
 0x40

636 
	#GATT_PROP_EXTENDED
 0x80

637 

	)

639 
	#GATT_LOCAL_READ
 0xFF

	)

640 
	#GATT_LOCAL_WRITE
 0xFE

	)

643 
	#GATT_MIN_ENCRYPT_KEY_SIZE
 7

644 
	#GATT_MAX_ENCRYPT_KEY_SIZE
 16

645 

	)

647 
	#GATT_INVALID_HANDLE
 0x0000

648 
	#GATT_MIN_HANDLE
 0x0001

649 
	#GATT_MAX_HANDLE
 0xFFFF

650 

	)

651 
	#GATT_MAX_MTU
 0xFFFF

652 

	)

654 
	#g©tPîmôRód
–
a
 ) ( (aË& 
GATT_PERMIT_READ
 )

	)

655 
	#g©tPîmôWrôe
–
a
 ) ( (aË& 
GATT_PERMIT_WRITE
 )

	)

656 
	#g©tPîmôAuthíRód
–
a
 ) ( (aË& 
GATT_PERMIT_AUTHEN_READ
 )

	)

657 
	#g©tPîmôAuthíWrôe
–
a
 ) ( (aË& 
GATT_PERMIT_AUTHEN_WRITE
 )

	)

658 
	#g©tPîmôAuth‹Ród
–
a
 ) ( (aË& 
GATT_PERMIT_AUTHOR_READ
 )

	)

659 
	#g©tPîmôAuth‹Wrôe
–
a
 ) ( (aË& 
GATT_PERMIT_AUTHOR_WRITE
 )

	)

660 
	#g©tPîmôEn¸y±Ród
–
a
 ) ( (aË& 
GATT_PERMIT_ENCRYPT_READ
 )

	)

661 
	#g©tPîmôEn¸y±Wrôe
–
a
 ) ( (aË& 
GATT_PERMIT_ENCRYPT_WRITE
 )

	)

664 
	#g©tPrim¨ySîvi˚Ty≥
–
t
 ) ( 
	`ATT_Com∑ªUUID
–
¥im¨ySîvi˚UUID
, 
ATT_BT_UUID_SIZE
, (t).
uuid
, (t).
Àn
 ) )

	)

665 
	#g©tSec⁄d¨ySîvi˚Ty≥
–
t
 ) ( 
	`ATT_Com∑ªUUID
–
£c⁄d¨ySîvi˚UUID
, 
ATT_BT_UUID_SIZE
, (t).
uuid
, (t).
Àn
 ) )

	)

666 
	#g©tCh¨a˘îTy≥
–
t
 ) ( 
	`ATT_Com∑ªUUID
–
ch¨a˘îUUID
, 
ATT_BT_UUID_SIZE
, (t).
uuid
, (t).
Àn
 ) )

	)

667 
	#g©tIn˛udeTy≥
–
t
 ) ( 
	`ATT_Com∑ªUUID
–
ö˛udeUUID
, 
ATT_BT_UUID_SIZE
, (t).
uuid
, (t).
Àn
 ) )

	)

668 
	#g©tSîvi˚Ty≥
–
t
 ) ( 
	`g©tPrim¨ySîvi˚Ty≥
–—ËË|| 
	`g©tSec⁄d¨ySîvi˚Ty≥
–—ËË)

	)

669 
	#GATT_MAX_NUM_CONN
 (4)

	)

672 
	#GATT_CLIENT_CFG_NOTIFY
 0x0001

673 
	#GATT_CLIENT_CFG_INDICATE
 0x0002

674 

	)

675 
	#GATT_CFG_NO_OPERATION
 0x0000

676 

	)

678 
	#GATT_ALL_SERVICES
 0xFFFFFFFF

	)

681 
	#GATT_NUM_ATTRS
–
©ås
 ) ( –©å†Ë/ –
g©tAâribuã_t
 ) )

	)

684 
	#GATT_SERVICE_HANDLE
–
©ås
 ) ( (©ås)[0].
h™dÀ
 )

	)

687 
	#GATT_INCLUDED_HANDLE
–
©ås
, 
i
 ) ( *((
uöt16_t
 *)(◊ârs)[(i)].
pVÆue
)Ë)

	)

690 
	#GATT_CCC_TBL
–
pVÆue
 ) ( (
g©tCh¨Cfg_t
 *)(*((
PTR_TYPE
)(&pVÆue))))

	)

693 
	#GAP_MSG_EVENT_DEFINES


694 
	#GAP_DEVICE_INIT_DONE_EVENT
 0x00

695 
	#GAP_DEVICE_DISCOVERY_EVENT
 0x01

696 
	#GAP_ADV_DATA_UPDATE_DONE_EVENT
 0x02

697 
	#GAP_MAKE_DISCOVERABLE_DONE_EVENT
 0x03

698 
	#GAP_END_DISCOVERABLE_DONE_EVENT
 0x04

699 
	#GAP_LINK_ESTABLISHED_EVENT
 0x05

700 
	#GAP_LINK_TERMINATED_EVENT
 0x06

701 
	#GAP_LINK_PARAM_UPDATE_EVENT
 0x07

702 
	#GAP_RANDOM_ADDR_CHANGED_EVENT
 0x08

703 
	#GAP_SIGNATURE_UPDATED_EVENT
 0x09

704 
	#GAP_AUTHENTICATION_COMPLETE_EVENT
 0x0A

705 
	#GAP_PASSKEY_NEEDED_EVENT
 0x0B

706 
	#GAP_SLAVE_REQUESTED_SECURITY_EVENT
 0x0C

707 
	#GAP_DEVICE_INFO_EVENT
 0x0D

708 
	#GAP_BOND_COMPLETE_EVENT
 0x0E

709 
	#GAP_PAIRING_REQ_EVENT
 0x0F

710 
	#GAP_DIRECT_DEVICE_INFO_EVENT
 0x10

711 

	)

713 
	#GAP_PROFILE_BROADCASTER
 0x01

714 
	#GAP_PROFILE_OBSERVER
 0x02

715 
	#GAP_PROFILE_PERIPHERAL
 0x04

716 
	#GAP_PROFILE_CENTRAL
 0x08

717 

	)

719 
	#bÀGAPU£rC™˚Àd
 0x30

720 
	#bÀGAPC⁄nNŸAc˚±abÀ
 0x31

721 
	#bÀGAPB⁄dReje˘ed
 0x32

722 

	)

723 
	#GAP_DEVICE_NAME_LEN
 21

724 

	)

732 
	#GAP_CONNHANDLE_INIT
 0xFFFE

733 
	#GAP_CONNHANDLE_ALL
 0xFFFF

734 

	)

737 
	#GAP_PRIVACY_DISABLED
 0x00

	)

738 
	#GAP_PRIVACY_ENABLED
 0x01

	)

741 
	#GGS_DEVICE_NAME_ATT
 0

742 
	#GGS_APPEARANCE_ATT
 1

743 
	#GGS_PERI_PRIVACY_FLAG_ATT
 2

744 
	#GGS_RECONNCT_ADDR_ATT
 3

745 
	#GGS_PERI_CONN_PARAM_ATT
 4

746 
	#GGS_PERI_PRIVACY_FLAG_PROPS
 5

747 
	#GGS_W_PERMIT_DEVICE_NAME_ATT
 6

748 
	#GGS_W_PERMIT_APPEARANCE_ATT
 7

749 
	#GGS_W_PERMIT_PRIVACY_FLAG_ATT
 8

750 
	#GGS_CENT_ADDR_RES_ATT
 9

752 
	#GAP_SERVICE
 0x00000001

	)

756 
	#TGAP_GEN_DISC_ADV_MIN
 0

757 
	#TGAP_LIM_ADV_TIMEOUT
 1

758 
	#TGAP_DISC_SCAN
 2

759 

	)

761 
	#TGAP_DISC_ADV_INT_MIN
 3

762 
	#TGAP_DISC_ADV_INT_MAX
 4

763 
	#TGAP_DISC_SCAN_INT
 5

764 
	#TGAP_DISC_SCAN_WIND
 6

765 

	)

767 
	#TGAP_CONN_EST_INT_MIN
 7

768 
	#TGAP_CONN_EST_INT_MAX
 8

769 
	#TGAP_CONN_EST_SCAN_INT
 9

770 
	#TGAP_CONN_EST_SCAN_WIND
 10

771 
	#TGAP_CONN_EST_HIGH_SCAN_INT
 11

772 
	#TGAP_CONN_EST_HIGH_SCAN_WIND
 12

773 
	#TGAP_CONN_EST_SUPERV_TIMEOUT
 13

774 
	#TGAP_CONN_EST_LATENCY
 14

775 
	#TGAP_CONN_EST_MIN_CE_LEN
 15

776 
	#TGAP_CONN_EST_MAX_CE_LEN
 16

777 

	)

779 
	#TGAP_PRIVATE_ADDR_INT
 17

780 
	#TGAP_SM_TIMEOUT
 18

781 
	#TGAP_SM_MIN_KEY_LEN
 19

782 
	#TGAP_SM_MAX_KEY_LEN
 20

783 
	#TGAP_FILTER_ADV_REPORTS
 21

784 
	#TGAP_SCAN_RSSI_MIN
 22

785 
	#TGAP_REJECT_CONN_PARAMS
 23

786 
	#TGAP_AUTH_TASK_ID
 24

787 
	#TGAP_PARAMID_MAX
 25

788 

	)

790 
	#DEVDISC_MODE_NONDISCOVERABLE
 0x00

791 
	#DEVDISC_MODE_GENERAL
 0x01

792 
	#DEVDISC_MODE_LIMITED
 0x02

793 
	#DEVDISC_MODE_ALL
 0x03

794 

	)

796 
	#ADDRTYPE_PUBLIC
 0x00

797 
	#ADDRTYPE_STATIC
 0x01

798 
	#ADDRTYPE_PRIVATE_NONRESOLVE
 0x02

799 
	#ADDRTYPE_PRIVATE_RESOLVE
 0x03

800 

	)

802 
	#GAP_ADTYPE_ADV_IND
 0x00

803 
	#GAP_ADTYPE_ADV_HDC_DIRECT_IND
 0x01

804 
	#GAP_ADTYPE_ADV_SCAN_IND
 0x02

805 
	#GAP_ADTYPE_ADV_NONCONN_IND
 0x03

806 
	#GAP_ADTYPE_ADV_LDC_DIRECT_IND
 0x04

807 

	)

809 
	#GAP_ADVERTISEMENT_REPORT_TYPE_DEFINES


	)

810 
	#GAP_ADRPT_ADV_IND
 0x00

811 
	#GAP_ADRPT_ADV_DIRECT_IND
 0x01

812 
	#GAP_ADRPT_ADV_SCAN_IND
 0x02

813 
	#GAP_ADRPT_ADV_NONCONN_IND
 0x03

814 
	#GAP_ADRPT_SCAN_RSP
 0x04

815 

	)

817 
	#GAP_FILTER_POLICY_ALL
 0x00

818 
	#GAP_FILTER_POLICY_WHITE_SCAN
 0x01

819 
	#GAP_FILTER_POLICY_WHITE_CON
 0x02

820 
	#GAP_FILTER_POLICY_WHITE
 0x03

821 

	)

823 
	#GAP_PASSCODE_MAX
 999999

	)

828 
	#GAP_INIT_SIGN_COUNTER
 0xFFFFFFFF

	)

831 
	#GAP_ADVCHAN_37
 0x01

832 
	#GAP_ADVCHAN_38
 0x02

833 
	#GAP_ADVCHAN_39
 0x04

834 
	#GAP_ADVCHAN_ALL
 (
GAP_ADVCHAN_37
 | 
GAP_ADVCHAN_38
 | 
GAP_ADVCHAN_39
)

835 

	)

837 
	#GAP_ADTYPE_FLAGS
 0x01

838 
	#GAP_ADTYPE_16BIT_MORE
 0x02

839 
	#GAP_ADTYPE_16BIT_COMPLETE
 0x03

840 
	#GAP_ADTYPE_32BIT_MORE
 0x04

841 
	#GAP_ADTYPE_32BIT_COMPLETE
 0x05

842 
	#GAP_ADTYPE_128BIT_MORE
 0x06

843 
	#GAP_ADTYPE_128BIT_COMPLETE
 0x07

844 
	#GAP_ADTYPE_LOCAL_NAME_SHORT
 0x08

845 
	#GAP_ADTYPE_LOCAL_NAME_COMPLETE
 0x09

846 
	#GAP_ADTYPE_POWER_LEVEL
 0x0A

847 
	#GAP_ADTYPE_OOB_CLASS_OF_DEVICE
 0x0D

848 
	#GAP_ADTYPE_OOB_SIMPLE_PAIRING_HASHC
 0x0E

849 
	#GAP_ADTYPE_OOB_SIMPLE_PAIRING_RANDR
 0x0F

850 
	#GAP_ADTYPE_SM_TK
 0x10

851 
	#GAP_ADTYPE_SM_OOB_FLAG
 0x11

852 
	#GAP_ADTYPE_SLAVE_CONN_INTERVAL_RANGE
 0x12

853 
	#GAP_ADTYPE_SIGNED_DATA
 0x13

854 
	#GAP_ADTYPE_SERVICES_LIST_16BIT
 0x14

855 
	#GAP_ADTYPE_SERVICES_LIST_128BIT
 0x15

856 
	#GAP_ADTYPE_SERVICE_DATA
 0x16

857 
	#GAP_ADTYPE_PUBLIC_TARGET_ADDR
 0x17

858 
	#GAP_ADTYPE_RANDOM_TARGET_ADDR
 0x18

859 
	#GAP_ADTYPE_APPEARANCE
 0x19

860 
	#GAP_ADTYPE_ADV_INTERVAL
 0x1A

861 
	#GAP_ADTYPE_LE_BD_ADDR
 0x1B

862 
	#GAP_ADTYPE_LE_ROLE
 0x1C

863 
	#GAP_ADTYPE_SIMPLE_PAIRING_HASHC_256
 0x1D

864 
	#GAP_ADTYPE_SIMPLE_PAIRING_RANDR_256
 0x1E

865 
	#GAP_ADTYPE_SERVICE_DATA_32BIT
 0x20

866 
	#GAP_ADTYPE_SERVICE_DATA_128BIT
 0x21

867 
	#GAP_ADTYPE_3D_INFO_DATA
 0x3D

868 
	#GAP_ADTYPE_MANUFACTURER_SPECIFIC
 0xFF

869 

	)

871 
	#GAP_ADTYPE_FLAGS_LIMITED
 0x01

872 
	#GAP_ADTYPE_FLAGS_GENERAL
 0x02

873 
	#GAP_ADTYPE_FLAGS_BREDR_NOT_SUPPORTED
 0x04

874 

	)

876 
	#GAP_APPEARE_UNKNOWN
 0x0000

877 
	#GAP_APPEARE_GENERIC_PHONE
 0x0040

878 
	#GAP_APPEARE_GENERIC_COMPUTER
 0x0080

879 
	#GAP_APPEARE_GENERIC_WATCH
 0x00C0

880 
	#GAP_APPEARE_WATCH_SPORTS
 0x00C1

881 
	#GAP_APPEARE_GENERIC_CLOCK
 0x0100

882 
	#GAP_APPEARE_GENERIC_DISPLAY
 0x0140

883 
	#GAP_APPEARE_GENERIC_RC
 0x0180

884 
	#GAP_APPEARE_GENERIC_EYE_GALSSES
 0x01C0

885 
	#GAP_APPEARE_GENERIC_TAG
 0x0200

886 
	#GAP_APPEARE_GENERIC_KEYRING
 0x0240

887 
	#GAP_APPEARE_GENERIC_MEDIA_PLAYER
 0x0280

888 
	#GAP_APPEARE_GENERIC_BARCODE_SCANNER
 0x02C0

889 
	#GAP_APPEARE_GENERIC_THERMOMETER
 0x0300

890 
	#GAP_APPEARE_GENERIC_THERMO_EAR
 0x0301

891 
	#GAP_APPEARE_GENERIC_HR_SENSOR
 0x0340

892 
	#GAP_APPEARE_GENERIC_HRS_BELT
 0x0341

893 
	#GAP_APPEARE_GENERIC_BLOOD_PRESSURE
 0x0380

894 
	#GAP_APPEARE_GENERIC_BP_ARM
 0x0381

895 
	#GAP_APPEARE_GENERIC_BP_WRIST
 0x0382

896 
	#GAP_APPEARE_GENERIC_HID
 0x03C0

897 
	#GAP_APPEARE_HID_KEYBOARD
 0x03C1

898 
	#GAP_APPEARE_HID_MOUSE
 0x03C2

899 
	#GAP_APPEARE_HID_JOYSTIC
 0x03C3

900 
	#GAP_APPEARE_HID_GAMEPAD
 0x03C4

901 
	#GAP_APPEARE_HID_DIGITIZER_TYABLET
 0x03C5

902 
	#GAP_APPEARE_HID_DIGITAL_CARDREADER
 0x03C6

903 
	#GAP_APPEARE_HID_DIGITAL_PEN
 0x03C7

904 
	#GAP_APPEARE_HID_BARCODE_SCANNER
 0x03C8

905 

	)

908 
	#GAPROLE_PROFILEROLE
 0x300

909 
	#GAPROLE_IRK
 0x301

910 
	#GAPROLE_SRK
 0x302

911 
	#GAPROLE_SIGNCOUNTER
 0x303

912 
	#GAPROLE_BD_ADDR
 0x304

913 
	#GAPROLE_ADVERT_ENABLED
 0x305

914 
	#GAPROLE_ADVERT_DATA
 0x306

915 
	#GAPROLE_SCAN_RSP_DATA
 0x307

916 
	#GAPROLE_ADV_EVENT_TYPE
 0x308

917 
	#GAPROLE_ADV_DIRECT_TYPE
 0x309

918 
	#GAPROLE_ADV_DIRECT_ADDR
 0x30A

919 
	#GAPROLE_ADV_CHANNEL_MAP
 0x30B

920 
	#GAPROLE_ADV_FILTER_POLICY
 0x30C

921 
	#GAPROLE_STATE
 0x30D

922 
	#GAPROLE_MAX_SCAN_RES
 0x30E

923 
	#GAPROLE_MIN_CONN_INTERVAL
 0x311

924 
	#GAPROLE_MAX_CONN_INTERVAL
 0x312

925 

	)

928 
	#GAPBOND_PERI_PAIRING_MODE
 0x400

929 
	#GAPBOND_PERI_MITM_PROTECTION
 0x401

930 
	#GAPBOND_PERI_IO_CAPABILITIES
 0x402

931 
	#GAPBOND_PERI_OOB_ENABLED
 0x403

932 
	#GAPBOND_PERI_OOB_DATA
 0x404

933 
	#GAPBOND_PERI_BONDING_ENABLED
 0x405

934 
	#GAPBOND_PERI_KEY_DIST_LIST
 0x406

935 
	#GAPBOND_PERI_DEFAULT_PASSCODE
 0x407

936 
	#GAPBOND_CENT_PAIRING_MODE
 0x408

937 
	#GAPBOND_CENT_MITM_PROTECTION
 0x409

938 
	#GAPBOND_CENT_IO_CAPABILITIES
 0x40A

939 
	#GAPBOND_CENT_OOB_ENABLED
 0x40B

940 
	#GAPBOND_CENT_OOB_DATA
 0x40C

941 
	#GAPBOND_CENT_BONDING_ENABLED
 0x40D

942 
	#GAPBOND_CENT_KEY_DIST_LIST
 0x40E

943 
	#GAPBOND_CENT_DEFAULT_PASSCODE
 0x40F

944 
	#GAPBOND_ERASE_ALLBONDS
 0x410

945 
	#GAPBOND_AUTO_FAIL_PAIRING
 0x411

946 
	#GAPBOND_AUTO_FAIL_REASON
 0x412

947 
	#GAPBOND_KEYSIZE
 0x413

948 
	#GAPBOND_AUTO_SYNC_WL
 0x414

949 
	#GAPBOND_BOND_COUNT
 0x415

950 
	#GAPBOND_BOND_FAIL_ACTION
 0x416

951 
	#GAPBOND_ERASE_SINGLEBOND
 0x417

952 
	#GAPBOND_BOND_AUTO
 0x418

953 
	#GAPBOND_BOND_UPDATE
 0x419

954 
	#GAPBOND_DISABLE_SINGLEBOND
 0x41A

955 
	#GAPBOND_ENABLE_SINGLEBOND
 0x41B

956 
	#GAPBOND_DISABLE_ALLBONDS
 0x41C

957 
	#GAPBOND_ENABLE_ALLBONDS
 0x41D

958 
	#GAPBOND_ERASE_AUTO
 0x41E

959 
	#GAPBOND_AUTO_SYNC_RL
 0x41F

960 
	#GAPBOND_SET_ENC_PARAMS
 0x420

961 

	)

963 
	#GAPBOND_PAIRING_MODE_NO_PAIRING
 0x00

964 
	#GAPBOND_PAIRING_MODE_WAIT_FOR_REQ
 0x01

965 
	#GAPBOND_PAIRING_MODE_INITIATE
 0x02

966 

	)

968 
	#GAPBOND_IO_CAP_DISPLAY_ONLY
 0x00

969 
	#GAPBOND_IO_CAP_DISPLAY_YES_NO
 0x01

970 
	#GAPBOND_IO_CAP_KEYBOARD_ONLY
 0x02

971 
	#GAPBOND_IO_CAP_NO_INPUT_NO_OUTPUT
 0x03

972 
	#GAPBOND_IO_CAP_KEYBOARD_DISPLAY
 0x04

973 

	)

975 
	#GAPBOND_KEYDIST_SENCKEY
 0x01

976 
	#GAPBOND_KEYDIST_SIDKEY
 0x02

977 
	#GAPBOND_KEYDIST_SSIGN
 0x04

978 
	#GAPBOND_KEYDIST_SLINK
 0x08

979 
	#GAPBOND_KEYDIST_MENCKEY
 0x10

980 
	#GAPBOND_KEYDIST_MIDKEY
 0x20

981 
	#GAPBOND_KEYDIST_MSIGN
 0x40

982 
	#GAPBOND_KEYDIST_MLINK
 0x80

983 

	)

985 
	#GAPBOND_PAIRING_STATE_STARTED
 0x00

986 
	#GAPBOND_PAIRING_STATE_COMPLETE
 0x01

987 
	#GAPBOND_PAIRING_STATE_BONDED
 0x02

988 
	#GAPBOND_PAIRING_STATE_BOND_SAVED
 0x03

989 

	)

991 
	#SMP_PAIRING_FAILED_PASSKEY_ENTRY_FAILED
 0x01

992 
	#SMP_PAIRING_FAILED_OOB_NOT_AVAIL
 0x02

993 
	#SMP_PAIRING_FAILED_AUTH_REQ
 0x03

994 
	#SMP_PAIRING_FAILED_CONFIRM_VALUE
 0x04

995 
	#SMP_PAIRING_FAILED_NOT_SUPPORTED
 0x05

996 
	#SMP_PAIRING_FAILED_ENC_KEY_SIZE
 0x06

997 
	#SMP_PAIRING_FAILED_CMD_NOT_SUPPORTED
 0x07

998 
	#SMP_PAIRING_FAILED_UNSPECIFIED
 0x08

999 
	#SMP_PAIRING_FAILED_REPEATED_ATTEMPTS
 0x09

1000 

	)

1002 
	#GAPBOND_FAIL_NO_ACTION
 0x00

1003 
	#GAPBOND_FAIL_INITIATE_PAIRING
 0x01

1004 
	#GAPBOND_FAIL_TERMINATE_LINK
 0x02

1005 
	#GAPBOND_FAIL_TERMINATE_ERASE_BONDS
 0x03

1006 

	)

1008 
	#BLE_NVID_IRK
 0x02

1009 
	#BLE_NVID_CSRK
 0x03

1010 
	#BLE_NVID_SIGNCOUNTER
 0x04

1011 

	)

1013 
	#BLE_NVID_BOND_RF_START
 0x10

1014 

	)

1016 
	#BLE_NVID_GAP_BOND_START
 0x20

1017 

	)

1019 
	#GAP_BOND_REC_ID_OFFSET
 0

1020 
	#GAP_BOND_LOCAL_LTK_OFFSET
 1

1021 
	#GAP_BOND_DEV_LTK_OFFSET
 2

1022 
	#GAP_BOND_DEV_IRK_OFFSET
 3

1023 
	#GAP_BOND_DEV_CSRK_OFFSET
 4

1024 
	#GAP_BOND_DEV_SIGN_COUNTER_OFFSET
 5

1025 
	#GAP_BOND_REC_IDS
 6

	)

1028 
	#ˇlcNvID
(
Idx
, 
off£t
Ë(((((IdxË* 
GAP_BOND_REC_IDS
Ë+ (off£t))Ë+ 
BLE_NVID_GAP_BOND_START
)

	)

1029 
	#maöRec‹dNvID
(
b⁄dIdx
Ë(
	`ˇlcNvID
((b⁄dIdx), 
GAP_BOND_REC_ID_OFFSET
))

	)

1030 
	#loˇlLTKNvID
(
b⁄dIdx
Ë(
	`ˇlcNvID
((b⁄dIdx), 
GAP_BOND_LOCAL_LTK_OFFSET
))

	)

1031 
	#devLTKNvID
(
b⁄dIdx
Ë(
	`ˇlcNvID
((b⁄dIdx), 
GAP_BOND_DEV_LTK_OFFSET
))

	)

1032 
	#devIRKNvID
(
b⁄dIdx
Ë(
	`ˇlcNvID
((b⁄dIdx), 
GAP_BOND_DEV_IRK_OFFSET
))

	)

1033 
	#devCSRKNvID
(
b⁄dIdx
Ë(
	`ˇlcNvID
((b⁄dIdx), 
GAP_BOND_DEV_CSRK_OFFSET
))

	)

1034 
	#devSignCou¡îNvID
(
b⁄dIdx
Ë(
	`ˇlcNvID
((b⁄dIdx), 
GAP_BOND_DEV_SIGN_COUNTER_OFFSET
))

	)

1037 
	#BLE_NVID_GATT_CFG_START
 0x70

1038 

	)

1040 
	#g©tCfgNvID
(
Idx
Ë((IdxË+ 
BLE_NVID_GATT_CFG_START
)

	)

1042 
	#BLE_NVID_MAX_VAL
 0x7F

	)

1047 
uöt8_t
 
	gLTK
[
KEYLEN
];

1048 
uöt16_t
 
	gdiv
;

1049 
uöt8_t
 
	gønd
[
B_RANDOM_NUM_SIZE
];

1050 
uöt8_t
 
	gkeySize
;

1051 } 
	tg≠B⁄dLTK_t
;

1056 
uöt8_t
 
	gpublicAddr
[
B_ADDR_LEN
];

1057 
uöt8_t
 
	gªc⁄√˘Addr
[
B_ADDR_LEN
];

1058 
uöt16_t
 
	g°©eFœgs
;

1059 
uöt8_t
 
	gb⁄dsToDñëe
;

1060 } 
	tg≠B⁄dRec_t
;

1065 
uöt16_t
 
	g©åH™dÀ
;

1066 
uöt8_t
 
	gvÆue
;

1067 } 
	tg≠B⁄dCh¨Cfg_t
;

1074 
uöt8_t
 
	g§k
[
KEYLEN
];

1075 
uöt32_t
 
	gsignCou¡î
;

1076 } 
	tlökSec_t
;

1080 
uöt8_t
 
	g…k
[
KEYLEN
];

1081 
uöt16_t
 
	gdiv
;

1082 
uöt8_t
 
	gønd
[
B_RANDOM_NUM_SIZE
];

1083 
uöt8_t
 
	gkeySize
;

1084 
uöt8_t
 
	gg≠B⁄dInvÆid
;

1085 } 
	tícP¨ams_t
;

1089 
uöt8_t
 
	gc⁄nRﬁe
;

1090 
uöt8_t
 
	gaddrTy≥
;

1091 
uöt8_t
 
	gaddr
[
B_ADDR_LEN
];

1092 
ícP¨ams_t
 
	gícP¨ams
;

1093 } 
	tb⁄dEncP¨ams_t
;

1097 
uöt8_t
 
	gèskID
;

1098 
uöt16_t
 
	gc⁄√˘i⁄H™dÀ
;

1099 
uöt8_t
 
	g°©eFœgs
;

1100 
uöt8_t
 
	gaddrTy≥
;

1101 
uöt8_t
 
	gaddr
[
B_ADDR_LEN
];

1102 
uöt8_t
 
	gc⁄nRﬁe
;

1103 
uöt16_t
 
	gc⁄nI¡îvÆ
;

1104 
uöt16_t
 
	gc⁄nL©ícy
;

1105 
uöt16_t
 
	gc⁄nTimeout
;

1106 
uöt16_t
 
	gMTU
;

1107 
lökSec_t
 
	g£c
;

1108 
ícP¨ams_t
 *
	gpEncP¨ams
;

1109 
uöt16_t
 
	gsmEvtID
;

1110 *
	gpPaúögP¨ams
;

1111 *
	gpAuthLök
;

1112 } 
	tlökDBIãm_t
;

1115 (*
	gp‚LökDBCB_t
)–
	tuöt16_t
 
	tc⁄√˘i⁄H™dÀ
, 
	tuöt8_t
 
	tch™geTy≥
 );

1117 (*
	gp‚Pîf‹mFuncCB_t
)–
	tlökDBIãm_t
 *
	tpLökIãm
 );

1124 
uöt8_t
 
	gÀn
;

1125 
uöt8_t
 
	guuid
[
ATT_UUID_SIZE
];

1126 } 
	t©tAârTy≥_t
;

1133 
uöt8_t
 
	gÀn
;

1134 
uöt8_t
 
	guuid
[
ATT_BT_UUID_SIZE
];

1135 } 
	t©tAârBtTy≥_t
;

1142 
uöt8_t
 
	gªqOpcode
;

1143 
uöt16_t
 
	gh™dÀ
;

1144 
uöt8_t
 
	gîrCode
;

1145 } 
	t©tEº‹R•_t
;

1152 
uöt16_t
 
	g˛õ¡RxMTU
;

1153 } 
	t©tExch™geMTUReq_t
;

1160 
uöt16_t
 
	g£rvîRxMTU
;

1161 } 
	t©tExch™geMTUR•_t
;

1168 
uöt16_t
 
	g°¨tH™dÀ
;

1169 
uöt16_t
 
	gídH™dÀ
;

1170 } 
	t©tFödInfoReq_t
;

1177 
uöt16_t
 
	gnumInfo
;

1178 
uöt8_t
 
	gf‹m©
;

1179 
uöt8_t
 *
	gpInfo
;

1180 } 
	t©tFödInfoR•_t
;

1187 
uöt16_t
 
	g°¨tH™dÀ
;

1188 
uöt16_t
 
	gídH™dÀ
;

1189 
©tAârBtTy≥_t
 
	gty≥
;

1190 
uöt16_t
 
	gÀn
;

1191 
uöt8_t
 *
	gpVÆue
;

1192 } 
	t©tFödByTy≥VÆueReq_t
;

1199 
uöt16_t
 
	gnumInfo
;

1200 
uöt8_t
 *
	gpH™dÀsInfo
;

1201 } 
	t©tFödByTy≥VÆueR•_t
;

1208 
uöt16_t
 
	g°¨tH™dÀ
;

1209 
uöt16_t
 
	gídH™dÀ
;

1210 
©tAârTy≥_t
 
	gty≥
;

1211 } 
	t©tRódByTy≥Req_t
;

1218 
uöt16_t
 
	gnumPaús
;

1219 
uöt16_t
 
	gÀn
;

1220 
uöt8_t
 *
	gpD©aLi°
;

1221 } 
	t©tRódByTy≥R•_t
;

1228 
uöt16_t
 
	gh™dÀ
;

1229 } 
	t©tRódReq_t
;

1236 
uöt16_t
 
	gÀn
;

1237 
uöt8_t
 *
	gpVÆue
;

1238 } 
	t©tRódR•_t
;

1245 
uöt16_t
 
	gh™dÀ
;

1246 
uöt16_t
 
	goff£t
;

1247 } 
	t©tRódBlobReq_t
;

1254 
uöt16_t
 
	gÀn
;

1255 
uöt8_t
 *
	gpVÆue
;

1256 } 
	t©tRódBlobR•_t
;

1263 
uöt8_t
 *
	gpH™dÀs
;

1264 
uöt16_t
 
	gnumH™dÀs
;

1265 } 
	t©tRódMu…iReq_t
;

1272 
uöt16_t
 
	gÀn
;

1273 
uöt8_t
 *
	gpVÆues
;

1274 } 
	t©tRódMu…iR•_t
;

1281 
uöt16_t
 
	g°¨tH™dÀ
;

1282 
uöt16_t
 
	gídH™dÀ
;

1283 
©tAârTy≥_t
 
	gty≥
;

1284 } 
	t©tRódByGΩTy≥Req_t
;

1291 
uöt16_t
 
	gnumGΩs
;

1292 
uöt16_t
 
	gÀn
;

1293 
uöt8_t
 *
	gpD©aLi°
;

1294 } 
	t©tRódByGΩTy≥R•_t
;

1301 
uöt16_t
 
	gh™dÀ
;

1302 
uöt16_t
 
	gÀn
;

1303 
uöt8_t
 *
	gpVÆue
;

1304 
uöt8_t
 
	gsig
;

1305 
uöt8_t
 
	gcmd
;

1306 } 
	t©tWrôeReq_t
;

1313 
uöt16_t
 
	gh™dÀ
;

1314 
uöt16_t
 
	goff£t
;

1315 
uöt16_t
 
	gÀn
;

1316 
uöt8_t
 *
	gpVÆue
;

1317 } 
	t©tPª∑ªWrôeReq_t
;

1324 
uöt16_t
 
	gh™dÀ
;

1325 
uöt16_t
 
	goff£t
;

1326 
uöt16_t
 
	gÀn
;

1327 
uöt8_t
 *
	gpVÆue
;

1328 } 
	t©tPª∑ªWrôeR•_t
;

1335 
uöt8_t
 
	gÊags
;

1337 } 
	t©tExecuãWrôeReq_t
;

1344 
uöt16_t
 
	gh™dÀ
;

1345 
uöt16_t
 
	gÀn
;

1346 
uöt8_t
 *
	gpVÆue
;

1347 } 
	t©tH™dÀVÆueNŸi_t
;

1354 
uöt16_t
 
	gh™dÀ
;

1355 
uöt16_t
 
	gÀn
;

1356 
uöt8_t
 *
	gpVÆue
;

1357 } 
	t©tH™dÀVÆueInd_t
;

1371 
uöt8_t
 
	g›code
;

1372 
uöt8_t
 
	g≥ndögOpcode
;

1373 } 
	t©tFlowCålViﬁ©edEvt_t
;

1385 
uöt16_t
 
	gMTU
;

1386 } 
	t©tMtuUpd©edEvt_t
;

1396 
©tExch™geMTUReq_t
 
	gexch™geMTUReq
;

1397 
©tFödInfoReq_t
 
	gfödInfoReq
;

1398 
©tFödByTy≥VÆueReq_t
 
	gfödByTy≥VÆueReq
;

1399 
©tRódByTy≥Req_t
 
	gªadByTy≥Req
;

1400 
©tRódReq_t
 
	gªadReq
;

1401 
©tRódBlobReq_t
 
	gªadBlobReq
;

1402 
©tRódMu…iReq_t
 
	gªadMu…iReq
;

1403 
©tRódByGΩTy≥Req_t
 
	gªadByGΩTy≥Req
;

1404 
©tWrôeReq_t
 
	gwrôeReq
;

1405 
©tPª∑ªWrôeReq_t
 
	g¥ï¨eWrôeReq
;

1406 
©tExecuãWrôeReq_t
 
	gexecuãWrôeReq
;

1409 
©tEº‹R•_t
 
	gîr‹R•
;

1410 
©tExch™geMTUR•_t
 
	gexch™geMTUR•
;

1411 
©tFödInfoR•_t
 
	gfödInfoR•
;

1412 
©tFödByTy≥VÆueR•_t
 
	gfödByTy≥VÆueR•
;

1413 
©tRódByTy≥R•_t
 
	gªadByTy≥R•
;

1414 
©tRódR•_t
 
	gªadR•
;

1415 
©tRódBlobR•_t
 
	gªadBlobR•
;

1416 
©tRódMu…iR•_t
 
	gªadMu…iR•
;

1417 
©tRódByGΩTy≥R•_t
 
	gªadByGΩTy≥R•
;

1418 
©tPª∑ªWrôeR•_t
 
	g¥ï¨eWrôeR•
;

1421 
©tH™dÀVÆueNŸi_t
 
	gh™dÀVÆueNŸi
;

1422 
©tH™dÀVÆueInd_t
 
	gh™dÀVÆueInd
;

1425 
©tFlowCålViﬁ©edEvt_t
 
	gÊowCålEvt
;

1426 
©tMtuUpd©edEvt_t
 
	gmtuEvt
;

1427 } 
	t©tMsg_t
;

1434 
uöt16_t
 
	g°¨tH™dÀ
;

1435 
uöt16_t
 
	gídH™dÀ
;

1436 
©tAârTy≥_t
 
	gvÆue
;

1437 } 
	tg©tFödByTy≥VÆueReq_t
;

1444 
uöt8_t
 
	gdiscCh¨sByUUID
;

1445 
©tRódByTy≥Req_t
 
	gªq
;

1446 } 
	tg©tRódByTy≥Req_t
;

1453 
uöt8_t
 
	gªlübÀ
;

1454 
©tPª∑ªWrôeReq_t
 
	gªq
;

1455 
uöt16_t
 
	gœ°Off£t
;

1456 } 
	tg©tWrôeL⁄gReq_t
;

1463 
uöt8_t
 
	gªlübÀ
;

1464 
©tPª∑ªWrôeReq_t
 *
	gpReqs
;

1465 
uöt8_t
 
	gnumReqs
;

1466 
uöt8_t
 
	gödex
;

1467 
uöt8_t
 
	gÊags
;

1469 } 
	tg©tRñübÀWrôesReq_t
;

1479 
©tExch™geMTUReq_t
 
	gexch™geMTUReq
;

1480 
©tFödInfoReq_t
 
	gfödInfoReq
;

1481 
©tFödByTy≥VÆueReq_t
 
	gfödByTy≥VÆueReq
;

1482 
©tRódByTy≥Req_t
 
	gªadByTy≥Req
;

1483 
©tRódReq_t
 
	gªadReq
;

1484 
©tRódBlobReq_t
 
	gªadBlobReq
;

1485 
©tRódMu…iReq_t
 
	gªadMu…iReq
;

1486 
©tRódByGΩTy≥Req_t
 
	gªadByGΩTy≥Req
;

1487 
©tWrôeReq_t
 
	gwrôeReq
;

1488 
©tPª∑ªWrôeReq_t
 
	g¥ï¨eWrôeReq
;

1489 
©tExecuãWrôeReq_t
 
	gexecuãWrôeReq
;

1490 
g©tFödByTy≥VÆueReq_t
 
	gg©tFödByTy≥VÆueReq
;

1491 
g©tRódByTy≥Req_t
 
	gg©tRódByTy≥Req
;

1492 
g©tWrôeL⁄gReq_t
 
	gg©tWrôeL⁄gReq
;

1493 
g©tRñübÀWrôesReq_t
 
	gg©tRñübÀWrôesReq
;

1496 
©tEº‹R•_t
 
	gîr‹R•
;

1497 
©tExch™geMTUR•_t
 
	gexch™geMTUR•
;

1498 
©tFödInfoR•_t
 
	gfödInfoR•
;

1499 
©tFödByTy≥VÆueR•_t
 
	gfödByTy≥VÆueR•
;

1500 
©tRódByTy≥R•_t
 
	gªadByTy≥R•
;

1501 
©tRódR•_t
 
	gªadR•
;

1502 
©tRódBlobR•_t
 
	gªadBlobR•
;

1503 
©tRódMu…iR•_t
 
	gªadMu…iR•
;

1504 
©tRódByGΩTy≥R•_t
 
	gªadByGΩTy≥R•
;

1505 
©tPª∑ªWrôeR•_t
 
	g¥ï¨eWrôeR•
;

1508 
©tH™dÀVÆueNŸi_t
 
	gh™dÀVÆueNŸi
;

1509 
©tH™dÀVÆueInd_t
 
	gh™dÀVÆueInd
;

1512 
©tFlowCålViﬁ©edEvt_t
 
	gÊowCålEvt
;

1513 
©tMtuUpd©edEvt_t
 
	gmtuEvt
;

1514 } 
	tg©tMsg_t
;

1522 
tmos_evít_hdr_t
 
	ghdr
;

1523 
uöt16_t
 
	gc⁄nH™dÀ
;

1524 
uöt8_t
 
	gmëhod
;

1525 
g©tMsg_t
 
	gmsg
;

1526 } 
	tg©tMsgEvít_t
;

1533 
uöt8_t
 
	gÀn
;

1534 c⁄° 
uöt8_t
 *
	guuid
;

1535 } 
	tg©tAârTy≥_t
;

1540 
	s©tAâribuã_t


1542 
g©tAârTy≥_t
 
	gty≥
;

1543 
uöt8_t
 
	g≥rmissi⁄s
;

1544 
uöt16_t
 
	gh™dÀ
;

1545 
uöt8_t
 *
	gpVÆue
;

1548 } 
	tg©tAâribuã_t
;

1555 
uöt16_t
 
	gnumAârs
;

1556 
uöt8_t
 
	gícKeySize
;

1562 
g©tAâribuã_t
 *
	g©ås
;

1563 } 
	tg©tSîvi˚_t
;

1591 
uöt8_t
 (*
	tp‚GATTRódAârCB_t
)–
	tuöt16_t
 
	tc⁄nH™dÀ
, 
	tg©tAâribuã_t
 *
	tpAâr
, 
	tuöt8_t
 *
	tpVÆue
,

1592 
	tuöt16_t
 *
	tpLí
, uöt16_à
	toff£t
, uöt16_à
	tmaxLí
, 
	tuöt8_t
 
	tmëhod
 );

1621 
uöt8_t
 (*
	tp‚GATTWrôeAârCB_t
)–
	tuöt16_t
 
	tc⁄nH™dÀ
, 
	tg©tAâribuã_t
 *
	tpAâr
, 
	tuöt8_t
 *
	tpVÆue
,

1622 
	tuöt16_t
 
	tÀn
, uöt16_à
	toff£t
, 
	tuöt8_t
 
	tmëhod
 );

1635 
bSètus_t
 (*
	tp‚GATTAuth‹izeAârCB_t
)–
	tuöt16_t
 
	tc⁄nH™dÀ
, 
	tg©tAâribuã_t
 *
	tpAâr
,

1636 
	tuöt8_t
 
	t›code
 );

1643 
uöt16_t
 
	gc⁄nH™dÀ
;

1644 
uöt8_t
 
	gvÆue
;

1645 } 
	tg©tCh¨Cfg_t
;

1653 
p‚GATTRódAârCB_t
 
	gp‚RódAârCB
;

1654 
p‚GATTWrôeAârCB_t
 
	gp‚WrôeAârCB
;

1655 
p‚GATTAuth‹izeAârCB_t
 
	gp‚Auth‹izeAârCB
;

1656 } 
	tg©tSîvi˚CBs_t
;

1664 
tmos_evít_hdr_t
 
	ghdr
;

1665 
uöt8_t
 
	g›code
;

1666 } 
	tg≠EvítHdr_t
;

1675 
tmos_evít_hdr_t
 
	ghdr
;

1676 
uöt8_t
 
	g›code
;

1677 
uöt8_t
 
	gdevAddr
[
B_ADDR_LEN
];

1678 
uöt16_t
 
	gd©aPktLí
;

1679 
uöt8_t
 
	gnumD©aPkts
;

1680 } 
	tg≠Devi˚InôD⁄eEvít_t
;

1692 
tmos_evít_hdr_t
 
	ghdr
;

1693 
uöt8_t
 
	g›code
;

1694 
uöt8_t
 
	gaddrTy≥
;

1695 
uöt8_t
 
	gdevAddr
[
B_ADDR_LEN
];

1696 
uöt32_t
 
	gsignCou¡î
;

1697 } 
	tg≠SignUpd©eEvít_t
;

1706 
tmos_evít_hdr_t
 
	ghdr
;

1707 
uöt8_t
 
	g›code
;

1708 
uöt8_t
 
	gevítTy≥
;

1709 
uöt8_t
 
	gaddrTy≥
;

1710 
uöt8_t
 
	gaddr
[
B_ADDR_LEN
];

1711 
öt8_t
 
	grssi
;

1712 
uöt8_t
 
	gd©aLí
;

1713 
uöt8_t
 *
	gpEvtD©a
;

1714 } 
	tg≠Devi˚InfoEvít_t
;

1721 
uöt8_t
 
	gèskID
;

1722 
uöt8_t
 
	gmode
;

1723 
uöt8_t
 
	ga˘iveSˇn
;

1724 
uöt8_t
 
	gwhôeLi°
;

1725 } 
	tg≠DevDiscReq_t
;

1732 
uöt8_t
 
	gevítTy≥
;

1733 
uöt8_t
 
	gaddrTy≥
;

1734 
uöt8_t
 
	gaddr
[
B_ADDR_LEN
];

1735 
uöt8_t
 
	gd©aLí
;

1736 
uöt8_t
 *
	gpEvtD©a
;

1737 } 
	tg≠DevRec_t
;

1745 
tmos_evít_hdr_t
 
	ghdr
;

1746 
uöt8_t
 
	g›code
;

1747 
uöt8_t
 
	gnumDevs
;

1748 
g≠DevRec_t
 *
	gpDevLi°
;

1749 } 
	tg≠DevDiscEvít_t
;

1757 
tmos_evít_hdr_t
 
	ghdr
;

1758 
uöt8_t
 
	g›code
;

1759 } 
	tg≠MakeDiscovîabÀR•Evít_t
;

1767 
tmos_evít_hdr_t
 
	ghdr
;

1768 
uöt8_t
 
	g›code
;

1769 } 
	tg≠EndDiscovîabÀR•Evít_t
;

1777 
tmos_evít_hdr_t
 
	ghdr
;

1778 
uöt8_t
 
	g›code
;

1779 
uöt8_t
 
	gadTy≥
;

1780 } 
	tg≠AdvD©aUpd©eEvít_t
;

1791 
tmos_evít_hdr_t
 
	ghdr
;

1792 
uöt8_t
 
	g›code
;

1793 
uöt8_t
 
	gdevAddrTy≥
;

1794 
uöt8_t
 
	gdevAddr
[
B_ADDR_LEN
];

1795 
uöt16_t
 
	gc⁄√˘i⁄H™dÀ
;

1796 
uöt8_t
 
	gc⁄nRﬁe
;

1797 
uöt16_t
 
	gc⁄nI¡îvÆ
;

1798 
uöt16_t
 
	gc⁄nL©ícy
;

1799 
uöt16_t
 
	gc⁄nTimeout
;

1800 
uöt8_t
 
	g˛ockAccuøcy
;

1801 } 
	tg≠E°LökReqEvít_t
;

1809 
tmos_evít_hdr_t
 
	ghdr
;

1810 
uöt8_t
 
	g›code
;

1811 
uöt8_t
 
	g°©us
;

1812 
uöt16_t
 
	gc⁄√˘i⁄H™dÀ
;

1813 
uöt16_t
 
	gc⁄nI¡îvÆ
;

1814 
uöt16_t
 
	gc⁄nL©ícy
;

1815 
uöt16_t
 
	gc⁄nTimeout
;

1816 } 
	tg≠LökUpd©eEvít_t
;

1824 
tmos_evít_hdr_t
 
	ghdr
;

1825 
uöt8_t
 
	g›code
;

1826 
uöt16_t
 
	gc⁄√˘i⁄H™dÀ
;

1827 
uöt8_t
 
	gªas⁄
;

1828 
uöt8_t
 
	gc⁄nRﬁe
;

1829 } 
	tg≠Tîmö©eLökEvít_t
;

1837 
tmos_evít_hdr_t
 
	ghdr
;

1838 
uöt8_t
 
	g›code
;

1839 
uöt8_t
 
	gdevi˚Addr
[
B_ADDR_LEN
];

1840 
uöt16_t
 
	gc⁄√˘i⁄H™dÀ
;

1841 
uöt8_t
 
	guiI≈uts
;

1842 
uöt8_t
 
	guiOuçuts
;

1843 } 
	tg≠PasskeyNìdedEvít_t
;

1848 (*
	gp‚PasscodeCB_t
)–
	tuöt8_t
 *
	tdevi˚Addr
,

1849 
	tuöt16_t
 
	tc⁄√˘i⁄H™dÀ
,

1850 
	tuöt8_t
 
	tuiI≈uts
,

1851 
	tuöt8_t
 
	tuiOuçuts


1857 (*
	gp‚PaúSèãCB_t
)–
	tuöt16_t
 
	tc⁄√˘i⁄H™dÀ
,

1858 
	tuöt8_t
 
	t°©e
,

1859 
	tuöt8_t
 
	t°©us


1867 
p‚PasscodeCB_t
 
	g∑sscodeCB
;

1868 
p‚PaúSèãCB_t
 
	g∑úSèãCB
;

1869 } 
	tg≠B⁄dCBs_t
;

1873 
	gGAPROLE_INIT
 = 0,

1874 
	gGAPROLE_STARTED
,

1875 
	gGAPROLE_ADVERTISING
,

1876 
	gGAPROLE_WAITING
,

1877 
	gGAPROLE_CONNECTED
,

1878 
	gGAPROLE_CONNECTED_ADV
,

1879 
	gGAPROLE_ERROR


1880 } 
	tg≠Rﬁe_Sèãs_t
;

1887 
g≠EvítHdr_t
 
	gg≠
;

1888 
g≠Devi˚InôD⁄eEvít_t
 
	göôD⁄e
;

1889 
g≠Devi˚InfoEvít_t
 
	gdevi˚Info
;

1890 
g≠DevDiscEvít_t
 
	gdiscCm∂
;

1891 
g≠AdvD©aUpd©eEvít_t
 
	gadvD©aUpd©e
;

1892 
g≠MakeDiscovîabÀR•Evít_t
 
	gadvDiscEvt
;

1894 
g≠E°LökReqEvít_t
 
	glökCm∂
;

1895 
g≠LökUpd©eEvít_t
 
	glökUpd©e
;

1896 
g≠Tîmö©eLökEvít_t
 
	glökTîmö©e
;

1897 } 
	tg≠RﬁeEvít_t
;

1904 
uöt8_t
 
	gevítTy≥
;

1905 
uöt8_t
 
	gaddrTy≥
;

1906 
uöt8_t
 
	gaddr
[
B_ADDR_LEN
];

1907 
öt8_t
 
	grssi
;

1908 } 
	tg≠SˇnRec_t
;

1914 (*
	gg≠RﬁesBrﬂdˇ°îSèãNŸify_t
)–
	tg≠Rﬁe_Sèãs_t
 
	t√wSèã
 );

1916 (*
	gg≠RﬁesSˇnReqRecv_t
)–
	tg≠SˇnRec_t
 * 
	tpEvít
 );

1920 
g≠RﬁesBrﬂdˇ°îSèãNŸify_t
 
	gp‚SèãCh™ge
;

1921 
g≠RﬁesSˇnReqRecv_t
 
	gp‚SˇnRecv
;

1922 } 
	tg≠RﬁesBrﬂdˇ°îCBs_t
;

1927 (*
	gp‚G≠Ob£rvîRﬁeEvítCB_t
)–
	tg≠RﬁeEvít_t
 *
	tpEvít


1935 
p‚G≠Ob£rvîRﬁeEvítCB_t
 
	gevítCB
;

1936 } 
	tg≠RﬁeOb£rvîCB_t
;

1941 (*
	gg≠RﬁesRssiRód_t
)–
	tuöt16_t
 
	tc⁄nH™dÀ
, 
	töt8_t
 
	t√wRSSI
 );

1947 (*
	gg≠RﬁesSèãNŸify_t
)–
	tg≠Rﬁe_Sèãs_t
 
	t√wSèã
, 
	tg≠RﬁeEvít_t
 * 
	tpEvít
 );

1952 (*
	gg≠RﬁesP¨amUpd©eCB_t
)–
	tuöt16_t
 
	tc⁄nH™dÀ
, uöt16_à
	tc⁄nI¡îvÆ
,

1953 
	tuöt16_t
 
	tc⁄nSœveL©ícy
, uöt16_à
	tc⁄nTimeout
 );

1960 
g≠RﬁesSèãNŸify_t
 
	gp‚SèãCh™ge
;

1961 
g≠RﬁesRssiRód_t
 
	gp‚RssiRód
;

1962 
g≠RﬁesP¨amUpd©eCB_t
 
	gp‚P¨amUpd©e
;

1963 } 
	tg≠RﬁesCBs_t
;

1968 (*
	gp‚G≠CíåÆRﬁeEvítCB_t
)–
	tg≠RﬁeEvít_t
 *
	tpEvít
 );

1973 (*
	gp‚HciD©aLíCh™geEvCB_t
)–
	tuöt16_t
 
	tc⁄nH™dÀ
, uöt16_à
	tmaxTxO˘ës
,

1974 
	tuöt16_t
 
	tmaxRxO˘ës
 );

1981 
g≠RﬁesRssiRód_t
 
	grssiCB
;

1982 
p‚G≠CíåÆRﬁeEvítCB_t
 
	gevítCB
;

1983 
p‚HciD©aLíCh™geEvCB_t
 
	gCh™gCB
;

1984 } 
	tg≠CíåÆRﬁeCB_t
;

1992 
	#TX_MODE_TX_FINISH
 0x01

1995 
	#TX_MODE_TX_FAIL
 0x11

1996 
	#TX_MODE_TX_TIMEOUT
 
TX_MODE_TX_FAIL


1997 
	#TX_MODE_RX_DATA
 0x02

1998 
	#TX_MODE_RX_TIMEOUT
 0x12

1999 
	#TX_MODE_HOP_SHUT
 0x22

	)

2002 
	#RX_MODE_RX_DATA
 0x03

2006 
	#RX_MODE_TX_FINISH
 0x04

2007 
	#RX_MODE_TX_FAIL
 0x14

2008 
	#RX_MODE_TX_TIMEOUT
 
RX_MODE_TX_FAIL


2009 
	#RX_MODE_HOP_SHUT
 0x24

	)

2012 
	#LLE_MODE_BASIC
 (0)

2013 
	#LLE_MODE_AUTO
 (1)

2014 

	)

2016 
	#LLE_WHITENING_ON
 (0<<1)

	)

2017 
	#LLE_WHITENING_OFF
 (1<<1)

	)

2019 
	#LLE_MODE_EX_CHANNEL
 (1<<6)

	)

2021 
	#LLE_MODE_NON_RSSI
 (1<<7)

	)

2026 (*
	gp‚RFSètusCB_t
)–
	tuöt8_t
 
	t°a
, uöt8_à
	tr§
, uöt8_à*
	trxBuf
 );

2031 
	sèg_rf_c⁄fig


2033 
uöt8_t
 
	gLLEMode
;

2039 
uöt8_t
 
	gCh™√l
;

2040 
uöt32_t
 
	gFªquícy
;

2041 
uöt32_t
 
	gac˚ssAddªss
;

2042 
uöt32_t
 
	gCRCInô
;

2043 
p‚RFSètusCB_t
 
	grfSètusCB
;

2044 
uöt32_t
 
	gCh™√lM≠
;

2046 
uöt8_t
 
	gResv
;

2047 
uöt8_t
 
	gHóπPîiod
;

2048 
uöt8_t
 
	gH›Pîiod
;

2049 
uöt8_t
 
	gH›Index
;

2050 
uöt8_t
 
	gRxMaxÀn
;

2051 
uöt8_t
 
	gTxMaxÀn
;

2052 } 
	trfC⁄fig_t
;

2057 #i‚de‡
LIB_FLASH_BASE_ADDRESSS


2058 
	#LIB_FLASH_BASE_ADDRESSS
 0x00010000

	)

2060 
	#LIB_FLASH_MAX_SIZE
 0x00020000

	)

2061 
	#LIB_RAM_MAX_SIZE
 0x00001000

	)

2063 
	#RAM_BASE_ADDRESSS
 0x20003800

	)

2064 
	#UUID_BASE_ADDRESSS
 (
LIB_FLASH_BASE_ADDRESSS
+0x08)

	)

2065 
	#FUNCITON_BASE_ADDRESSS
 (
LIB_FLASH_BASE_ADDRESSS
+0x34)

	)

2067 
	#BLE_LIB_UUID
(
n
Ë–
UUID_BASE_ADDRESSS
+n*2 )

	)

2068 
	#BLE_LIB_RAM_JT
(
n
Ë(*(
uöt32_t
*)–
RAM_BASE_ADDRESSS
+n*4 ))

	)

2069 
	#BLE_LIB_JT
(
n
Ë(*(
uöt32_t
*)–
FUNCITON_BASE_ADDRESSS
+n*4 ))

	)

2070 
	#VER_LIB
 (–c⁄° 
uöt8_t
*Ë
	`BLE_LIB_JT
(0))

	)

2078 
	#g≠Sîvi˚UUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(0))

	)

2079 
	#g©tSîvi˚UUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(1))

	)

2084 
	#¥im¨ySîvi˚UUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(2))

	)

2085 
	#£c⁄d¨ySîvi˚UUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(3))

	)

2086 
	#ö˛udeUUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(4))

	)

2087 
	#ch¨a˘îUUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(5))

	)

2092 
	#ch¨ExtPr›sUUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(6))

	)

2093 
	#ch¨U£rDescUUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(7))

	)

2094 
	#˛õ¡Ch¨CfgUUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(8))

	)

2095 
	#£rvCh¨CfgUUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(9))

	)

2096 
	#ch¨F‹m©UUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(10))

	)

2097 
	#ch¨AggF‹m©UUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(11))

	)

2098 
	#vÆidR™geUUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(12))

	)

2099 
	#extRï‹tRefUUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(13))

	)

2100 
	#ªp‹tRefUUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(14))

	)

2105 
	#devi˚NameUUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(15))

	)

2106 
	#≠≥¨™˚UUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(16))

	)

2107 
	#≥riPrivacyFœgUUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(17))

	)

2108 
	#ªc⁄√˘AddrUUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(18))

	)

2109 
	#≥riC⁄nP¨amUUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(19))

	)

2110 
	#£rvi˚Ch™gedUUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(10))

	)

2111 
	#˚¡AddrResUUID
 ((c⁄° 
uöt8_t
*Ë
	`BLE_LIB_UUID
(21))

	)

2116 
	#tmos_ønd
 (–
	`uöt32_t
 (*Ë–)Ë
	`BLE_LIB_JT
(1))

2117 
	#tmos_memcmp
 (–
	`BOOL
 (*Ë–c⁄° *
§c1
, c⁄° *
§c2
, 
uöt32_t
 
Àn
 )Ë
	`BLE_LIB_JT
(2))

2118 
	#tmos_isbuf£t
 (–
	`BOOL
 (*Ë–
uöt8_t
 *
buf
, uöt8_à
vÆ
, 
uöt32_t
 
Àn
 )Ë
	`BLE_LIB_JT
(3))

2119 
	#tmos_°æí
 (–
	`uöt32_t
 (*Ë–*
pSåög
 )Ë
	`BLE_LIB_JT
(4))

	)

2120 
	#tmos_mem£t
 (–(*Ë–* 
pD°
, 
uöt8_t
 
VÆue
, 
uöt32_t
 
Àn
 )Ë
	`BLE_LIB_JT
(5))

	)

2121 
	#tmos_mem˝y
 (–(*Ë–*
d°
, c⁄° *
§c
, 
uöt32_t
 
Àn
 )Ë
	`BLE_LIB_JT
(6))

	)

2131 
	#tmos_£t_evít
 (–
	`bSètus_t
 (*Ë–
tmosTaskID
 
èskID
, 
tmosEvíts
 
evít
 )Ë
	`BLE_LIB_JT
(7))

	)

2141 
	#tmos_˛ór_evít
 (–
	`bSètus_t
 (*Ë–
tmosTaskID
 
èskID
, 
tmosEvíts
 
evít
 )Ë
	`BLE_LIB_JT
(8))

	)

2152 
	#tmos_°¨t_èsk
 (–
	`BOOL
 (*Ë–
tmosTaskID
 
èskID
, 
tmosEvíts
 
evít
, 
tmosTimî
 
time
 )Ë
	`BLE_LIB_JT
(9))

	)

2165 
	#tmos_°¨t_ªlﬂd_èsk
 (–
	`bSètus_t
 (*Ë–
tmosTaskID
 
èskID
, 
tmosEvíts
 
evít
, 
tmosTimî
 
time
 )Ë
	`BLE_LIB_JT
(126Ë)

	)

2177 
	#tmos_°›_èsk
 (–
	`bSètus_t
 (*Ë–
tmosTaskID
 
èskID
, 
tmosEvíts
 
evít
 )Ë
	`BLE_LIB_JT
(10))

	)

2187 
	#tmos_gë_èsk_timî
 (–
	`tmosTimî
 (*Ë–
tmosTaskID
 
èskID
, 
tmosEvíts
 
evít
 )Ë
	`BLE_LIB_JT
(11))

	)

2197 
	#tmos_msg_£nd
 (–
	`bSètus_t
 (*Ë–
tmosTaskID
 
èskID
, 
uöt8_t
 *
msg_±r
 )Ë
	`BLE_LIB_JT
(12))

	)

2206 
	#tmos_msg_dóŒoˇã
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 *
msg_±r
 )Ë
	`BLE_LIB_JT
(13))

	)

2215 
	#tmos_msg_ª˚ive
 (–
uöt8_t
* (*Ë–
tmosTaskID
 
èskID
 )Ë
	`BLE_LIB_JT
(14))

	)

2224 
	#tmos_msg_Æloˇã
 (–
uöt8_t
* (*Ë–
uöt16_t
 
Àn
 )Ë
	`BLE_LIB_JT
(15))

	)

2235 
	#tmos_¢v_ªad
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 
id
, uöt8_à
Àn
, *
pBuf
)Ë
	`BLE_LIB_JT
(107Ë)

	)

2247 
	#TMOS_TimîInô
 (–
	`bSètus_t
 (*Ë–
p‚GëSysClock
 
‚GëClock
 )Ë
	`BLE_LIB_JT
(16))

	)

2256 
	#TMOS_Sy°emPro˚ss
 (–(*Ë–)Ë
	`BLE_LIB_RAM_JT
(0))

	)

2265 
	#TMOS_GëSy°emClock
 (–
	`uöt32_t
 (*Ë–)Ë
	`BLE_LIB_JT
(18))

	)

2274 
	#TMOS_Pro˚ssEvítRegi°î
 (–
	`tmosTaskID
 (*Ë–
pTaskEvítH™dÀrFn
 
evítCb
 )Ë
	`BLE_LIB_JT
(19))

	)

2284 
	#TMOS_Së32KTu√VÆue
 (–(*Ë–
uöt16_t
 
Êash_vÆ
, uöt16_à
øm_vÆ
 )Ë
	`BLE_LIB_JT
(120Ë)

	)

2294 
	#LL_AddWhôeLi°Devi˚
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 
addrTy≥
, uöt8_à*
devAddr
 )Ë
	`BLE_LIB_JT
(20))

	)

2304 
	#LL_RemoveWhôeLi°Devi˚
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 
addrTy≥
, uöt8_à*
devAddr
 )Ë
	`BLE_LIB_JT
(21))

	)

2313 
	#LL_CÀ¨WhôeLi°
 (–
	`bSètus_t
 (*Ë–)Ë
	`BLE_LIB_JT
(22))

	)

2324 
	#LL_En¸y±
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 *
key
, uöt8_à*
∂aöãxtD©a
, uöt8_à*
í¸y±D©a
 )Ë
	`BLE_LIB_JT
(23))

	)

2335 
	#LL_De¸y±
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 *
key
, uöt8_à*
∂aöãxtD©a
, uöt8_à*
de¸y±D©a
 )Ë
	`BLE_LIB_JT
(24))

	)

2344 
	#LL_GëNumbîOfUnAckPackë
 (–
	`uöt32_t
 (*Ë–
uöt16_t
 
h™dÀ
 )Ë
	`BLE_LIB_JT
(25))

	)

2354 
	#LL_C⁄√˘EvítRegi°î
 (–(*Ë–
p‚EvítCB
 
c⁄nEvítCB
 )Ë
	`BLE_LIB_JT
(26))

	)

2363 
	#LL_Advîti£EvítRegi°î
 (–(*Ë–
p‚EvítCB
 
advEvítCB
 )Ë
	`BLE_LIB_JT
(128))

	)

2372 
	#LL_SëTxPowîLevñ
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 
powî
 )Ë
	`BLE_LIB_JT
(27))

	)

2381 
	#BLE_RódRssi
 (–
	`öt8_t
 (*Ë–)Ë
	`BLE_LIB_JT
(108Ë)

	)

2390 
	#BLE_RódCfo
 (–
	`öt16_t
 (*Ë–)Ë
	`BLE_LIB_JT
(121Ë)

	)

2401 
	#BLE_PAC⁄åﬁInô
 (–(*Ë–
bÀPaC⁄åﬁC⁄fig_t
 *
∑C⁄åﬁ
 )Ë
	`BLE_LIB_JT
(109Ë)

	)

2410 
	#BLE_RegInô
 (–(*Ë–)Ë
	`BLE_LIB_JT
(110Ë)

	)

2419 
	#BLE_LibInô
 (–
	`bSètus_t
 (*Ë–
bÀC⁄fig_t
* 
pCfg
 )Ë
	`BLE_LIB_JT
(28))

	)

2435 
	#BLE_Ac˚ssAddªssGíî©e
 (–(*Ë–)Ë
	`BLE_LIB_JT
(29))

	)

2441 
	#lökDB_Regi°î
 (–
	`uöt8_t
 (*Ë–
p‚LökDBCB_t
 
pFunc
 )Ë
	`BLE_LIB_JT
(30Ë)

	)

2448 
	#lökDB_Sèã
 (–
	`uöt8_t
 (*Ë–
uöt16_t
 
c⁄√˘i⁄H™dÀ
, 
uöt8_t
 
°©e
 )Ë
	`BLE_LIB_JT
(31Ë)

	)

2453 
	#lökDB_Pîf‹mFunc
 (–(*Ë–
p‚Pîf‹mFuncCB_t
 
cb
 )Ë
	`BLE_LIB_JT
(32Ë)

	)

2460 
	#lökDB_Up
–
c⁄√˘i⁄H™dÀ
 ) 
	`lökDB_Sèã
–(c⁄√˘i⁄H™dÀ), 
LINK_CONNECTED
 )

	)

2469 
	#ATT_GëMTU
 (–
	`uöt16_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
 )Ë
	`BLE_LIB_JT
(33Ë)

	)

2482 
	#ATT_H™dÀVÆueCfm
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
 )Ë
	`BLE_LIB_JT
(34Ë)

	)

2487 
	#ATT_Com∑ªUUID
 (–
	`uöt8_t
 (*Ë–c⁄° 
uöt8_t
 *
pUUID1
, 
uöt16_t
 
Àn1
, c⁄° uöt8_à*
pUUID2
, uöt16_à
Àn2
 )Ë
	`BLE_LIB_JT
(35Ë)

	)

2495 
	#GATT_InôClõ¡
 (–
	`bSètus_t
 (*Ë–)Ë
	`BLE_LIB_JT
(36Ë)

	)

2505 
	#GATT_Regi°îF‹Ind
 (–(*Ë–
uöt8_t
 
èskId
 )Ë
	`BLE_LIB_JT
(37Ë)

	)

2515 
	#GATT_FödH™dÀ
 (–
g©tAâribuã_t
 * (*Ë–
uöt16_t
 
h™dÀ
, uöt16_à*
pH™dÀ
 )Ë
	`BLE_LIB_JT
(38Ë)

	)

2545 
	#GATT_Indiˇti⁄
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
©tH™dÀVÆueInd_t
 *
pInd
, 
uöt8_t
 
authítiˇãd
, uöt8_à
èskId
 )Ë
	`BLE_LIB_JT
(39Ë)

	)

2569 
	#GATT_NŸifiˇti⁄
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
©tH™dÀVÆueNŸi_t
 *
pNŸi
,
uöt8_t
 
authítiˇãd
 )Ë
	`BLE_LIB_JT
(40Ë)

	)

2601 
	#GATT_Exch™geMTU
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
©tExch™geMTUReq_t
 *
pReq
, 
uöt8_t
 
èskId
 )Ë
	`BLE_LIB_JT
(41Ë)

	)

2632 
	#GATT_DiscAŒPrim¨ySîvi˚s
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
uöt8_t
 
èskId
 )Ë
	`BLE_LIB_JT
(42Ë)

	)

2669 
	#GATT_DiscPrim¨ySîvi˚ByUUID
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
uöt8_t
 *
pUUID
, uöt8_à
Àn
, uöt8_à
èskId
 )Ë
	`BLE_LIB_JT
(43Ë)

	)

2705 
	#GATT_FödIn˛udedSîvi˚s
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, uöt16_à
°¨tH™dÀ
, uöt16_à
ídH™dÀ
, 
uöt8_t
 
èskId
 )Ë
	`BLE_LIB_JT
(44Ë)

	)

2741 
	#GATT_DiscAŒCh¨s
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, uöt16_à
°¨tH™dÀ
, uöt16_à
ídH™dÀ
, 
uöt8_t
 
èskId
 )Ë
	`BLE_LIB_JT
(45Ë)

	)

2777 
	#GATT_DiscCh¨sByUUID
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
©tRódByTy≥Req_t
 *
pReq
, 
uöt8_t
 
èskId
 )Ë
	`BLE_LIB_JT
(46Ë)

	)

2813 
	#GATT_DiscAŒCh¨Descs
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, uöt16_à
°¨tH™dÀ
, uöt16_à
ídH™dÀ
, 
uöt8_t
 
èskId
 )Ë
	`BLE_LIB_JT
(47Ë)

	)

2850 
	#GATT_RódCh¨VÆue
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
©tRódReq_t
 *
pReq
, 
uöt8_t
 
èskId
 )Ë
	`BLE_LIB_JT
(48Ë)

	)

2885 
	#GATT_RódUsögCh¨UUID
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
©tRódByTy≥Req_t
 *
pReq
, 
uöt8_t
 
èskId
 )Ë
	`BLE_LIB_JT
(49Ë)

	)

2916 
	#GATT_RódL⁄gCh¨VÆue
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
©tRódBlobReq_t
 *
pReq
, 
uöt8_t
 
èskId
 )Ë
	`BLE_LIB_JT
(50Ë)

	)

2949 
	#GATT_RódMu…iCh¨VÆues
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
©tRódMu…iReq_t
 *
pReq
, 
uöt8_t
 
èskId
 )Ë
	`BLE_LIB_JT
(51Ë)

	)

2982 
	#GATT_WrôeNoR•
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
©tWrôeReq_t
 *
pReq
 )Ë
	`BLE_LIB_JT
(52Ë)

	)

3020 
	#GATT_Sig√dWrôeNoR•
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
©tWrôeReq_t
 *
pReq
 )Ë
	`BLE_LIB_JT
(53Ë)

	)

3056 
	#GATT_WrôeCh¨VÆue
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
©tWrôeReq_t
 *
pReq
, 
uöt8_t
 
èskId
 )Ë
	`BLE_LIB_JT
(54Ë)

	)

3092 
	#GATT_WrôeL⁄gCh¨VÆue
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
©tPª∑ªWrôeReq_t
 *
pReq
, 
uöt8_t
 
èskId
 )Ë
	`BLE_LIB_JT
(55Ë)

	)

3139 
	#GATT_RñübÀWrôes
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
©tPª∑ªWrôeReq_t
 *
pReqs
,
uöt8_t
 
numReqs
, uöt8_à
Êags
, uöt8_à
èskId
 )Ë
	`BLE_LIB_JT
(56Ë)

	)

3172 
	#GATT_RódCh¨Desc
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
©tRódReq_t
 *
pReq
, 
uöt8_t
 
èskId
 )Ë
	`BLE_LIB_JT
(57Ë)

	)

3207 
	#GATT_RódL⁄gCh¨Desc
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
©tRódBlobReq_t
 *
pReq
, 
uöt8_t
 
èskId
 )Ë
	`BLE_LIB_JT
(58Ë)

	)

3240 
	#GATT_WrôeCh¨Desc
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
©tWrôeReq_t
 *
pReq
, 
uöt8_t
 
èskId
 )Ë
	`BLE_LIB_JT
(59Ë)

	)

3276 
	#GATT_WrôeL⁄gCh¨Desc
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
©tPª∑ªWrôeReq_t
 *
pReq
, 
uöt8_t
 
èskId
 )Ë
	`BLE_LIB_JT
(60Ë)

	)

3291 
	#GATT_bm_Æloc
 (–* (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
uöt8_t
 
›code
, uöt16_à
size
, uöt16_à*
pSizeAŒoc
, uöt8_à
Êag
 )Ë
	`BLE_LIB_JT
(61Ë)

	)

3301 
	#GATT_bm_‰ì
 (–(*Ë–
g©tMsg_t
 *
pMsg
, 
uöt8_t
 
›code
 )Ë
	`BLE_LIB_JT
(62Ë)

	)

3318 
	#GATTSîvAµ_Regi°îSîvi˚
 (–
	`bSètus_t
 (*Ë–
g©tAâribuã_t
 *
pAârs
,\

3319 
uöt16_t
 
numAârs
, 
uöt8_t
 
ícKeySize
,
g©tSîvi˚CBs_t
 *
pSîvi˚CBs
 )Ë
	`BLE_LIB_JT
(63Ë)

	)

3332 
	#GATTSîvAµ_AddSîvi˚
 (–
	`bSètus_t
 (*Ë–
uöt32_t
 
£rvi˚s
 )Ë
	`BLE_LIB_JT
(64Ë)

	)

3347 
	#GATTSîvAµ_Dîegi°îSîvi˚
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
h™dÀ
, 
g©tAâribuã_t
 **
p2pAârs
 )Ë
	`BLE_LIB_JT
(114Ë)

	)

3361 
	#GATTSîvAµ_InôCh¨Cfg
 (–(*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
g©tCh¨Cfg_t
 *
ch¨CfgTbl
 )Ë
	`BLE_LIB_JT
(65Ë)

	)

3376 
	#GATTSîvAµ_SídSîvi˚Ch™gedInd
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
tmosTaskID
 
èskID
)Ë
	`BLE_LIB_JT
(127Ë)

	)

3390 
	#GATTSîvAµ_RódCh¨Cfg
 (–
	`uöt16_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
g©tCh¨Cfg_t
 *
ch¨CfgTbl
 )Ë
	`BLE_LIB_JT
(66Ë)

	)

3405 
	#GATTSîvAµ_WrôeCh¨Cfg
 (–
	`uöt8_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
g©tCh¨Cfg_t
 *
ch¨CfgTbl
, uöt16_à
vÆue
 )Ë
	`BLE_LIB_JT
(67Ë)

	)

3420 
	#GATTSîvAµ_Pro˚ssCCCWrôeReq
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, 
g©tAâribuã_t
 *
pAâr
,\

3421 
uöt8_t
 *
pVÆue
, 
uöt16_t
 
Àn
, uöt16_à
off£t
,uöt16_à
vÆidCfg
 )Ë
	`BLE_LIB_JT
(68Ë)

	)

3435 
	#GGS_SëP¨amëî
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 
∑øm
, uöt8_à
Àn
, *
vÆue
 )Ë
	`BLE_LIB_JT
(69Ë)

	)

3448 
	#GGS_GëP¨amëî
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 
∑øm
, *
vÆue
 )Ë
	`BLE_LIB_JT
(70Ë)

	)

3461 
	#GGS_AddSîvi˚
 (–
	`bSètus_t
 (*Ë–
uöt32_t
 
£rvi˚s
 )Ë
	`BLE_LIB_JT
(71Ë)

	)

3475 
	#GAP_SëP¨amVÆue
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
∑ømID
, uöt16_à
∑ømVÆue
 )Ë
	`BLE_LIB_JT
(72Ë)

	)

3487 
	#GAP_GëP¨amVÆue
 (–
	`uöt16_t
 (*Ë–
uöt16_t
 
∑ømID
 )Ë
	`BLE_LIB_JT
(73Ë)

	)

3503 
	#GAP_C⁄figDevi˚Addr
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 
addrTy≥
, uöt8_à*
pSèticAddr
 )Ë
	`BLE_LIB_JT
(74Ë)

	)

3518 
	#GAP_ResﬁvePriv©eAddr
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 *
pIRK
, uöt8_à*
pAddr
 )Ë
	`BLE_LIB_JT
(75Ë)

	)

3534 
	#GAP_Upd©eAdvîtisögD©a
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 
èskID
,uöt8_à
adTy≥
,uöt8_à
d©aLí
,uöt8_à*
pAdvîtD©a
 )Ë
	`BLE_LIB_JT
(76Ë)

	)

3553 
	#GAPB⁄dMgr_SëP¨amëî
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
∑øm
, 
uöt8_t
 
Àn
, *
pVÆue
 )Ë
	`BLE_LIB_JT
(77Ë)

	)

3567 
	#GAPB⁄dMgr_GëP¨amëî
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
∑øm
, *
pVÆue
 )Ë
	`BLE_LIB_JT
(78Ë)

	)

3579 
	#GAPB⁄dMgr_PasscodeR•
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄√˘i⁄H™dÀ
, 
uöt8_t
 
°©us
, 
uöt32_t
 
∑sscode
 )Ë
	`BLE_LIB_JT
(79Ë)

	)

3590 
	#GAPB⁄dMgr_PîiSecurôyReq
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
 )Ë
	`BLE_LIB_JT
(129Ë)

	)

3608 
	#GAPRﬁe_SëP¨amëî
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
∑øm
, uöt16_à
Àn
, *
pVÆue
 )Ë
	`BLE_LIB_JT
(80Ë)

	)

3623 
	#GAPRﬁe_GëP¨amëî
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
∑øm
, *
pVÆue
 )Ë
	`BLE_LIB_JT
(81Ë)

	)

3630 
	#GAPRﬁe_Tîmö©eLök
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
 )Ë
	`BLE_LIB_JT
(82Ë)

	)

3640 
	#GAPRﬁe_RódRssiCmd
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
 )Ë
	`BLE_LIB_JT
(83Ë)

	)

3654 
	#GAPRﬁe_Upd©eLök
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, uöt16_à
c⁄nI¡îvÆMö
,\

3655 
uöt16_t
 
c⁄nI¡îvÆMax
, uöt16_à
c⁄nL©ícy
, uöt16_à
c⁄nTimeout
 )Ë
	`BLE_LIB_JT
(84Ë)

	)

3668 
	#GAPRﬁe_Brﬂdˇ°îInô
 (–
	`bSètus_t
 (*Ë–)Ë
	`BLE_LIB_JT
(85Ë)

	)

3677 
	#GAPRﬁe_Brﬂdˇ°îSèπDevi˚
 (–
	`bSètus_t
 (*Ë–
g≠RﬁesBrﬂdˇ°îCBs_t
 *
pAµCÆlbacks
 )Ë
	`BLE_LIB_JT
(86Ë)

	)

3686 
	#GAPRﬁe_Brﬂdˇ°îSëCB
 (–(*Ë(
g≠RﬁesBrﬂdˇ°îCBs_t
 *
pAµCÆlbacks
 )Ë
	`BLE_LIB_JT
(106Ë)

	)

3700 
	#GAPRﬁe_Ob£rvîInô
 (–
	`bSètus_t
 (*Ë–)Ë
	`BLE_LIB_JT
(87Ë)

	)

3711 
	#GAPRﬁe_Ob£rvîSèπDevi˚
 (–
	`bSètus_t
 (*Ë–
g≠RﬁeOb£rvîCB_t
 *
pAµCÆlbacks
 )Ë
	`BLE_LIB_JT
(88Ë)

	)

3724 
	#GAPRﬁe_Ob£rvîSèπDiscovîy
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 
mode
, uöt8_à
a˘iveSˇn
, uöt8_à
whôeLi°
 )Ë
	`BLE_LIB_JT
(89Ë)

	)

3733 
	#GAPRﬁe_Ob£rvîC™˚lDiscovîy
 (–
	`bSètus_t
 (*Ë–)Ë
	`BLE_LIB_JT
(90Ë)

	)

3751 
	#GAPRﬁe_PîùhîÆInô
 (–
	`bSètus_t
 (*Ë–)Ë
	`BLE_LIB_JT
(91Ë)

	)

3760 
	#GAPRﬁe_PîùhîÆSèπDevi˚
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 
èskid
, 
g≠B⁄dCBs_t
 *
pCB
,
g≠RﬁesCBs_t
 *
pAµCÆlbacks
 )Ë
	`BLE_LIB_JT
(92Ë)

	)

3774 
	#GAPRﬁe_PîùhîÆC⁄nP¨amUpd©eReq
 (–
	`bSètus_t
 (*Ë–
uöt16_t
 
c⁄nH™dÀ
, uöt16_à
c⁄nI¡îvÆMö
,\

3775 
uöt16_t
 
c⁄nI¡îvÆMax
,uöt16_à
œãncy
, uöt16_à
c⁄nTimeout
,
uöt8_t
 
èskId
 )Ë
	`BLE_LIB_JT
(93Ë)

	)

3789 
	#GAPRﬁe_CíåÆInô
 (–
	`bSètus_t
 (*Ë–)Ë
	`BLE_LIB_JT
(94Ë)

	)

3800 
	#GAPRﬁe_CíåÆSèπDevi˚
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 
èskid
, 
g≠B⁄dCBs_t
 *
pCB
, 
g≠CíåÆRﬁeCB_t
 *
pAµCÆlbacks
 )Ë
	`BLE_LIB_JT
(95Ë)

	)

3813 
	#GAPRﬁe_CíåÆSèπDiscovîy
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 
mode
, uöt8_à
a˘iveSˇn
, uöt8_à
whôeLi°
 )Ë
	`BLE_LIB_JT
(96Ë)

	)

3822 
	#GAPRﬁe_CíåÆC™˚lDiscovîy
 (–
	`bSètus_t
 (*Ë–)Ë
	`BLE_LIB_JT
(97Ë)

	)

3838 
	#GAPRﬁe_CíåÆE°ablishLök
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 
highDutyCy˛e
, uöt8_à
whôeLi°
,uöt8_à
addrTy≥Pìr
, uöt8_à*
≥îAddr
 )Ë
	`BLE_LIB_JT
(98Ë)

	)

3851 
	#RF_RﬁeInô
 (–
	`bSètus_t
 (*Ë–)Ë
	`BLE_LIB_JT
(99Ë)

	)

3860 
	#RF_C⁄fig
 (–
	`bSètus_t
 (*Ë–
rfC⁄fig_t
 *
pC⁄fig
 )Ë
	`BLE_LIB_JT
(100Ë)

	)

3876 
	#RF_Rx
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 *
txBuf
, uöt8_à
txLí
, uöt8_à
pktRxTy≥
, uöt8_à
pktTxTy≥
 ) ) 
	`BLE_LIB_JT
(101Ë)

	)

3892 
	#RF_Tx
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 *
txBuf
, uöt8_à
txLí
, uöt8_à
pktTxTy≥
, uöt8_à
pktRxTy≥
 ) ) 
	`BLE_LIB_JT
(102Ë)

	)

3901 
	#RF_Shut
 (–
	`bSètus_t
 (*Ë–)Ë
	`BLE_LIB_JT
(103Ë)

	)

3910 
	#RF_SëCh™√l
 (–(*Ë–
uöt32_t
 
ch™√l
 )Ë
	`BLE_LIB_JT
(115Ë)

	)

3919 
	#RF_FªquícyH›pögShut
 (–(*Ë–)Ë
	`BLE_LIB_JT
(116Ë)

	)

3928 
	#RF_FªquícyH›pögTx
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 
ª£ndCou¡
 )Ë
	`BLE_LIB_JT
(117Ë)

	)

3937 
	#RF_FªquícyH›pögRx
 (–
	`bSètus_t
 (*Ë–
uöt32_t
 
timeoutMS
 )Ë
	`BLE_LIB_JT
(118Ë)

	)

3946 
	#RF_B⁄dögEø£
 (–(*Ë–)Ë
	`BLE_LIB_JT
(119Ë)

	)

3955 
	#LL_SögÀCh™√l
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 
ch
 )Ë
	`BLE_LIB_JT
(104Ë)

	)

3966 
	#LL_Te°End
 (–
	`bSètus_t
 (*Ë(
uöt8_t
 *
pPktNum
 )Ë
	`BLE_LIB_JT
(105Ë)

	)

3975 
	#API_LE_Re˚ivîTe°Cmd
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 
rx_ch™√l
 )Ë
	`BLE_LIB_JT
(111Ë)

	)

3987 
	#API_LE_TønsmôãrTe°Cmd
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 
tx_ch™√l
, uöt8_à
Àn
, uöt8_à
∑ylﬂd
, uöt8_à
tx_powî
)Ë
	`BLE_LIB_JT
(112Ë)

	)

3996 
	#API_LE_Te°EndCmd
 (–
	`bSètus_t
 (*Ë–)Ë
	`BLE_LIB_JT
(113Ë)

	)

4005 
	#RFEND_SëSísôivôy
 (–(*Ë–)Ë
	`BLE_LIB_JT
(122Ë)

	)

4014 
	#RFEND_TXCtu√Së
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 *
pP¨m
 )Ë
	`BLE_LIB_JT
(123Ë)

	)

4023 
	#RFEND_TXCtu√Gë
 (–
	`bSètus_t
 (*Ë–
uöt8_t
 *
pP¨m
 )Ë
	`BLE_LIB_JT
(124Ë)

	)

4033 
	#RFEND_SëAdcMode
 (–(*Ë–
uöt8_t
 
mode
 )Ë
	`BLE_LIB_JT
(125Ë)

	)

4039 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/Profile/devinfoservice.c

14 
	~"CONFIG.h
"

15 
	~"devöfo£rvi˚.h
"

33 c⁄° 
uöt8_t
 
	gdevInfoSîvUUID
[
ATT_BT_UUID_SIZE
] = {

34 
LO_UINT16
(
DEVINFO_SERV_UUID
), 
HI_UINT16
(DEVINFO_SERV_UUID)};

37 c⁄° 
uöt8_t
 
	gdevInfoSy°emIdUUID
[
ATT_BT_UUID_SIZE
] = {

38 
LO_UINT16
(
SYSTEM_ID_UUID
), 
HI_UINT16
(SYSTEM_ID_UUID)};

41 c⁄° 
uöt8_t
 
	gdevInfoModñNumbîUUID
[
ATT_BT_UUID_SIZE
] = {

42 
LO_UINT16
(
MODEL_NUMBER_UUID
), 
HI_UINT16
(MODEL_NUMBER_UUID)};

45 c⁄° 
uöt8_t
 
	gdevInfoSîülNumbîUUID
[
ATT_BT_UUID_SIZE
] = {

46 
LO_UINT16
(
SERIAL_NUMBER_UUID
), 
HI_UINT16
(SERIAL_NUMBER_UUID)};

49 c⁄° 
uöt8_t
 
	gdevInfoFúmw¨eRevUUID
[
ATT_BT_UUID_SIZE
] = {

50 
LO_UINT16
(
FIRMWARE_REV_UUID
), 
HI_UINT16
(FIRMWARE_REV_UUID)};

53 c⁄° 
uöt8_t
 
	gdevInfoH¨dw¨eRevUUID
[
ATT_BT_UUID_SIZE
] = {

54 
LO_UINT16
(
HARDWARE_REV_UUID
), 
HI_UINT16
(HARDWARE_REV_UUID)};

57 c⁄° 
uöt8_t
 
	gdevInfoSo·w¨eRevUUID
[
ATT_BT_UUID_SIZE
] = {

58 
LO_UINT16
(
SOFTWARE_REV_UUID
), 
HI_UINT16
(SOFTWARE_REV_UUID)};

61 c⁄° 
uöt8_t
 
	gdevInfoM‰NameUUID
[
ATT_BT_UUID_SIZE
] = {

62 
LO_UINT16
(
MANUFACTURER_NAME_UUID
), 
HI_UINT16
(MANUFACTURER_NAME_UUID)};

65 c⁄° 
uöt8_t
 
	gdevInfo11073CîtUUID
[
ATT_BT_UUID_SIZE
] = {

66 
LO_UINT16
(
IEEE_11073_CERT_DATA_UUID
), 
HI_UINT16
(IEEE_11073_CERT_DATA_UUID)};

69 c⁄° 
uöt8_t
 
	gdevInfoP≈IdUUID
[
ATT_BT_UUID_SIZE
] = {

70 
LO_UINT16
(
PNP_ID_UUID
), 
HI_UINT16
(PNP_ID_UUID)};

89 c⁄° 
g©tAârTy≥_t
 
	gdevInfoSîvi˚
 = {
ATT_BT_UUID_SIZE
, 
devInfoSîvUUID
};

92 
uöt8_t
 
	gdevInfoSy°emIdPr›s
 = 
GATT_PROP_READ
;

93 
uöt8_t
 
	gdevInfoSy°emId
[
DEVINFO_SYSTEM_ID_LEN
] = {0, 0, 0, 0, 0, 0, 0, 0};

96 
uöt8_t
 
	gdevInfoModñNumbîPr›s
 = 
GATT_PROP_READ
;

97 c⁄° 
uöt8_t
 
	gdevInfoModñNumbî
[] = "Model Number";

100 
uöt8_t
 
	gdevInfoSîülNumbîPr›s
 = 
GATT_PROP_READ
;

101 c⁄° 
uöt8_t
 
	gdevInfoSîülNumbî
[] = "Serial Number";

104 
uöt8_t
 
	gdevInfoFúmw¨eRevPr›s
 = 
GATT_PROP_READ
;

105 c⁄° 
uöt8_t
 
	gdevInfoFúmw¨eRev
[] = "Firmware Revision";

108 
uöt8_t
 
	gdevInfoH¨dw¨eRevPr›s
 = 
GATT_PROP_READ
;

109 c⁄° 
uöt8_t
 
	gdevInfoH¨dw¨eRev
[] = "Hardware Revision";

112 
uöt8_t
 
	gdevInfoSo·w¨eRevPr›s
 = 
GATT_PROP_READ
;

113 c⁄° 
uöt8_t
 
	gdevInfoSo·w¨eRev
[] = "Software Revision";

116 
uöt8_t
 
	gdevInfoM‰NamePr›s
 = 
GATT_PROP_READ
;

117 c⁄° 
uöt8_t
 
	gdevInfoM‰Name
[] = "Manufacturer Name";

120 
uöt8_t
 
	gdevInfo11073CîtPr›s
 = 
GATT_PROP_READ
;

121 c⁄° 
uöt8_t
 
	gdevInfo11073Cît
[] = {

122 
DEVINFO_11073_BODY_EXP
,

128 
uöt8_t
 
	gdevInfoP≈IdPr›s
 = 
GATT_PROP_READ
;

129 
uöt8_t
 
	gdevInfoP≈Id
[
DEVINFO_PNP_ID_LEN
] = {

131 
LO_UINT16
(0x07D7), 
HI_UINT16
(0x07D7),

132 
LO_UINT16
(0x0000), 
HI_UINT16
(0x0000),

133 
LO_UINT16
(0x0110), 
HI_UINT16
(0x0110)

140 
g©tAâribuã_t
 
	gdevInfoAârTbl
[] = {

143 {
ATT_BT_UUID_SIZE
, 
¥im¨ySîvi˚UUID
},

144 
GATT_PERMIT_READ
,

146 (
uöt8_t
 *)&
devInfoSîvi˚


151 {
ATT_BT_UUID_SIZE
, 
ch¨a˘îUUID
},

152 
GATT_PERMIT_READ
,

154 &
devInfoSy°emIdPr›s
},

158 {
ATT_BT_UUID_SIZE
, 
devInfoSy°emIdUUID
},

159 
GATT_PERMIT_READ
,

161 (
uöt8_t
 *)
devInfoSy°emId
},

165 {
ATT_BT_UUID_SIZE
, 
ch¨a˘îUUID
},

166 
GATT_PERMIT_READ
,

168 &
devInfoModñNumbîPr›s
},

172 {
ATT_BT_UUID_SIZE
, 
devInfoModñNumbîUUID
},

173 
GATT_PERMIT_READ
,

175 (
uöt8_t
 *)
devInfoModñNumbî
},

179 {
ATT_BT_UUID_SIZE
, 
ch¨a˘îUUID
},

180 
GATT_PERMIT_READ
,

182 &
devInfoSîülNumbîPr›s
},

186 {
ATT_BT_UUID_SIZE
, 
devInfoSîülNumbîUUID
},

187 
GATT_PERMIT_READ
,

189 (
uöt8_t
 *)
devInfoSîülNumbî
},

193 {
ATT_BT_UUID_SIZE
, 
ch¨a˘îUUID
},

194 
GATT_PERMIT_READ
,

196 &
devInfoFúmw¨eRevPr›s
},

200 {
ATT_BT_UUID_SIZE
, 
devInfoFúmw¨eRevUUID
},

201 
GATT_PERMIT_READ
,

203 (
uöt8_t
 *)
devInfoFúmw¨eRev
},

207 {
ATT_BT_UUID_SIZE
, 
ch¨a˘îUUID
},

208 
GATT_PERMIT_READ
,

210 &
devInfoH¨dw¨eRevPr›s
},

214 {
ATT_BT_UUID_SIZE
, 
devInfoH¨dw¨eRevUUID
},

215 
GATT_PERMIT_READ
,

217 (
uöt8_t
 *)
devInfoH¨dw¨eRev
},

221 {
ATT_BT_UUID_SIZE
, 
ch¨a˘îUUID
},

222 
GATT_PERMIT_READ
,

224 &
devInfoSo·w¨eRevPr›s
},

228 {
ATT_BT_UUID_SIZE
, 
devInfoSo·w¨eRevUUID
},

229 
GATT_PERMIT_READ
,

231 (
uöt8_t
 *)
devInfoSo·w¨eRev
},

235 {
ATT_BT_UUID_SIZE
, 
ch¨a˘îUUID
},

236 
GATT_PERMIT_READ
,

238 &
devInfoM‰NamePr›s
},

242 {
ATT_BT_UUID_SIZE
, 
devInfoM‰NameUUID
},

243 
GATT_PERMIT_READ
,

245 (
uöt8_t
 *)
devInfoM‰Name
},

249 {
ATT_BT_UUID_SIZE
, 
ch¨a˘îUUID
},

250 
GATT_PERMIT_READ
,

252 &
devInfo11073CîtPr›s
},

256 {
ATT_BT_UUID_SIZE
, 
devInfo11073CîtUUID
},

257 
GATT_PERMIT_READ
,

259 (
uöt8_t
 *)
devInfo11073Cît
},

263 {
ATT_BT_UUID_SIZE
, 
ch¨a˘îUUID
},

264 
GATT_PERMIT_READ
,

266 &
devInfoP≈IdPr›s
},

270 {
ATT_BT_UUID_SIZE
, 
devInfoP≈IdUUID
},

271 
GATT_PERMIT_READ
,

273 (
uöt8_t
 *)
devInfoP≈Id
}};

278 
bSètus_t
 
devInfo_RódAârCB
(
uöt16_t
 
c⁄nH™dÀ
, 
g©tAâribuã_t
 *
pAâr
,

279 
uöt8_t
 *
pVÆue
, 
uöt16_t
 *
pLí
, uöt16_à
off£t
, uöt16_à
maxLí
, uöt8_à
mëhod
);

285 
g©tSîvi˚CBs_t
 
	gdevInfoCBs
 = {

286 
devInfo_RódAârCB
,

287 
NULL
,

288 
NULL


307 
bSètus_t
 
	$DevInfo_AddSîvi˚
()

310  
	`GATTSîvAµ_Regi°îSîvi˚
(
devInfoAârTbl
,

311 
	`GATT_NUM_ATTRS
(
devInfoAârTbl
),

312 
GATT_MAX_ENCRYPT_KEY_SIZE
,

313 &
devInfoCBs
);

314 
	}
}

330 
bSètus_t
 
	$DevInfo_SëP¨amëî
(
uöt8_t
 
∑øm
, uöt8_à
Àn
, *
vÆue
)

332 
bSètus_t
 
ªt
 = 
SUCCESS
;

334 
∑øm
)

336 
DEVINFO_SYSTEM_ID
:

337 
	`tmos_mem˝y
(
devInfoSy°emId
, 
vÆue
, 
Àn
);

341 
ªt
 = 
INVALIDPARAMETER
;

345  (
ªt
);

346 
	}
}

361 
bSètus_t
 
	$DevInfo_GëP¨amëî
(
uöt8_t
 
∑øm
, *
vÆue
)

363 
bSètus_t
 
ªt
 = 
SUCCESS
;

365 
∑øm
)

367 
DEVINFO_SYSTEM_ID
:

368 
	`tmos_mem˝y
(
vÆue
, 
devInfoSy°emId
, (devInfoSystemId));

371 
DEVINFO_MODEL_NUMBER
:

372 
	`tmos_mem˝y
(
vÆue
, 
devInfoModñNumbî
, (devInfoModelNumber));

374 
DEVINFO_SERIAL_NUMBER
:

375 
	`tmos_mem˝y
(
vÆue
, 
devInfoSîülNumbî
, (devInfoSerialNumber));

378 
DEVINFO_FIRMWARE_REV
:

379 
	`tmos_mem˝y
(
vÆue
, 
devInfoFúmw¨eRev
, (devInfoFirmwareRev));

382 
DEVINFO_HARDWARE_REV
:

383 
	`tmos_mem˝y
(
vÆue
, 
devInfoH¨dw¨eRev
, (devInfoHardwareRev));

386 
DEVINFO_SOFTWARE_REV
:

387 
	`tmos_mem˝y
(
vÆue
, 
devInfoSo·w¨eRev
, (devInfoSoftwareRev));

390 
DEVINFO_MANUFACTURER_NAME
:

391 
	`tmos_mem˝y
(
vÆue
, 
devInfoM‰Name
, (devInfoMfrName));

394 
DEVINFO_11073_CERT_DATA
:

395 
	`tmos_mem˝y
(
vÆue
, 
devInfo11073Cît
, (devInfo11073Cert));

398 
DEVINFO_PNP_ID
:

399 
	`tmos_mem˝y
(
vÆue
, 
devInfoP≈Id
, (devInfoPnpId));

403 
ªt
 = 
INVALIDPARAMETER
;

407  (
ªt
);

408 
	}
}

424 
bSètus_t
 
	$devInfo_RódAârCB
(
uöt16_t
 
c⁄nH™dÀ
, 
g©tAâribuã_t
 *
pAâr
,

425 
uöt8_t
 *
pVÆue
, 
uöt16_t
 *
pLí
, uöt16_à
off£t
, uöt16_à
maxLí
, uöt8_à
mëhod
)

427 
bSètus_t
 
°©us
 = 
SUCCESS
;

428 
uöt16_t
 
uuid
 = 
	`BUILD_UINT16
(
pAâr
->
ty≥
.uuid[0],ÖAttr->type.uuid[1]);

430 
uuid
)

432 
SYSTEM_ID_UUID
:

434 if(
off£t
 >(
devInfoSy°emId
))

436 
°©us
 = 
ATT_ERR_INVALID_OFFSET
;

441 *
pLí
 = 
	`MIN
(
maxLí
, ((
devInfoSy°emId
Ë- 
off£t
));

444 
	`tmos_mem˝y
(
pVÆue
, &
devInfoSy°emId
[
off£t
], *
pLí
);

448 
MODEL_NUMBER_UUID
:

450 if(
off£t
 >((
devInfoModñNumbî
) - 1))

452 
°©us
 = 
ATT_ERR_INVALID_OFFSET
;

457 *
pLí
 = 
	`MIN
(
maxLí
, (((
devInfoModñNumbî
Ë- 1Ë- 
off£t
));

460 
	`tmos_mem˝y
(
pVÆue
, &
devInfoModñNumbî
[
off£t
], *
pLí
);

464 
SERIAL_NUMBER_UUID
:

466 if(
off£t
 >((
devInfoSîülNumbî
) - 1))

468 
°©us
 = 
ATT_ERR_INVALID_OFFSET
;

473 *
pLí
 = 
	`MIN
(
maxLí
, (((
devInfoSîülNumbî
Ë- 1Ë- 
off£t
));

476 
	`tmos_mem˝y
(
pVÆue
, &
devInfoSîülNumbî
[
off£t
], *
pLí
);

480 
FIRMWARE_REV_UUID
:

482 if(
off£t
 >((
devInfoFúmw¨eRev
) - 1))

484 
°©us
 = 
ATT_ERR_INVALID_OFFSET
;

489 *
pLí
 = 
	`MIN
(
maxLí
, (((
devInfoFúmw¨eRev
Ë- 1Ë- 
off£t
));

492 
	`tmos_mem˝y
(
pVÆue
, &
devInfoFúmw¨eRev
[
off£t
], *
pLí
);

496 
HARDWARE_REV_UUID
:

498 if(
off£t
 >((
devInfoH¨dw¨eRev
) - 1))

500 
°©us
 = 
ATT_ERR_INVALID_OFFSET
;

505 *
pLí
 = 
	`MIN
(
maxLí
, (((
devInfoH¨dw¨eRev
Ë- 1Ë- 
off£t
));

508 
	`tmos_mem˝y
(
pVÆue
, &
devInfoH¨dw¨eRev
[
off£t
], *
pLí
);

512 
SOFTWARE_REV_UUID
:

514 if(
off£t
 >((
devInfoSo·w¨eRev
) - 1))

516 
°©us
 = 
ATT_ERR_INVALID_OFFSET
;

521 *
pLí
 = 
	`MIN
(
maxLí
, (((
devInfoSo·w¨eRev
Ë- 1Ë- 
off£t
));

524 
	`tmos_mem˝y
(
pVÆue
, &
devInfoSo·w¨eRev
[
off£t
], *
pLí
);

528 
MANUFACTURER_NAME_UUID
:

530 if(
off£t
 >((
devInfoM‰Name
) - 1))

532 
°©us
 = 
ATT_ERR_INVALID_OFFSET
;

537 *
pLí
 = 
	`MIN
(
maxLí
, (((
devInfoM‰Name
Ë- 1Ë- 
off£t
));

540 
	`tmos_mem˝y
(
pVÆue
, &
devInfoM‰Name
[
off£t
], *
pLí
);

544 
IEEE_11073_CERT_DATA_UUID
:

546 if(
off£t
 >(
devInfo11073Cît
))

548 
°©us
 = 
ATT_ERR_INVALID_OFFSET
;

553 *
pLí
 = 
	`MIN
(
maxLí
, ((
devInfo11073Cît
Ë- 
off£t
));

556 
	`tmos_mem˝y
(
pVÆue
, &
devInfo11073Cît
[
off£t
], *
pLí
);

560 
PNP_ID_UUID
:

562 if(
off£t
 >(
devInfoP≈Id
))

564 
°©us
 = 
ATT_ERR_INVALID_OFFSET
;

569 *
pLí
 = 
	`MIN
(
maxLí
, ((
devInfoP≈Id
Ë- 
off£t
));

572 
	`tmos_mem˝y
(
pVÆue
, &
devInfoP≈Id
[
off£t
], *
pLí
);

577 *
pLí
 = 0;

578 
°©us
 = 
ATT_ERR_ATTR_NOT_FOUND
;

582  (
°©us
);

583 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/Profile/include/devinfoservice.h

11 #i‚de‡
DEVINFOSERVICE_H


12 
	#DEVINFOSERVICE_H


	)

14 #ifde‡
__˝lu•lus


27 
	#DEVINFO_SYSTEM_ID
 0

	)

28 
	#DEVINFO_MODEL_NUMBER
 1

	)

29 
	#DEVINFO_SERIAL_NUMBER
 2

	)

30 
	#DEVINFO_FIRMWARE_REV
 3

	)

31 
	#DEVINFO_HARDWARE_REV
 4

	)

32 
	#DEVINFO_SOFTWARE_REV
 5

	)

33 
	#DEVINFO_MANUFACTURER_NAME
 6

	)

34 
	#DEVINFO_11073_CERT_DATA
 7

	)

35 
	#DEVINFO_PNP_ID
 8

	)

38 
	#DEVINFO_11073_BODY_EMPTY
 0

	)

39 
	#DEVINFO_11073_BODY_IEEE
 1

	)

40 
	#DEVINFO_11073_BODY_CONTINUA
 2

	)

41 
	#DEVINFO_11073_BODY_EXP
 254

	)

44 
	#DEVINFO_SYSTEM_ID_LEN
 8

	)

47 
	#DEVINFO_PNP_ID_LEN
 7

	)

71 
bSètus_t
 
DevInfo_AddSîvi˚
();

87 
bSètus_t
 
DevInfo_SëP¨amëî
(
uöt8_t
 
∑øm
, uöt8_à
Àn
, *
vÆue
);

98 
bSètus_t
 
DevInfo_GëP¨amëî
(
uöt8_t
 
∑øm
, *
vÆue
);

103 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/RVMSIS/core_riscv.c

10 
	~<°döt.h
>

13 #i‡
deföed
(
__CC_ARM
)

14 
	#__ASM
 
__asm


	)

15 
	#__INLINE
 
__ölöe


	)

17 #ñi‡
deföed
(
__ICCARM__
)

18 
	#__ASM
 
__asm


	)

19 
	#__INLINE
 
ölöe


	)

21 #ñi‡
deföed
(
__GNUC__
)

22 
	#__ASM
 
__asm


	)

23 
	#__INLINE
 
ölöe


	)

25 #ñi‡
deföed
(
__TASKING__
)

26 
	#__ASM
 
__asm


	)

27 
	#__INLINE
 
ölöe


	)

34 
uöt32_t
 
	$__gë_FFLAGS
()

36 
uöt32_t
 
ªsu…
;

38 
__ASM
 volatile("csrr %0,"

40 : "Ù"(
ªsu…
));

41  (
ªsu…
);

42 
	}
}

47 
	$__£t_FFLAGS
(
uöt32_t
 
vÆue
)

49 
__ASM
 volatile("csrw fflags, %0"

51 : "r"(
vÆue
));

52 
	}
}

57 
uöt32_t
 
	$__gë_FRM
()

59 
uöt32_t
 
ªsu…
;

61 
__ASM
 volatile("csrr %0,"

63 : "Ù"(
ªsu…
));

64  (
ªsu…
);

65 
	}
}

70 
	$__£t_FRM
(
uöt32_t
 
vÆue
)

72 
__ASM
 volatile("csrw frm, %0"

74 : "r"(
vÆue
));

75 
	}
}

80 
uöt32_t
 
	$__gë_FCSR
()

82 
uöt32_t
 
ªsu…
;

84 
__ASM
 volatile("csrr %0,"

86 : "Ù"(
ªsu…
));

87  (
ªsu…
);

88 
	}
}

93 
	$__£t_FCSR
(
uöt32_t
 
vÆue
)

95 
__ASM
 volatile("csrw fcsr, %0"

97 : "r"(
vÆue
));

98 
	}
}

103 
uöt32_t
 
	$__gë_MSTATUS
()

105 
uöt32_t
 
ªsu…
;

107 
__ASM
 volatile("csrr %0,"

109 : "Ù"(
ªsu…
));

110  (
ªsu…
);

111 
	}
}

116 
	$__£t_MSTATUS
(
uöt32_t
 
vÆue
)

118 
__ASM
 volatile("csrw mstatus, %0"

120 : "r"(
vÆue
));

121 
	}
}

126 
uöt32_t
 
	$__gë_MISA
()

128 
uöt32_t
 
ªsu…
;

130 
__ASM
 volatile("csrr %0,"

132 : "Ù"(
ªsu…
));

133  (
ªsu…
);

134 
	}
}

139 
	$__£t_MISA
(
uöt32_t
 
vÆue
)

141 
__ASM
 volatile("csrw misa, %0"

143 : "r"(
vÆue
));

144 
	}
}

149 
uöt32_t
 
	$__gë_MIE
()

151 
uöt32_t
 
ªsu…
;

153 
__ASM
 volatile("csrr %0,"

155 : "Ù"(
ªsu…
));

156  (
ªsu…
);

157 
	}
}

162 
	$__£t_MIE
(
uöt32_t
 
vÆue
)

164 
__ASM
 volatile("csrw mie, %0"

166 : "r"(
vÆue
));

167 
	}
}

172 
uöt32_t
 
	$__gë_MTVEC
()

174 
uöt32_t
 
ªsu…
;

176 
__ASM
 volatile("csrr %0,"

178 : "Ù"(
ªsu…
));

179  (
ªsu…
);

180 
	}
}

185 
	$__£t_MTVEC
(
uöt32_t
 
vÆue
)

187 
__ASM
 volatile("csrw mtvec, %0"

189 : "r"(
vÆue
));

190 
	}
}

195 
uöt32_t
 
	$__gë_MSCRATCH
()

197 
uöt32_t
 
ªsu…
;

199 
__ASM
 volatile("csrr %0,"

201 : "Ù"(
ªsu…
));

202  (
ªsu…
);

203 
	}
}

208 
	$__£t_MSCRATCH
(
uöt32_t
 
vÆue
)

210 
__ASM
 volatile("csrw mscratch, %0"

212 : "r"(
vÆue
));

213 
	}
}

218 
uöt32_t
 
	$__gë_MEPC
()

220 
uöt32_t
 
ªsu…
;

222 
__ASM
 volatile("csrr %0,"

224 : "Ù"(
ªsu…
));

225  (
ªsu…
);

226 
	}
}

231 
	$__£t_MEPC
(
uöt32_t
 
vÆue
)

233 
__ASM
 volatile("csrw mepc, %0"

235 : "r"(
vÆue
));

236 
	}
}

241 
uöt32_t
 
	$__gë_MCAUSE
()

243 
uöt32_t
 
ªsu…
;

245 
__ASM
 volatile("csrr %0,"

247 : "Ù"(
ªsu…
));

248  (
ªsu…
);

249 
	}
}

254 
	$__£t_MCAUSE
(
uöt32_t
 
vÆue
)

256 
__ASM
 volatile("csrw mcause, %0"

258 : "r"(
vÆue
));

259 
	}
}

264 
uöt32_t
 
	$__gë_MTVAL
()

266 
uöt32_t
 
ªsu…
;

268 
__ASM
 volatile("csrr %0,"

270 : "Ù"(
ªsu…
));

271  (
ªsu…
);

272 
	}
}

277 
	$__£t_MTVAL
(
uöt32_t
 
vÆue
)

279 
__ASM
 volatile("csrw mtval, %0"

281 : "r"(
vÆue
));

282 
	}
}

287 
uöt32_t
 
	$__gë_MIP
()

289 
uöt32_t
 
ªsu…
;

291 
__ASM
 volatile("csrr %0,"

293 : "Ù"(
ªsu…
));

294  (
ªsu…
);

295 
	}
}

300 
	$__£t_MIP
(
uöt32_t
 
vÆue
)

302 
__ASM
 volatile("csrw mip, %0"

304 : "r"(
vÆue
));

305 
	}
}

310 
uöt32_t
 
	$__gë_MCYCLE
()

312 
uöt32_t
 
ªsu…
;

314 
__ASM
 volatile("csrr %0,"

316 : "Ù"(
ªsu…
));

317  (
ªsu…
);

318 
	}
}

323 
	$__£t_MCYCLE
(
uöt32_t
 
vÆue
)

325 
__ASM
 volatile("csrw mcycle, %0"

327 : "r"(
vÆue
));

328 
	}
}

333 
uöt32_t
 
	$__gë_MCYCLEH
()

335 
uöt32_t
 
ªsu…
;

337 
__ASM
 volatile("csrr %0,"

339 : "Ù"(
ªsu…
));

340  (
ªsu…
);

341 
	}
}

346 
	$__£t_MCYCLEH
(
uöt32_t
 
vÆue
)

348 
__ASM
 volatile("csrw mcycleh, %0"

350 : "r"(
vÆue
));

351 
	}
}

356 
uöt32_t
 
	$__gë_MINSTRET
()

358 
uöt32_t
 
ªsu…
;

360 
__ASM
 volatile("csrr %0,"

362 : "Ù"(
ªsu…
));

363  (
ªsu…
);

364 
	}
}

369 
	$__£t_MINSTRET
(
uöt32_t
 
vÆue
)

371 
__ASM
 volatile("csrw minstret, %0"

373 : "r"(
vÆue
));

374 
	}
}

379 
uöt32_t
 
	$__gë_MINSTRETH
()

381 
uöt32_t
 
ªsu…
;

383 
__ASM
 volatile("csrr %0,"

385 : "Ù"(
ªsu…
));

386  (
ªsu…
);

387 
	}
}

392 
	$__£t_MINSTRETH
(
uöt32_t
 
vÆue
)

394 
__ASM
 volatile("csrw minstreth, %0"

396 : "r"(
vÆue
));

397 
	}
}

402 
uöt32_t
 
	$__gë_MVENDORID
()

404 
uöt32_t
 
ªsu…
;

406 
__ASM
 volatile("csrr %0,"

408 : "Ù"(
ªsu…
));

409  (
ªsu…
);

410 
	}
}

415 
uöt32_t
 
	$__gë_MARCHID
()

417 
uöt32_t
 
ªsu…
;

419 
__ASM
 volatile("csrr %0,"

421 : "Ù"(
ªsu…
));

422  (
ªsu…
);

423 
	}
}

428 
uöt32_t
 
	$__gë_MIMPID
()

430 
uöt32_t
 
ªsu…
;

432 
__ASM
 volatile("csrr %0,"

434 : "Ù"(
ªsu…
));

435  (
ªsu…
);

436 
	}
}

441 
uöt32_t
 
	$__gë_MHARTID
()

443 
uöt32_t
 
ªsu…
;

445 
__ASM
 volatile("csrr %0,"

447 : "Ù"(
ªsu…
));

448  (
ªsu…
);

449 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/RVMSIS/core_riscv.h

10 #i‚de‡
__CORE_RV3A_H__


11 
	#__CORE_RV3A_H__


	)

13 #ifde‡
__˝lu•lus


18 #ifde‡
__˝lu•lus


19 
	#__I
 vﬁ©ûê

	)

21 
	#__I
 vﬁ©ûêc⁄°

	)

23 
	#__O
 vﬁ©ûê

	)

24 
	#__IO
 vﬁ©ûê

	)

25 
	#RV_STATIC_INLINE
 
ölöe


	)

31 
DISABLE
 = 0,

32 
ENABLE
 = !
DISABLE


33 } 
	tFun˘i⁄ÆSèã
;

36 
RESET
 = 0,

37 
SET
 = !
RESET


38 } 
	tFœgSètus
, 
	tITSètus
;

41 
__©åibuã__
((
	t∑cked
))

43 
__I
 
uöt32_t
 
ISR
[8];

44 
__I
 
uöt32_t
 
IPR
[8];

45 
__IO
 
uöt32_t
 
ITHRESDR
;

46 
__IO
 
uöt32_t
 
FIBADDRR
;

47 
__IO
 
uöt32_t
 
CFGR
;

48 
__I
 
uöt32_t
 
GISR
;

49 
uöt8_t
 
RESERVED0
[0x10];

50 
__IO
 
uöt32_t
 
FIOFADDRR
[4];

51 
uöt8_t
 
RESERVED1
[0x90];

52 
__O
 
uöt32_t
 
IENR
[8];

53 
uöt8_t
 
RESERVED2
[0x60];

54 
__O
 
uöt32_t
 
IRER
[8];

55 
uöt8_t
 
RESERVED3
[0x60];

56 
__O
 
uöt32_t
 
IPSR
[8];

57 
uöt8_t
 
RESERVED4
[0x60];

58 
__O
 
uöt32_t
 
IPRR
[8];

59 
uöt8_t
 
RESERVED5
[0x60];

60 
__IO
 
uöt32_t
 
IACTR
[8];

61 
uöt8_t
 
RESERVED6
[0xE0];

62 
__IO
 
uöt8_t
 
IPRIOR
[256];

63 
uöt8_t
 
RESERVED7
[0x810];

64 
__IO
 
uöt32_t
 
SCTLR
;

65 } 
	tPFIC_Ty≥
;

68 
__©åibuã__
((
	t∑cked
))

70 
__IO
 
uöt32_t
 
CTLR
;

71 
__IO
 
uöt64_t
 
CNT
;

72 
__IO
 
uöt64_t
 
CMP
;

73 
__IO
 
uöt32_t
 
CNTFG
;

74 } 
	tSysTick_Ty≥
;

76 
	#PFIC
 ((
PFIC_Ty≥
 *)0xE000E000)

	)

77 
	#SysTick
 ((
SysTick_Ty≥
 *)0xE000F000)

	)

79 
	#PFIC_KEY1
 ((
uöt32_t
)0xFA050000)

	)

80 
	#PFIC_KEY2
 ((
uöt32_t
)0xBCAF0000)

	)

81 
	#PFIC_KEY3
 ((
uöt32_t
)0xBEEF0000)

	)

84 
	#__n›
(Ë
__asm__
 vﬁ©ûe("n›")

	)

95 
RV_STATIC_INLINE
 
PFIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

97 
PFIC
->
IENR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn)&0x1F));

107 
RV_STATIC_INLINE
 
PFIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

109 
uöt32_t
 
ãm
;

110 
ãm
 = 
PFIC
->
ITHRESDR
;

111 
PFIC
->
ITHRESDR
 = 0x10;

112 
PFIC
->
IRER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn)&0x1F));

113 
PFIC
->
ITHRESDR
 = 
ãm
;

114 
__n›
();

115 
__n›
();

128 
RV_STATIC_INLINE
 
uöt32_t
 
PFIC_GëSètusIRQ
(
IRQn_Ty≥
 
IRQn
)

130  ((
uöt32_t
)((
PFIC
->
ISR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn)&0x1F))) ? 1 : 0));

143 
RV_STATIC_INLINE
 
uöt32_t
 
PFIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

145  ((
uöt32_t
)((
PFIC
->
IPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn)&0x1F))) ? 1 : 0));

155 
RV_STATIC_INLINE
 
PFIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

157 
PFIC
->
IPSR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn)&0x1F));

167 
RV_STATIC_INLINE
 
PFIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

169 
PFIC
->
IPRR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn)&0x1F));

182 
RV_STATIC_INLINE
 
uöt32_t
 
PFIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

184  ((
uöt32_t
)((
PFIC
->
IACTR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn)&0x1F))) ? 1 : 0));

196 
RV_STATIC_INLINE
 
PFIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt8_t
 
¥i‹ôy
)

198 
PFIC
->
IPRIOR
[(
uöt32_t
)(
IRQn
)] = 
¥i‹ôy
;

209 
RV_STATIC_INLINE
 
PFIC_Fa°INT0CFG
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
addr
)

211 
PFIC
->
FIBADDRR
 = 
addr
 & 0xF0000000;

212 
PFIC
->
FIOFADDRR
[0] = (
IRQn
 << 24Ë| (
addr
 & 0x000FFFFF);

223 
RV_STATIC_INLINE
 
PFIC_Fa°INT1CFG
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
addr
)

225 
PFIC
->
FIBADDRR
 = 
addr
 & 0xF0000000;

226 
PFIC
->
FIOFADDRR
[1] = (
IRQn
 << 24Ë| (
addr
 & 0x000FFFFF);

237 
RV_STATIC_INLINE
 
PFIC_Fa°INT2CFG
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
addr
)

239 
PFIC
->
FIBADDRR
 = 
addr
 & 0xF0000000;

240 
PFIC
->
FIOFADDRR
[2] = (
IRQn
 << 24Ë| (
addr
 & 0x000FFFFF);

251 
RV_STATIC_INLINE
 
PFIC_Fa°INT3CFG
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
addr
)

253 
PFIC
->
FIBADDRR
 = 
addr
 & 0xF0000000;

254 
PFIC
->
FIOFADDRR
[3] = (
IRQn
 << 24Ë| (
addr
 & 0x000FFFFF);

262 
__©åibuã__
((
Æways_ölöe
)Ë
RV_STATIC_INLINE
 
__SEV
()

264 
PFIC
->
SCTLR
 |= (1 << 3);

272 
__©åibuã__
((
Æways_ölöe
)Ë
RV_STATIC_INLINE
 
__WFI
()

274 
PFIC
->
SCTLR
 &= ~(1 << 3);

275 
__asm__
 volatile("wfi");

283 
__©åibuã__
((
Æways_ölöe
)Ë
RV_STATIC_INLINE
 
__WFE
()

285 
PFIC
->
SCTLR
 |= (1 << 3) | (1 << 5);

286 
__asm__
 volatile("wfi");

287 
PFIC
->
SCTLR
 |= (1 << 3);

288 
__asm__
 volatile("wfi");

300 
RV_STATIC_INLINE
 
PFIC_SëFa°IRQ
(
uöt32_t
 
addr
, 
IRQn_Ty≥
 
IRQn
, 
uöt8_t
 
num
)

302 if(
num
 > 3)

304 
PFIC
->
FIBADDRR
 = 
addr
;

305 
PFIC
->
FIOFADDRR
[
num
] = ((
uöt32_t
)
IRQn
 << 24Ë| (
addr
 & 0xfffff);

313 
RV_STATIC_INLINE
 
PFIC_Sy°emRe£t
()

315 
PFIC
->
CFGR
 = 
PFIC_KEY3
 | (1 << 7);

325 
RV_STATIC_INLINE
 
PFIC_HÆtPushCfg
(
Fun˘i⁄ÆSèã
 
NewSèã
)

327 if(
NewSèã
 !
DISABLE
)

329 
PFIC
->
CFGR
 = 
PFIC_KEY1
;

333 
PFIC
->
CFGR
 = 
PFIC_KEY1
 | (1 << 0);

344 
RV_STATIC_INLINE
 
PFIC_INTNe°Cfg
(
Fun˘i⁄ÆSèã
 
NewSèã
)

346 if(
NewSèã
 !
DISABLE
)

348 
PFIC
->
CFGR
 = 
PFIC_KEY1
;

352 
PFIC
->
CFGR
 = 
PFIC_KEY1
 | (1 << 1);

356 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFFFFFFFFFFF)

	)

357 
	#SysTick_CTRL_RELOAD_Msk
 (1 << 8)

	)

358 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1 << 2)

	)

359 
	#SysTick_CTRL_TICKINT_Msk
 (1 << 1)

	)

360 
	#SysTick_CTRL_ENABLE_Msk
 (1 << 0)

	)

371 
RV_STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(
uöt64_t
 
ticks
)

373 if((
ticks
 - 1Ë> 
SysTick_LOAD_RELOAD_Msk
)

376 
SysTick
->
CMP
 = 
ticks
 - 1;

377 
PFIC_E«bÀIRQ
(
SysTick_IRQn
);

378 
SysTick
->
CTLR
 = 
SysTick_CTRL_RELOAD_Msk
 |

379 
SysTick_CTRL_CLKSOURCE_Msk
 |

380 
SysTick_CTRL_TICKINT_Msk
 |

381 
SysTick_CTRL_ENABLE_Msk
;

385 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/Startup/startup_CH573.S

11 .
	g£˘i⁄
 .
	göô
,"ax",@
	g¥ogbôs


12 .
globÆ
 
	g_°¨t


13 .
	gÆign
 1

14 
	g_°¨t
:

15 
j
 
h™dÀ_ª£t


17 .
£˘i⁄
 .
ve˘‹
,"ax",@
	g¥ogbôs


18 .
	gÆign
 1

19 
	g_ve˘‹_ba£
:

20 .
›ti⁄
 
n‹vc
;

21 .
	gw‹d
 0

22 .
	gw‹d
 0

23 
j
 
NMI_H™dÀr


24 
j
 
	gH¨dFau…_H™dÀr


25 .
	gw‹d
 0

26 .
	gw‹d
 0

27 .
	gw‹d
 0

28 .
	gw‹d
 0

29 .
	gw‹d
 0

30 .
	gw‹d
 0

31 .
	gw‹d
 0

32 .
	gw‹d
 0

33 
j
 
	gSysTick_H™dÀr


34 .
	gw‹d
 0

35 
j
 
	gSW_H™dÀr


36 .
	gw‹d
 0

38 
j
 
TMR0_IRQH™dÀr


39 
j
 
GPIOA_IRQH™dÀr


40 
j
 
GPIOB_IRQH™dÀr


41 
j
 
SPI0_IRQH™dÀr


42 
j
 
BB_IRQH™dÀr


43 
j
 
LLE_IRQH™dÀr


44 
j
 
	gUSB_IRQH™dÀr


45 .
	gw‹d
 0

46 
j
 
TMR1_IRQH™dÀr


47 
j
 
TMR2_IRQH™dÀr


48 
j
 
UART0_IRQH™dÀr


49 
j
 
UART1_IRQH™dÀr


50 
j
 
RTC_IRQH™dÀr


51 
j
 
	gADC_IRQH™dÀr


52 .
	gw‹d
 0

53 
j
 
PWMX_IRQH™dÀr


54 
j
 
TMR3_IRQH™dÀr


55 
j
 
UART2_IRQH™dÀr


56 
j
 
UART3_IRQH™dÀr


57 
j
 
	gWDOG_BAT_IRQH™dÀr


59 .
›ti⁄
 
	grvc
;

61 .
	g£˘i⁄
 .
	gve˘‹_h™dÀr
, "ax", @
	g¥ogbôs


62 .
wók
 
	gNMI_H™dÀr


63 .
wók
 
	gH¨dFau…_H™dÀr


64 .
wók
 
	gSysTick_H™dÀr


65 .
wók
 
	gSW_H™dÀr


66 .
wók
 
	gTMR0_IRQH™dÀr


67 .
wók
 
	gGPIOA_IRQH™dÀr


68 .
wók
 
	gGPIOB_IRQH™dÀr


69 .
wók
 
	gSPI0_IRQH™dÀr


70 .
wók
 
	gBB_IRQH™dÀr


71 .
wók
 
	gLLE_IRQH™dÀr


72 .
wók
 
	gUSB_IRQH™dÀr


73 .
wók
 
	gTMR1_IRQH™dÀr


74 .
wók
 
	gTMR2_IRQH™dÀr


75 .
wók
 
	gUART0_IRQH™dÀr


76 .
wók
 
	gUART1_IRQH™dÀr


77 .
wók
 
	gRTC_IRQH™dÀr


78 .
wók
 
	gADC_IRQH™dÀr


79 .
wók
 
	gPWMX_IRQH™dÀr


80 .
wók
 
	gTMR3_IRQH™dÀr


81 .
wók
 
	gUART2_IRQH™dÀr


82 .
wók
 
	gUART3_IRQH™dÀr


83 .
wók
 
WDOG_BAT_IRQH™dÀr


85 
	gNMI_H™dÀr
: 1: 
j
 1b

86 
H¨dFau…_H™dÀr
: 1: 
j
 1b

87 
SysTick_H™dÀr
: 1: 
j
 1b

88 
SW_H™dÀr
: 1: 
j
 1b

89 
TMR0_IRQH™dÀr
: 1: 
j
 1b

90 
GPIOA_IRQH™dÀr
: 1: 
j
 1b

91 
GPIOB_IRQH™dÀr
: 1: 
j
 1b

92 
SPI0_IRQH™dÀr
: 1: 
j
 1b

93 
BB_IRQH™dÀr
: 1: 
j
 1b

94 
LLE_IRQH™dÀr
: 1: 
j
 1b

95 
USB_IRQH™dÀr
: 1: 
j
 1b

96 
TMR1_IRQH™dÀr
: 1: 
j
 1b

97 
TMR2_IRQH™dÀr
: 1: 
j
 1b

98 
UART0_IRQH™dÀr
: 1: 
j
 1b

99 
UART1_IRQH™dÀr
: 1: 
j
 1b

100 
RTC_IRQH™dÀr
: 1: 
j
 1b

101 
ADC_IRQH™dÀr
: 1: 
j
 1b

102 
PWMX_IRQH™dÀr
: 1: 
j
 1b

103 
TMR3_IRQH™dÀr
: 1: 
j
 1b

104 
UART2_IRQH™dÀr
: 1: 
j
 1b

105 
UART3_IRQH™dÀr
: 1: 
j
 1b

106 
WDOG_BAT_IRQH™dÀr
: 1: 
j
 1b

108 .
£˘i⁄
 .
h™dÀ_ª£t
,"ax",@
	g¥ogbôs


109 .
wók
 
	gh™dÀ_ª£t


110 .
	gÆign
 1

111 
	gh™dÀ_ª£t
:

112 .
›ti⁄
 
push


113 .
›ti⁄
 
n‹ñax


114 
œ
 
gp
, 
	g__globÆ_poöãr$


115 .
›ti⁄
 
	gp›


117 
œ
 
•
, 
	g_eu§°ack


121 
œ
 
a0
, 
_highcode_lma


122 
œ
 
	ga1
, 
_highcode_vma_°¨t


123 
œ
 
	ga2
, 
_highcode_vma_íd


124 
bgeu
 
	ga1
, 
	ga2
, 2f

126 
lw
 
t0
, (
	ga0
)

127 
sw
 
	gt0
, (
	ga1
)

128 
addi
 
	ga0
,á0, 4

129 
addi
 
	ga1
,á1, 4

130 
b…u
 
	ga1
, 
	ga2
, 1b

134 
œ
 
a0
, 
_d©a_lma


135 
œ
 
	ga1
, 
_d©a_vma


136 
œ
 
	ga2
, 
_ed©a


137 
bgeu
 
	ga1
, 
	ga2
, 2f

139 
lw
 
t0
, (
	ga0
)

140 
sw
 
	gt0
, (
	ga1
)

141 
addi
 
	ga0
,á0, 4

142 
addi
 
	ga1
,á1, 4

143 
b…u
 
	ga1
, 
	ga2
, 1b

146 
œ
 
a0
, 
_sbss


147 
œ
 
	ga1
, 
_ebss


148 
bgeu
 
	ga0
, 
	ga1
, 2f

150 
sw
 
zîo
, (
	ga0
)

151 
addi
 
	ga0
,á0, 4

152 
b…u
 
	ga0
, 
	ga1
, 1b

154 
li
 
t0
, 0x88

155 
c§s
 
	gm°©us
, 
t0


156 
œ
 
	gt0
, 
_ve˘‹_ba£


157 
‹i
 
	gt0
,Å0, 1

158 
c§w
 
	gmtvec
, 
t0


159 
œ
 
	gt0
, 
maö


160 
c§w
 
	gmïc
, 
t0


167 
	gmªt


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_adc.c

11 
	~"CH57x_comm⁄.h
"

22 sig√d 
	$ADC_D©aCÆib_Rough
()

24 
uöt16_t
 
i
;

25 
uöt32_t
 
sum
 = 0;

26 
uöt8_t
 
ch
 = 0;

27 
uöt8_t
 
˘æ
 = 0;

29 
ch
 = 
R8_ADC_CHANNEL
;

30 
˘æ
 = 
R8_ADC_CFG
;

32 
R8_ADC_CFG
 = 0;

33 
	`ADC_Ch™√lCfg
(6);

34 
R8_ADC_CFG
 |
RB_ADC_OFS_TEST
 | 
RB_ADC_POWER_ON
 | (2 << 4);

35 
R8_ADC_CONVERT
 = 
RB_ADC_START
;

36 
R8_ADC_CONVERT
 & 
RB_ADC_START
);

37 
i
 = 0; i < 16; i++)

39 
R8_ADC_CONVERT
 = 
RB_ADC_START
;

40 
R8_ADC_CONVERT
 & 
RB_ADC_START
);

41 
sum
 +(~
R16_ADC_DATA
Ë& 
RB_ADC_DATA
;

43 
sum
 = (sum + 8) >> 4;

44 
R8_ADC_CFG
 &~
RB_ADC_OFS_TEST
;

46 
R8_ADC_CHANNEL
 = 
ch
;

47 
R8_ADC_CFG
 = 
˘æ
;

48  (2048 - 
sum
);

49 
	}
}

61 
	$ADC_ExtSögÀChSampInô
(
ADC_SampClkTy≥Def
 
•
, 
ADC_Sig«lPGATy≥Def
 
ga
)

63 
R8_TKEY_CFG
 &~
RB_TKEY_PWR_ON
;

64 
R8_ADC_CFG
 = 
RB_ADC_POWER_ON
 | 
RB_ADC_BUF_EN
 | (
•
 << 6Ë| (
ga
 << 4);

65 
	}
}

77 
	$ADC_ExtDiffChSampInô
(
ADC_SampClkTy≥Def
 
•
, 
ADC_Sig«lPGATy≥Def
 
ga
)

79 
R8_TKEY_CFG
 &~
RB_TKEY_PWR_ON
;

80 
R8_ADC_CFG
 = 
RB_ADC_POWER_ON
 | 
RB_ADC_DIFF_EN
 | (
•
 << 6Ë| (
ga
 << 4);

81 
	}
}

92 
	$ADC_I¡îTSSampInô
()

94 
R8_TKEY_CFG
 &~
RB_TKEY_PWR_ON
;

95 
R8_TEM_SENSOR
 = 
RB_TEM_SEN_PWR_ON
;

96 
R8_ADC_CHANNEL
 = 
CH_INTE_VTEMP
;

97 
R8_ADC_CFG
 = 
RB_ADC_POWER_ON
 | 
RB_ADC_DIFF_EN
 | (3 << 4);

98 
	}
}

109 
	$ADC_I¡îBATSampInô
()

111 
R8_TKEY_CFG
 &~
RB_TKEY_PWR_ON
;

112 
R8_ADC_CHANNEL
 = 
CH_INTE_VBAT
;

113 
R8_ADC_CFG
 = 
RB_ADC_POWER_ON
 | 
RB_ADC_BUF_EN
 | (0 << 4);

114 
	}
}

125 
	$TouchKey_ChSampInô
()

127 
R8_ADC_CFG
 = 
RB_ADC_POWER_ON
 | 
RB_ADC_BUF_EN
 | (2 << 4);

128 
R8_TKEY_CFG
 |
RB_TKEY_PWR_ON
;

129 
	}
}

140 
uöt16_t
 
	$ADC_ExcutSögÀC⁄vî
()

142 
R8_ADC_CONVERT
 = 
RB_ADC_START
;

143 
R8_ADC_CONVERT
 & 
RB_ADC_START
);

145  (
R16_ADC_DATA
 & 
RB_ADC_DATA
);

146 
	}
}

158 
uöt16_t
 
	$TouchKey_ExcutSögÀC⁄vî
(
uöt8_t
 
ch¨g
, uöt8_à
disch
)

160 
R8_TKEY_COUNT
 = (
disch
 << 5Ë| (
ch¨g
 & 0x1f);

161 
R8_TKEY_CONVERT
 = 
RB_TKEY_START
;

162 
R8_TKEY_CONVERT
 & 
RB_TKEY_START
);

163  (
R16_ADC_DATA
 & 
RB_ADC_DATA
);

164 
	}
}

175 
	$ADC_AutoC⁄vîCy˛e
(
uöt8_t
 
cy˛e
)

177 
R8_ADC_AUTO_CYCLE
 = 
cy˛e
;

178 
	}
}

192 
	$ADC_DMACfg
(
uöt8_t
 
s
, 
uöt16_t
 
°¨tAddr
, uöt16_à
ídAddr
, 
ADC_DMAModeTy≥Def
 
m
)

194 if(
s
 =
DISABLE
)

196 
R8_ADC_CTRL_DMA
 &~
RB_ADC_DMA_ENABLE
;

200 
R16_ADC_DMA_BEG
 = 
°¨tAddr
;

201 
R16_ADC_DMA_END
 = 
ídAddr
;

202 if(
m
)

204 
R8_ADC_CTRL_DMA
 |
RB_ADC_DMA_LOOP
 | 
RB_ADC_IE_DMA_END
 | 
RB_ADC_DMA_ENABLE
;

208 
R8_ADC_CTRL_DMA
 &~
RB_ADC_DMA_LOOP
;

209 
R8_ADC_CTRL_DMA
 |
RB_ADC_IE_DMA_END
 | 
RB_ADC_DMA_ENABLE
;

212 
	}
}

224 
	$adc_to_ãm≥øtuª_˚lsius
(
uöt16_t
 
adc_vÆ
)

226 
uöt32_t
 
C25
 = 0;

227 
ãmp
;

229 
C25
 = (*((
PUINT32
)
ROM_CFG_TMP_25C
));

232 
ãmp
 = (((
C25
 >> 16) & 0xFFFF) ? ((C25 >> 16) & 0xFFFF) : 25) + \

233 (
adc_vÆ
 - (()(
C25
 & 0xFFFF))) * 10 / 27;

235  (
ãmp
);

236 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_clk.c

11 
	~"CH57x_comm⁄.h
"

13 
uöt16_t
 
	gI¡32K_Tu√_FLASH
 = 0;

14 
uöt16_t
 
	gI¡32K_Tu√_RAM
 = 0;

25 
	$LClk32K_Sñe˘
(
LClk32KTy≥Def
 
hc
)

27 
uöt8_t
 
cfg
 = 
R8_CK32K_CONFIG
;

29 if(
hc
 =
Clk32K_LSI
)

31 
cfg
 &~
RB_CLK_OSC32K_XT
;

35 
cfg
 |
RB_CLK_OSC32K_XT
;

38 
	`sys_ß„_ac˚ss_íabÀ
();

39 
R8_CK32K_CONFIG
 = 
cfg
;

40 
	`sys_ß„_ac˚ss_dißbÀ
();

41 
	}
}

52 
	$HSECFG_Cuºít
(
HSECuºítTy≥Def
 
c
)

54 
uöt8_t
 
x32M_c
;

56 
x32M_c
 = 
R8_XT32M_TUNE
;

57 
x32M_c
 = (x32M_¯& 0xfcË| (
c
 & 0x03);

59 
	`sys_ß„_ac˚ss_íabÀ
();

60 
R8_XT32M_TUNE
 = 
x32M_c
;

61 
	`sys_ß„_ac˚ss_dißbÀ
();

62 
	}
}

73 
	$HSECFG_C≠acô™˚
(
HSEC≠Ty≥Def
 
c
)

75 
uöt8_t
 
x32M_c
;

77 
x32M_c
 = 
R8_XT32M_TUNE
;

78 
x32M_c
 = (x32M_¯& 0x8fË| (
c
 << 4);

80 
	`sys_ß„_ac˚ss_íabÀ
();

81 
R8_XT32M_TUNE
 = 
x32M_c
;

82 
	`sys_ß„_ac˚ss_dißbÀ
();

83 
	}
}

94 
	$LSECFG_Cuºít
(
LSECuºítTy≥Def
 
c
)

96 
uöt8_t
 
x32K_c
;

98 
x32K_c
 = 
R8_XT32K_TUNE
;

99 
x32K_c
 = (x32K_¯& 0xfcË| (
c
 & 0x03);

101 
	`sys_ß„_ac˚ss_íabÀ
();

102 
R8_XT32K_TUNE
 = 
x32K_c
;

103 
	`sys_ß„_ac˚ss_dißbÀ
();

104 
	}
}

115 
	$LSECFG_C≠acô™˚
(
LSEC≠Ty≥Def
 
c
)

117 
uöt8_t
 
x32K_c
;

119 
x32K_c
 = 
R8_XT32K_TUNE
;

120 
x32K_c
 = (x32K_¯& 0x0fË| (
c
 << 4);

122 
	`sys_ß„_ac˚ss_íabÀ
();

123 
R8_XT32K_TUNE
 = 
x32K_c
;

124 
	`sys_ß„_ac˚ss_dißbÀ
();

125 
	}
}

136 
uöt16_t
 
	$CÆibøti⁄_LSI_FLASH
()

138 
uöt16_t
 
ªv
, 
ba£v
;

139 
uöt32_t
 
ˇlv
;

140 
uöt16_t
 
i
;

141 
uöt16_t
 
loc
, 
loc_t
;

142 
CNT_STEP_K
;

143 sig√d 
diff_1
, 
diff_2
, 
diffc
;

144 
uöt8_t
 
k
 = 0;

147 
ªv
 = 
R16_CLK_SYS_CFG
 & 0xff;

148 if((
ªv
 & 
RB_CLK_SYS_MOD
) == (2 << 6))

150 
ˇlv
 = ((5 * 32000000 + (
CAB_LSIFQ
 >> 1)) / CAB_LSIFQ);

151 
CNT_STEP_K
 = -1.6;

153 if((
ªv
 & 
RB_CLK_SYS_MOD
) == (1 << 6))

155 
ˇlv
 = (((
uöt32_t
)5 * 480000000 / (
ªv
 & 0x1fË+ (
CAB_LSIFQ
 >> 1)) / CAB_LSIFQ);

156 
CNT_STEP_K
 = -0.1 * (
ªv
 & 0x1f);

158 if((
ªv
 & 
RB_CLK_SYS_MOD
) == (0 << 6))

160 
ˇlv
 = ((5 * 32000000 / (
ªv
 & 0x1fË+ (
CAB_LSIFQ
 >> 1)) / CAB_LSIFQ);

161 
CNT_STEP_K
 = -1.6 * (
ªv
 & 0x1f);

165 
ˇlv
 = (5);

166 
CNT_STEP_K
 = 0;

168 
ba£v
 = 
ˇlv
;

170 if(
I¡32K_Tu√_FLASH
)

172 
loc
 = 
I¡32K_Tu√_FLASH
;

176 
loc
 = 2048;

181 
diff_2
 = 0;

182 
diffc
 = 0;

184 
	`sys_ß„_ac˚ss_íabÀ
();

185 
R8_OSC_CAL_CTRL
 = 
RB_OSC_CNT_EN
;

188 
	`sys_ß„_ac˚ss_íabÀ
();

189 
R16_INT32K_TUNE
 = 
loc
;

190 
	`sys_ß„_ac˚ss_dißbÀ
();

193 !(
R8_OSC_CAL_CTRL
 & 
RB_OSC_CNT_HALT
));

194 
i
 = 
R16_OSC_CAL_CNT
;

195 
R8_OSC_CAL_CTRL
 & 
RB_OSC_CNT_HALT
);

196 !(
R8_OSC_CAL_CTRL
 & 
RB_OSC_CNT_HALT
));

197 
i
 = 
R16_OSC_CAL_CNT
;

198 
k
++;

199 
diff_1
 = 
i
 - 
ba£v
;

201 
I¡32K_Tu√_FLASH
 = 
loc
;

202 if(
diff_1
 == 0)

206 if((
diff_1
 * 
diff_2
) < 0)

208 if((
diffc
 == 1) || (diffc == -1) || (diffc == 0))

211 if(
diff_2
 < 0)

213 
diff_2
 = ~(diff_2 - 1);

217 
diff_1
 = ~(diff_1 - 1);

220 if(
diff_1
 > 
diff_2
)

222 
	`sys_ß„_ac˚ss_íabÀ
();

223 
R16_INT32K_TUNE
 = 
loc_t
;

224 
	`sys_ß„_ac˚ss_dißbÀ
();

226  (
diff_2
 * 10000 / 
ba£v
);

230  (
diff_1
 * 10000 / 
ba£v
);

235 if(((
i
 > 
ba£v
 ? (i - basev) : (basev - i)) * 10000 / basev) < 11)

237  ((
i
 > 
ba£v
 ? (i - basev) : (basev - i)) * 10000 / basev);

240 
diff_2
 = 
diff_1
;

241 
loc_t
 = 
loc
;

242 
diffc
 = 
diff_1
 * 
CNT_STEP_K
;

243 
loc
 =Üo¯- 
diffc
;

244 if(
loc
 =
loc_t
)

246 if(
diff_1
 > 0)

248 
loc
 =Üoc + 1;

252 
loc
 =Üoc - 1;

255 } 
k
 < 20);

257 
I¡32K_Tu√_FLASH
 = 
loc
;

258  ((
i
 > 
ba£v
 ? (i - basev) : (basev - i)) * 10000 / basev);

259 
	}
}

270 
__©åibuã__
((
£˘i⁄
(".highcode")))

271 
uöt16_t
 
	$Gë_CÆibøti⁄_C¡_RAM
(
uöt16_t
 
loc
)

273 
uöt16_t
 
i
;

275 
	`sys_ß„_ac˚ss_íabÀ
();

276 
R16_INT32K_TUNE
 = 
loc
;

277 
	`sys_ß„_ac˚ss_dißbÀ
();

279 !(
R8_OSC_CAL_CTRL
 & 
RB_OSC_CNT_HALT
));

280 
i
 = 
R16_OSC_CAL_CNT
;

281 
R8_OSC_CAL_CTRL
 & 
RB_OSC_CNT_HALT
);

282 !(
R8_OSC_CAL_CTRL
 & 
RB_OSC_CNT_HALT
));

283 
i
 = 
R16_OSC_CAL_CNT
;

284  
i
;

285 
	}
}

296 
uöt16_t
 
	$CÆibøti⁄_LSI_RAM
()

298 
uöt16_t
 
ªv
, 
ba£v
;

299 
uöt32_t
 
ˇlv
;

300 
uöt16_t
 
i
;

301 
uöt16_t
 
loc
, 
loc_t
;

302 
CNT_STEP_K
;

303 sig√d 
diff_1
, 
diff_2
, 
diffc
;

304 
uöt8_t
 
k
 = 0;

307 
ªv
 = 
R16_CLK_SYS_CFG
 & 0xff;

308 if((
ªv
 & 
RB_CLK_SYS_MOD
) == (2 << 6))

310 
ˇlv
 = ((5 * 32000000 + (
CAB_LSIFQ
 >> 1)) / CAB_LSIFQ);

311 
CNT_STEP_K
 = -1.6;

313 if((
ªv
 & 
RB_CLK_SYS_MOD
) == (1 << 6))

315 
ˇlv
 = (((
uöt32_t
)5 * 480000000 / (
ªv
 & 0x1fË+ (
CAB_LSIFQ
 >> 1)) / CAB_LSIFQ);

316 
CNT_STEP_K
 = -0.1 * (
ªv
 & 0x1f);

318 if((
ªv
 & 
RB_CLK_SYS_MOD
) == (0 << 6))

320 
ˇlv
 = ((5 * 32000000 / (
ªv
 & 0x1fË+ (
CAB_LSIFQ
 >> 1)) / CAB_LSIFQ);

321 
CNT_STEP_K
 = -1.6 * (
ªv
 & 0x1f);

325 
ˇlv
 = (5);

326 
CNT_STEP_K
 = 0;

328 
ba£v
 = 
ˇlv
;

330 if(
I¡32K_Tu√_RAM
)

332 
loc
 = 
I¡32K_Tu√_RAM
;

336 
loc
 = 2048;

341 
diff_2
 = 0;

342 
diffc
 = 0;

344 
	`sys_ß„_ac˚ss_íabÀ
();

345 
R8_OSC_CAL_CTRL
 = 
RB_OSC_CNT_EN
;

348 
i
 = 
	`Gë_CÆibøti⁄_C¡_RAM
(
loc
);

349 
k
++;

350 
diff_1
 = 
i
 - 
ba£v
;

352 
I¡32K_Tu√_RAM
 = 
loc
;

353 if(
diff_1
 == 0)

357 if((
diff_1
 * 
diff_2
) < 0)

359 if((
diffc
 == 1) || (diffc == -1) || (diffc == 0))

362 if(
diff_2
 < 0)

364 
diff_2
 = ~(diff_2 - 1);

368 
diff_1
 = ~(diff_1 - 1);

371 if(
diff_1
 > 
diff_2
)

373 
	`sys_ß„_ac˚ss_íabÀ
();

374 
R16_INT32K_TUNE
 = 
loc_t
;

375 
	`sys_ß„_ac˚ss_dißbÀ
();

377  (
diff_2
 * 10000 / 
ba£v
);

381  (
diff_1
 * 10000 / 
ba£v
);

386 if(((
i
 > 
ba£v
 ? (i - basev) : (basev - i)) * 10000 / basev) < 11)

388  ((
i
 > 
ba£v
 ? (i - basev) : (basev - i)) * 10000 / basev);

391 
diff_2
 = 
diff_1
;

392 
loc_t
 = 
loc
;

393 
diffc
 = 
diff_1
 * 
CNT_STEP_K
;

394 
loc
 =Üo¯- 
diffc
;

395 if(
loc
 =
loc_t
)

397 if(
diff_1
 > 0)

399 
loc
 =Üoc + 1;

403 
loc
 =Üoc - 1;

406 } 
k
 < 20);

408 
I¡32K_Tu√_RAM
 = 
loc
;

409  ((
i
 > 
ba£v
 ? (i - basev) : (basev - i)) * 10000 / basev);

410 
	}
}

421 
	$LSI_SëTu√_FLASH
()

423 
	`sys_ß„_ac˚ss_íabÀ
();

424 
R16_INT32K_TUNE
 = 
I¡32K_Tu√_FLASH
;

425 
	`sys_ß„_ac˚ss_dißbÀ
();

426 
	}
}

437 
	$LSI_SëTu√_RAM
()

439 
	`sys_ß„_ac˚ss_íabÀ
();

440 
R16_INT32K_TUNE
 = 
I¡32K_Tu√_RAM
;

441 
	`sys_ß„_ac˚ss_dißbÀ
();

442 
	}
}

458 
	$RTC_InôTime
(
uöt16_t
 
y
, uöt16_à
m⁄
, uöt16_à
d
, uöt16_à
h
, uöt16_à
m
, uöt16_à
s
)

460 
uöt32_t
 
t
;

461 
uöt16_t
 
yór
, 
m⁄th
, 
day
, 
£c2
, 
t32k
;

462 vﬁ©ûê
uöt8_t
 
˛k_pö
;

464 
yór
 = 
y
;

465 
m⁄th
 = 
m⁄
;

466 
day
 = 0;

467 
yór
 > 
BEGYEAR
)

469 
day
 +
	`YórLígth
(
yór
 - 1);

470 
yór
--;

472 
m⁄th
 > 1)

474 
day
 +
	`m⁄thLígth
(
	`IsLópYór
(
y
), 
m⁄th
 - 2);

475 
m⁄th
--;

478 
day
 +
d
 - 1;

479 
£c2
 = (
h
 % 24Ë* 1800 + 
m
 * 30 + 
s
 / 2;

480 
t32k
 = (
s
 & 1) ? (0x8000) : (0);

481 
t
 = 
£c2
;

482 
t
 =Å << 16 | 
t32k
;

486 
˛k_pö
 = (
R8_CK32K_CONFIG
 & 
RB_32K_CLK_PIN
);

487 } (
˛k_pö
 !(
R8_CK32K_CONFIG
 & 
RB_32K_CLK_PIN
)) || (!clk_pin));

489 
	`sys_ß„_ac˚ss_íabÀ
();

490 
R32_RTC_TRIG
 = 
day
;

491 
R8_RTC_MODE_CTRL
 |
RB_RTC_LOAD_HI
;

492 
R32_RTC_TRIG
 = 
t
;

493 
R8_RTC_MODE_CTRL
 |
RB_RTC_LOAD_LO
;

494 
	`sys_ß„_ac˚ss_dißbÀ
();

495 
	}
}

511 
	$RTC_GëTime
(
uöt16_t
 *
py
, uöt16_à*
pm⁄
, uöt16_à*
pd
, uöt16_à*
ph
, uöt16_à*
pm
, uöt16_à*
ps
)

513 
uöt32_t
 
t
;

514 
uöt16_t
 
day
, 
£c2
, 
t32k
;

516 
day
 = 
R32_RTC_CNT_DAY
 & 0x3FFF;

517 
£c2
 = 
R16_RTC_CNT_2S
;

518 
t32k
 = 
R16_RTC_CNT_32K
;

520 
t
 = 
£c2
 * 2 + ((
t32k
 < 0x8000) ? 0 : 1);

522 *
py
 = 
BEGYEAR
;

523 
day
 >
	`YórLígth
(*
py
))

525 
day
 -
	`YórLígth
(*
py
);

526 (*
py
)++;

529 *
pm⁄
 = 0;

530 
day
 >
	`m⁄thLígth
(
	`IsLópYór
(*
py
), *
pm⁄
))

532 
day
 -
	`m⁄thLígth
(
	`IsLópYór
(*
py
), *
pm⁄
);

533 (*
pm⁄
)++;

535 (*
pm⁄
)++;

536 *
pd
 = 
day
 + 1;

537 *
ph
 = 
t
 / 3600;

538 *
pm
 = 
t
 % 3600 / 60;

539 *
ps
 = 
t
 % 60;

540 
	}
}

551 
	$RTC_SëCy˛e32k
(
uöt32_t
 
cyc
)

553 vﬁ©ûê
uöt8_t
 
˛k_pö
;

557 
˛k_pö
 = (
R8_CK32K_CONFIG
 & 
RB_32K_CLK_PIN
);

558 } (
˛k_pö
 !(
R8_CK32K_CONFIG
 & 
RB_32K_CLK_PIN
)) || (!clk_pin));

560 
	`sys_ß„_ac˚ss_íabÀ
();

561 
R32_RTC_TRIG
 = 
cyc
;

562 
	`sys_ß„_ac˚ss_íabÀ
();

563 
R8_RTC_MODE_CTRL
 |
RB_RTC_LOAD_LO
;

564 
	`sys_ß„_ac˚ss_dißbÀ
();

565 
	}
}

576 
uöt32_t
 
	$RTC_GëCy˛e32k
()

578 vﬁ©ûê
uöt32_t
 
i
;

582 
i
 = 
R32_RTC_CNT_32K
;

583 } 
i
 !
R32_RTC_CNT_32K
);

585  (
i
);

586 
	}
}

597 
	$RTC_TMRFunCfg
(
RTC_TMRCycTy≥Def
 
t
)

599 
	`sys_ß„_ac˚ss_íabÀ
();

600 
R8_RTC_MODE_CTRL
 &~(
RB_RTC_TMR_EN
 | 
RB_RTC_TMR_MODE
);

601 
	`sys_ß„_ac˚ss_íabÀ
();

602 
R8_RTC_MODE_CTRL
 |
RB_RTC_TMR_EN
 | (
t
);

603 
	`sys_ß„_ac˚ss_dißbÀ
();

604 
	}
}

615 
	$RTC_TRIGFunCfg
(
uöt32_t
 
cyc
)

617 
uöt32_t
 
t
;

619 
t
 = 
	`RTC_GëCy˛e32k
(Ë+ 
cyc
;

621 
	`sys_ß„_ac˚ss_íabÀ
();

622 
R32_RTC_TRIG
 = 
t
;

623 
	`sys_ß„_ac˚ss_íabÀ
();

624 
R8_RTC_MODE_CTRL
 |
RB_RTC_TRIG_EN
;

625 
	`sys_ß„_ac˚ss_dißbÀ
();

626 
	}
}

637 
	$RTC_ModeFunDißbÀ
(
RTC_MODETy≥Def
 
m
)

639 
uöt8_t
 
i
 = 0;

641 if(
m
 =
RTC_TRIG_MODE
)

643 
i
 |
RB_RTC_TRIG_EN
;

645 if(
m
 =
RTC_TMR_MODE
)

647 
i
 |
RB_RTC_TMR_EN
;

650 
	`sys_ß„_ac˚ss_íabÀ
();

651 
R8_RTC_MODE_CTRL
 &~(
i
);

652 
	`sys_ß„_ac˚ss_dißbÀ
();

653 
	}
}

664 
uöt8_t
 
	$RTC_GëITFœg
(
RTC_EVENTTy≥Def
 
f
)

666 if(
f
 =
RTC_TRIG_EVENT
)

668  (
R8_RTC_FLAG_CTRL
 & 
RB_RTC_TRIG_FLAG
);

672  (
R8_RTC_FLAG_CTRL
 & 
RB_RTC_TMR_FLAG
);

674 
	}
}

685 
	$RTC_CÀ¨ITFœg
(
RTC_EVENTTy≥Def
 
f
)

687 
f
)

689 
RTC_TRIG_EVENT
:

690 
R8_RTC_FLAG_CTRL
 = 
RB_RTC_TRIG_CLR
;

692 
RTC_TMR_EVENT
:

693 
R8_RTC_FLAG_CTRL
 = 
RB_RTC_TMR_CLR
;

698 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_flash.c

11 
	~"CH57x_comm⁄.h
"

24 
	$FLASH_ROM_READ
(
uöt32_t
 
SèπAddr
, *
Buf„r
, uöt32_à
Àn
)

26 
uöt32_t
 
i
, 
Lígth
 = (
Àn
 + 3) >> 2;

27 
uöt32_t
 *
pCode
 = (uöt32_à*)
SèπAddr
;

28 
uöt32_t
 *
pBuf
 = (uöt32_à*)
Buf„r
;

30 
i
 = 0; i < 
Lígth
; i++)

32 *
pBuf
++ = *
pCode
++;

34 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_gpio.c

11 
	~"CH57x_comm⁄.h
"

23 
	$GPIOA_ModeCfg
(
uöt32_t
 
pö
, 
GPIOModeTy≥Def
 
mode
)

25 
mode
)

27 
GPIO_ModeIN_Flﬂtög
:

28 
R32_PA_PD_DRV
 &~
pö
;

29 
R32_PA_PU
 &~
pö
;

30 
R32_PA_DIR
 &~
pö
;

33 
GPIO_ModeIN_PU
:

34 
R32_PA_PD_DRV
 &~
pö
;

35 
R32_PA_PU
 |
pö
;

36 
R32_PA_DIR
 &~
pö
;

39 
GPIO_ModeIN_PD
:

40 
R32_PA_PD_DRV
 |
pö
;

41 
R32_PA_PU
 &~
pö
;

42 
R32_PA_DIR
 &~
pö
;

45 
GPIO_ModeOut_PP_5mA
:

46 
R32_PA_PD_DRV
 &~
pö
;

47 
R32_PA_DIR
 |
pö
;

50 
GPIO_ModeOut_PP_20mA
:

51 
R32_PA_PD_DRV
 |
pö
;

52 
R32_PA_DIR
 |
pö
;

58 
	}
}

70 
	$GPIOB_ModeCfg
(
uöt32_t
 
pö
, 
GPIOModeTy≥Def
 
mode
)

72 
mode
)

74 
GPIO_ModeIN_Flﬂtög
:

75 
R32_PB_PD_DRV
 &~
pö
;

76 
R32_PB_PU
 &~
pö
;

77 
R32_PB_DIR
 &~
pö
;

80 
GPIO_ModeIN_PU
:

81 
R32_PB_PD_DRV
 &~
pö
;

82 
R32_PB_PU
 |
pö
;

83 
R32_PB_DIR
 &~
pö
;

86 
GPIO_ModeIN_PD
:

87 
R32_PB_PD_DRV
 |
pö
;

88 
R32_PB_PU
 &~
pö
;

89 
R32_PB_DIR
 &~
pö
;

92 
GPIO_ModeOut_PP_5mA
:

93 
R32_PB_PD_DRV
 &~
pö
;

94 
R32_PB_DIR
 |
pö
;

97 
GPIO_ModeOut_PP_20mA
:

98 
R32_PB_PD_DRV
 |
pö
;

99 
R32_PB_DIR
 |
pö
;

105 
	}
}

117 
	$GPIOA_ITModeCfg
(
uöt32_t
 
pö
, 
GPIOITModeTpDef
 
mode
)

119 
mode
)

121 
GPIO_ITMode_LowLevñ
:

122 
R16_PA_INT_MODE
 &~
pö
;

123 
R32_PA_CLR
 |
pö
;

126 
GPIO_ITMode_HighLevñ
:

127 
R16_PA_INT_MODE
 &~
pö
;

128 
R32_PA_OUT
 |
pö
;

131 
GPIO_ITMode_FÆlEdge
:

132 
R16_PA_INT_MODE
 |
pö
;

133 
R32_PA_CLR
 |
pö
;

136 
GPIO_ITMode_Ri£Edge
:

137 
R16_PA_INT_MODE
 |
pö
;

138 
R32_PA_OUT
 |
pö
;

144 
R16_PA_INT_IF
 = 
pö
;

145 
R16_PA_INT_EN
 |
pö
;

146 
	}
}

158 
	$GPIOB_ITModeCfg
(
uöt32_t
 
pö
, 
GPIOITModeTpDef
 
mode
)

160 
uöt32_t
 
Pö
 = 
pö
 | (’ö & (
GPIO_Pö_22
 | 
GPIO_Pö_23
)) >> 14);

161 
mode
)

163 
GPIO_ITMode_LowLevñ
:

164 
R16_PB_INT_MODE
 &~
Pö
;

165 
R32_PB_CLR
 |
pö
;

168 
GPIO_ITMode_HighLevñ
:

169 
R16_PB_INT_MODE
 &~
Pö
;

170 
R32_PB_OUT
 |
pö
;

173 
GPIO_ITMode_FÆlEdge
:

174 
R16_PB_INT_MODE
 |
Pö
;

175 
R32_PB_CLR
 |
pö
;

178 
GPIO_ITMode_Ri£Edge
:

179 
R16_PB_INT_MODE
 |
Pö
;

180 
R32_PB_OUT
 |
pö
;

186 
R16_PB_INT_IF
 = 
Pö
;

187 
R16_PB_INT_EN
 |
Pö
;

188 
	}
}

205 
	$GPIOPöRem≠
(
Fun˘i⁄ÆSèã
 
s
, 
uöt16_t
 
≥Ωh
)

207 if(
s
)

209 
R16_PIN_ALTERNATE
 |
≥Ωh
;

213 
R16_PIN_ALTERNATE
 &~
≥Ωh
;

215 
	}
}

243 
	$GPIOAGPPCfg
(
Fun˘i⁄ÆSèã
 
s
, 
uöt16_t
 
≥Ωh
)

245 if(
s
)

247 
R16_PIN_ANALOG_IE
 |
≥Ωh
;

251 
R16_PIN_ANALOG_IE
 &~
≥Ωh
;

253 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_pwm.c

11 
	~"CH57x_comm⁄.h
"

22 
	$PWMX_Cy˛eCfg
(
PWMX_Cy˛eTy≥Def
 
cyc
)

24 
cyc
)

26 
PWMX_Cy˛e_256
:

27 
R8_PWM_CONFIG
 = R8_PWM_CONFIG & 0xf0;

30 
PWMX_Cy˛e_255
:

31 
R8_PWM_CONFIG
 = (R8_PWM_CONFIG & 0xf0) | 0x01;

34 
PWMX_Cy˛e_128
:

35 
R8_PWM_CONFIG
 = (R8_PWM_CONFIG & 0xf0) | (1 << 2);

38 
PWMX_Cy˛e_127
:

39 
R8_PWM_CONFIG
 = (R8_PWM_CONFIG & 0xf0) | (1 << 2) | 0x01;

42 
PWMX_Cy˛e_64
:

43 
R8_PWM_CONFIG
 = (R8_PWM_CONFIG & 0xf0) | (2 << 2);

46 
PWMX_Cy˛e_63
:

47 
R8_PWM_CONFIG
 = (R8_PWM_CONFIG & 0xf0) | (2 << 2) | 0x01;

50 
PWMX_Cy˛e_32
:

51 
R8_PWM_CONFIG
 = (R8_PWM_CONFIG & 0xf0) | (3 << 2);

54 
PWMX_Cy˛e_31
:

55 
R8_PWM_CONFIG
 = (R8_PWM_CONFIG & 0xf0) | (3 << 2) | 0x01;

61 
	}
}

75 
	$PWMX_ACTOUT
(
uöt8_t
 
ch
, uöt8_à
da
, 
PWMX_Pﬁ¨Ty≥Def
 
¥
, 
Fun˘i⁄ÆSèã
 
s
)

77 
uöt8_t
 
i
;

79 if(
s
 =
DISABLE
)

81 
R8_PWM_OUT_EN
 &~(
ch
);

85 (
¥
Ë? (
R8_PWM_POLAR
 |(
ch
)) : (R8_PWM_POLAR &= ~(ch));

86 
i
 = 0; i < 8; i++)

88 if((
ch
 >> 
i
) & 1)

90 *((vﬁ©ûê
uöt8_t
 *)((&
R8_PWM4_DATA
Ë+ 
i
)Ë
da
;

93 
R8_PWM_OUT_EN
 |(
ch
);

95 
	}
}

111 
	$PWMX_A…îOutCfg
(
uöt8_t
 
ch
, 
Fun˘i⁄ÆSèã
 
s
)

113 if(
s
 =
DISABLE
)

115 
R8_PWM_CONFIG
 &~(
ch
);

119 
R8_PWM_CONFIG
 |(
ch
);

121 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_pwr.c

11 
	~"CH57x_comm⁄.h
"

22 
	$PWR_DCDCCfg
(
Fun˘i⁄ÆSèã
 
s
)

24 if(
s
 =
DISABLE
)

26 
	`sys_ß„_ac˚ss_íabÀ
();

27 
R16_POWER_PLAN
 &~(
RB_PWR_DCDC_EN
|
RB_PWR_DCDC_PRE
);

28 
	`sys_ß„_ac˚ss_dißbÀ
();

32 
uöt32_t
 
HW_D©a
[2];

33 
	`FLASH_EEPROM_CMD
(
CMD_GET_ROM_INFO
, 
ROM_CFG_ADR_HW
, 
HW_D©a
, 0);

34 if((
HW_D©a
[0]) & (1 << 13))

38 
	`sys_ß„_ac˚ss_íabÀ
();

39 
R16_POWER_PLAN
 |
RB_PWR_DCDC_EN
 | 
RB_PWR_DCDC_PRE
;

40 
	`sys_ß„_ac˚ss_dißbÀ
();

42 
	}
}

54 
	$PWR_UnôModCfg
(
Fun˘i⁄ÆSèã
 
s
, 
uöt8_t
 
unô
)

56 
uöt8_t
 
pwr_˘æ
 = 
R8_HFCK_PWR_CTRL
;

57 
uöt8_t
 
ck32k_cfg
 = 
R8_CK32K_CONFIG
;

59 if(
s
 =
DISABLE
)

61 
pwr_˘æ
 &~(
unô
 & 0x1c);

62 
ck32k_cfg
 &~(
unô
 & 0x03);

66 
pwr_˘æ
 |(
unô
 & 0x1c);

67 
ck32k_cfg
 |(
unô
 & 0x03);

70 
	`sys_ß„_ac˚ss_íabÀ
();

71 
R8_HFCK_PWR_CTRL
 = 
pwr_˘æ
;

72 
R8_CK32K_CONFIG
 = 
ck32k_cfg
;

73 
	`sys_ß„_ac˚ss_dißbÀ
();

74 
	}
}

86 
	$PWR_PîùhClkCfg
(
Fun˘i⁄ÆSèã
 
s
, 
uöt16_t
 
≥Ωh
)

88 
uöt32_t
 
¶ìp_˘æ
 = 
R32_SLEEP_CONTROL
;

90 if(
s
 =
DISABLE
)

92 
¶ìp_˘æ
 |
≥Ωh
;

96 
¶ìp_˘æ
 &~
≥Ωh
;

99 
	`sys_ß„_ac˚ss_íabÀ
();

100 
R32_SLEEP_CONTROL
 = 
¶ìp_˘æ
;

101 
	`sys_ß„_ac˚ss_dißbÀ
();

102 
	}
}

119 
	$PWR_PîùhWakeUpCfg
(
Fun˘i⁄ÆSèã
 
s
, 
uöt8_t
 
≥Ωh
, 
WakeUP_Modey≥Def
 
mode
)

121 
uöt8_t
 
m
;

123 if(
s
 =
DISABLE
)

125 
	`sys_ß„_ac˚ss_íabÀ
();

126 
R8_SLP_WAKE_CTRL
 &~
≥Ωh
;

130 
mode
)

132 
Edge_L⁄gDñay
:

133 
m
 = 
RB_WAKE_EV_MODE
;

136 
Levñ_L⁄gDñay
:

137 
m
 = 0;

140 
Levñ_Sh‹tDñay
:

141 
m
 = 
RB_WAKE_DELAY
;

145 
m
 = 
RB_WAKE_EV_MODE
 | 
RB_WAKE_DELAY
;

148 
	`sys_ß„_ac˚ss_íabÀ
();

149 
R8_SLP_WAKE_CTRL
 &~(
RB_WAKE_EV_MODE
 | 
RB_WAKE_DELAY
);

150 
	`sys_ß„_ac˚ss_íabÀ
();

151 
R8_SLP_WAKE_CTRL
 |
m
 | 
≥Ωh
;

153 
	`sys_ß„_ac˚ss_dißbÀ
();

154 
	}
}

166 
	$PowîM⁄ô‹
(
Fun˘i⁄ÆSèã
 
s
, 
VﬁM_Levñy≥Def
 
vl
)

168 
uöt8_t
 
˘æ
 = 
R8_BAT_DET_CTRL
;

169 
uöt8_t
 
cfg
 = 
R8_BAT_DET_CFG
;

171 if(
s
 =
DISABLE
)

173 
	`sys_ß„_ac˚ss_íabÀ
();

174 
R8_BAT_DET_CTRL
 = 0;

175 
	`sys_ß„_ac˚ss_dißbÀ
();

179 if(
vl
 & 0x80)

181 
cfg
 = 
vl
 & 0x03;

182 
˘æ
 = 
RB_BAT_MON_EN
 | ((
vl
 >> 2) & 1);

187 
cfg
 = 
vl
 & 0x03;

188 
˘æ
 = 
RB_BAT_DET_EN
;

190 
	`sys_ß„_ac˚ss_íabÀ
();

191 
R8_BAT_DET_CTRL
 = 
˘æ
;

192 
R8_BAT_DET_CFG
 = 
cfg
;

193 
	`sys_ß„_ac˚ss_dißbÀ
();

195 
	`mDñayuS
(1);

196 
	`sys_ß„_ac˚ss_íabÀ
();

197 
R8_BAT_DET_CTRL
 |
RB_BAT_LOW_IE
 | 
RB_BAT_LOWER_IE
;

198 
	`sys_ß„_ac˚ss_dißbÀ
();

200 
	}
}

211 
__©åibuã__
((
£˘i⁄
(".highcode")))

212 
	$LowPowî_IdÀ
()

214 
	`FLASH_ROM_SW_RESET
();

215 
R8_FLASH_CTRL
 = 0x04;

217 
PFIC
->
SCTLR
 &= ~(1 << 2);

218 
	`__WFI
();

219 
	`__n›
();

220 
	`__n›
();

221 
	}
}

232 
__©åibuã__
((
£˘i⁄
(".highcode")))

233 
	$LowPowî_HÆt
()

235 
uöt8_t
 
x32Kpw
, 
x32Mpw
;

237 
	`FLASH_ROM_SW_RESET
();

238 
R8_FLASH_CTRL
 = 0x04;

239 
x32Kpw
 = 
R8_XT32K_TUNE
;

240 
x32Mpw
 = 
R8_XT32M_TUNE
;

241 
x32Mpw
 = (x32Mpw & 0xfc) | 0x03;

242 if(
R16_RTC_CNT_32K
 > 0x3fff)

244 
x32Kpw
 = (x32Kpw & 0xfc) | 0x01;

247 
	`sys_ß„_ac˚ss_íabÀ
();

248 
R8_BAT_DET_CTRL
 = 0;

249 
	`sys_ß„_ac˚ss_íabÀ
();

250 
R8_XT32K_TUNE
 = 
x32Kpw
;

251 
R8_XT32M_TUNE
 = 
x32Mpw
;

252 
	`sys_ß„_ac˚ss_íabÀ
();

253 
R8_PLL_CONFIG
 |= (1 << 5);

254 
	`sys_ß„_ac˚ss_dißbÀ
();

256 
PFIC
->
SCTLR
 |= (1 << 2);

257 
	`__WFI
();

258 
	`__n›
();

259 
	`__n›
();

260 
	`sys_ß„_ac˚ss_íabÀ
();

261 
R8_PLL_CONFIG
 &= ~(1 << 5);

262 
	`sys_ß„_ac˚ss_dißbÀ
();

263 
	}
}

280 
__©åibuã__
((
£˘i⁄
(".highcode")))

281 
	$LowPowî_SÀï
(
uöt8_t
 
rm
)

283 
uöt8_t
 
x32Kpw
, 
x32Mpw
;

285 
	`FLASH_ROM_SW_RESET
();

286 
R8_FLASH_CTRL
 = 0x04;

287 
x32Kpw
 = 
R8_XT32K_TUNE
;

288 
x32Mpw
 = 
R8_XT32M_TUNE
;

289 
x32Mpw
 = (x32Mpw & 0xfc) | 0x03;

290 if(
R16_RTC_CNT_32K
 > 0x3fff)

292 
x32Kpw
 = (x32Kpw & 0xfc) | 0x01;

295 
	`sys_ß„_ac˚ss_íabÀ
();

296 
R8_BAT_DET_CTRL
 = 0;

297 
	`sys_ß„_ac˚ss_íabÀ
();

298 
R8_XT32K_TUNE
 = 
x32Kpw
;

299 
R8_XT32M_TUNE
 = 
x32Mpw
;

300 
	`sys_ß„_ac˚ss_dißbÀ
();

302 
PFIC
->
SCTLR
 |= (1 << 2);

304 
	`sys_ß„_ac˚ss_íabÀ
();

305 
R8_SLP_POWER_CTRL
 |
RB_RAM_RET_LV
;

306 
	`sys_ß„_ac˚ss_íabÀ
();

307 
R8_PLL_CONFIG
 |= (1 << 5);

308 
	`sys_ß„_ac˚ss_íabÀ
();

309 
R16_POWER_PLAN
 = 
RB_PWR_PLAN_EN
 | 
RB_PWR_MUST_0010
 | 
RB_PWR_CORE
 | 
rm
;

310 
	`__WFI
();

311 
	`__n›
();

312 
	`__n›
();

313 
	`sys_ß„_ac˚ss_íabÀ
();

314 
R8_PLL_CONFIG
 &= ~(1 << 5);

315 
	`sys_ß„_ac˚ss_dißbÀ
();

316 
	`mDñayuS
(70);

317 
	}
}

332 
__©åibuã__
((
£˘i⁄
(".highcode")))

333 
	$LowPowî_Shutdown
(
uöt8_t
 
rm
)

335 
uöt8_t
 
x32Kpw
, 
x32Mpw
;

337 
	`FLASH_ROM_SW_RESET
();

338 
R8_FLASH_CTRL
 = 0x04;

339 
x32Kpw
 = 
R8_XT32K_TUNE
;

340 
x32Mpw
 = 
R8_XT32M_TUNE
;

341 
x32Mpw
 = (x32Mpw & 0xfc) | 0x03;

342 if(
R16_RTC_CNT_32K
 > 0x3fff)

344 
x32Kpw
 = (x32Kpw & 0xfc) | 0x01;

347 
	`sys_ß„_ac˚ss_íabÀ
();

348 
R8_BAT_DET_CTRL
 = 0;

349 
	`sys_ß„_ac˚ss_íabÀ
();

350 
R8_XT32K_TUNE
 = 
x32Kpw
;

351 
R8_XT32M_TUNE
 = 
x32Mpw
;

352 
	`sys_ß„_ac˚ss_dißbÀ
();

353 
	`SëSysClock
–
CLK_SOURCE_HSE_6_4MHz
 );

355 
PFIC
->
SCTLR
 |= (1 << 2);

357 
	`sys_ß„_ac˚ss_íabÀ
();

358 
R8_SLP_POWER_CTRL
 |
RB_RAM_RET_LV
;

359 
	`sys_ß„_ac˚ss_íabÀ
();

360 
R16_POWER_PLAN
 = 
RB_PWR_PLAN_EN
 | 
RB_PWR_MUST_0010
 | 
rm
;

361 
	`__WFI
();

362 
	`__n›
();

363 
	`__n›
();

364 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_spi0.c

11 
	~"CH57x_comm⁄.h
"

22 
	$SPI0_Ma°îDefInô
()

24 
R8_SPI0_CLOCK_DIV
 = 4;

25 
R8_SPI0_CTRL_MOD
 = 
RB_SPI_ALL_CLEAR
;

26 
R8_SPI0_CTRL_MOD
 = 
RB_SPI_MOSI_OE
 | 
RB_SPI_SCK_OE
;

27 
R8_SPI0_CTRL_CFG
 |
RB_SPI_AUTO_IF
;

28 
R8_SPI0_CTRL_CFG
 &~
RB_SPI_DMA_ENABLE
;

29 
	}
}

40 
	$SPI0_CLKCfg
(
uöt8_t
 
c
)

42 if(
c
 == 2)

44 
R8_SPI0_CTRL_CFG
 |
RB_SPI_MST_DLY_EN
;

48 
R8_SPI0_CTRL_CFG
 &~
RB_SPI_MST_DLY_EN
;

50 
R8_SPI0_CLOCK_DIV
 = 
c
;

51 
	}
}

62 
	$SPI0_D©aMode
(
ModeBôOrdîTy≥Def
 
m
)

64 
m
)

66 
Mode0_LowBôINFr⁄t
:

67 
R8_SPI0_CTRL_MOD
 &~
RB_SPI_MST_SCK_MOD
;

68 
R8_SPI0_CTRL_CFG
 |
RB_SPI_BIT_ORDER
;

70 
Mode0_HighBôINFr⁄t
:

71 
R8_SPI0_CTRL_MOD
 &~
RB_SPI_MST_SCK_MOD
;

72 
R8_SPI0_CTRL_CFG
 &~
RB_SPI_BIT_ORDER
;

74 
Mode3_LowBôINFr⁄t
:

75 
R8_SPI0_CTRL_MOD
 |
RB_SPI_MST_SCK_MOD
;

76 
R8_SPI0_CTRL_CFG
 |
RB_SPI_BIT_ORDER
;

78 
Mode3_HighBôINFr⁄t
:

79 
R8_SPI0_CTRL_MOD
 |
RB_SPI_MST_SCK_MOD
;

80 
R8_SPI0_CTRL_CFG
 &~
RB_SPI_BIT_ORDER
;

85 
	}
}

96 
	$SPI0_Ma°îSídByã
(
uöt8_t
 
d
)

98 
R8_SPI0_CTRL_MOD
 &~
RB_SPI_FIFO_DIR
;

99 
R8_SPI0_BUFFER
 = 
d
;

100 !(
R8_SPI0_INT_FLAG
 & 
RB_SPI_FREE
));

101 
	}
}

112 
uöt8_t
 
	$SPI0_Ma°îRecvByã
()

114 
R8_SPI0_CTRL_MOD
 &~
RB_SPI_FIFO_DIR
;

115 
R8_SPI0_BUFFER
 = 0xFF;

116 !(
R8_SPI0_INT_FLAG
 & 
RB_SPI_FREE
));

117  (
R8_SPI0_BUFFER
);

118 
	}
}

130 
	$SPI0_Ma°îTøns
(
uöt8_t
 *
pbuf
, 
uöt16_t
 
Àn
)

132 
uöt16_t
 
£ndÀn
;

134 
£ndÀn
 = 
Àn
;

135 
R8_SPI0_CTRL_MOD
 &~
RB_SPI_FIFO_DIR
;

136 
R16_SPI0_TOTAL_CNT
 = 
£ndÀn
;

137 
R8_SPI0_INT_FLAG
 = 
RB_SPI_IF_CNT_END
;

138 
£ndÀn
)

140 if(
R8_SPI0_FIFO_COUNT
 < 
SPI_FIFO_SIZE
)

142 
R8_SPI0_FIFO
 = *
pbuf
;

143 
pbuf
++;

144 
£ndÀn
--;

147 
R8_SPI0_FIFO_COUNT
 != 0);

148 
	}
}

160 
	$SPI0_Ma°îRecv
(
uöt8_t
 *
pbuf
, 
uöt16_t
 
Àn
)

162 
uöt16_t
 
ªadÀn
;

164 
ªadÀn
 = 
Àn
;

165 
R8_SPI0_CTRL_MOD
 |
RB_SPI_FIFO_DIR
;

166 
R16_SPI0_TOTAL_CNT
 = 
Àn
;

167 
R8_SPI0_INT_FLAG
 = 
RB_SPI_IF_CNT_END
;

168 
ªadÀn
)

170 if(
R8_SPI0_FIFO_COUNT
)

172 *
pbuf
 = 
R8_SPI0_FIFO
;

173 
pbuf
++;

174 
ªadÀn
--;

177 
	}
}

189 
	$SPI0_Ma°îDMATøns
(
uöt8_t
 *
pbuf
, 
uöt16_t
 
Àn
)

191 
R8_SPI0_CTRL_MOD
 &~
RB_SPI_FIFO_DIR
;

192 
R16_SPI0_DMA_BEG
 = (
uöt32_t
)
pbuf
;

193 
R16_SPI0_DMA_END
 = (
uöt32_t
)(
pbuf
 + 
Àn
);

194 
R16_SPI0_TOTAL_CNT
 = 
Àn
;

195 
R8_SPI0_INT_FLAG
 = 
RB_SPI_IF_CNT_END
 | 
RB_SPI_IF_DMA_END
;

196 
R8_SPI0_CTRL_CFG
 |
RB_SPI_DMA_ENABLE
;

197 !(
R8_SPI0_INT_FLAG
 & 
RB_SPI_IF_CNT_END
));

198 
R8_SPI0_CTRL_CFG
 &~
RB_SPI_DMA_ENABLE
;

199 
	}
}

211 
	$SPI0_Ma°îDMARecv
(
uöt8_t
 *
pbuf
, 
uöt16_t
 
Àn
)

213 
R8_SPI0_CTRL_MOD
 |
RB_SPI_FIFO_DIR
;

214 
R16_SPI0_DMA_BEG
 = (
uöt32_t
)
pbuf
;

215 
R16_SPI0_DMA_END
 = (
uöt32_t
)(
pbuf
 + 
Àn
);

216 
R16_SPI0_TOTAL_CNT
 = 
Àn
;

217 
R8_SPI0_INT_FLAG
 = 
RB_SPI_IF_CNT_END
 | 
RB_SPI_IF_DMA_END
;

218 
R8_SPI0_CTRL_CFG
 |
RB_SPI_DMA_ENABLE
;

219 !(
R8_SPI0_INT_FLAG
 & 
RB_SPI_IF_CNT_END
));

220 
R8_SPI0_CTRL_CFG
 &~
RB_SPI_DMA_ENABLE
;

221 
	}
}

230 
	$SPI0_SœveInô
()

232 
R8_SPI0_CTRL_MOD
 = 
RB_SPI_ALL_CLEAR
;

233 
R8_SPI0_CTRL_MOD
 = 
RB_SPI_MISO_OE
 | 
RB_SPI_MODE_SLAVE
;

234 
R8_SPI0_CTRL_CFG
 |
RB_SPI_AUTO_IF
;

235 
	}
}

244 
uöt8_t
 
	$SPI0_SœveRecvByã
()

246 
R8_SPI0_CTRL_MOD
 |
RB_SPI_FIFO_DIR
;

247 
R8_SPI0_FIFO_COUNT
 == 0);

248  
R8_SPI0_FIFO
;

249 
	}
}

260 
	$SPI0_SœveSídByã
(
uöt8_t
 
d
)

262 
R8_SPI0_CTRL_MOD
 &~
RB_SPI_FIFO_DIR
;

263 
R8_SPI0_FIFO
 = 
d
;

264 
R8_SPI0_FIFO_COUNT
 != 0);

265 
	}
}

277 
	$SPI0_SœveRecv
(
uöt8_t
 *
pbuf
, 
uöt16_t
 
Àn
)

279 
uöt16_t
 
ªvÀn
;

281 
ªvÀn
 = 
Àn
;

282 
R8_SPI0_CTRL_MOD
 |
RB_SPI_FIFO_DIR
;

283 
R8_SPI0_INT_FLAG
 = 
RB_SPI_IF_CNT_END
;

284 
ªvÀn
)

286 if(
R8_SPI0_FIFO_COUNT
)

288 *
pbuf
 = 
R8_SPI0_FIFO
;

289 
pbuf
++;

290 
ªvÀn
--;

293 
	}
}

305 
	$SPI0_SœveTøns
(
uöt8_t
 *
pbuf
, 
uöt16_t
 
Àn
)

307 
uöt16_t
 
£ndÀn
;

309 
£ndÀn
 = 
Àn
;

310 
R8_SPI0_CTRL_MOD
 &~
RB_SPI_FIFO_DIR
;

311 
R8_SPI0_INT_FLAG
 = 
RB_SPI_IF_CNT_END
;

312 
£ndÀn
)

314 if(
R8_SPI0_FIFO_COUNT
 < 
SPI_FIFO_SIZE
)

316 
R8_SPI0_FIFO
 = *
pbuf
;

317 
pbuf
++;

318 
£ndÀn
--;

321 
R8_SPI0_FIFO_COUNT
 != 0);

322 
	}
}

334 
	$SPI0_SœveDMARecv
(
uöt8_t
 *
pbuf
, 
uöt16_t
 
Àn
)

336 
R8_SPI0_CTRL_MOD
 |
RB_SPI_FIFO_DIR
;

337 
R16_SPI0_DMA_BEG
 = (
uöt32_t
)
pbuf
;

338 
R16_SPI0_DMA_END
 = (
uöt32_t
)(
pbuf
 + 
Àn
);

339 
R16_SPI0_TOTAL_CNT
 = 
Àn
;

340 
R8_SPI0_INT_FLAG
 = 
RB_SPI_IF_CNT_END
 | 
RB_SPI_IF_DMA_END
;

341 
R8_SPI0_CTRL_CFG
 |
RB_SPI_DMA_ENABLE
;

342 !(
R8_SPI0_INT_FLAG
 & 
RB_SPI_IF_CNT_END
));

343 
R8_SPI0_CTRL_CFG
 &~
RB_SPI_DMA_ENABLE
;

344 
	}
}

356 
	$SPI0_SœveDMATøns
(
uöt8_t
 *
pbuf
, 
uöt16_t
 
Àn
)

358 
R8_SPI0_CTRL_MOD
 &~
RB_SPI_FIFO_DIR
;

359 
R16_SPI0_DMA_BEG
 = (
uöt32_t
)
pbuf
;

360 
R16_SPI0_DMA_END
 = (
uöt32_t
)(
pbuf
 + 
Àn
);

361 
R16_SPI0_TOTAL_CNT
 = 
Àn
;

362 
R8_SPI0_INT_FLAG
 = 
RB_SPI_IF_CNT_END
 | 
RB_SPI_IF_DMA_END
;

363 
R8_SPI0_CTRL_CFG
 |
RB_SPI_DMA_ENABLE
;

364 !(
R8_SPI0_INT_FLAG
 & 
RB_SPI_IF_CNT_END
));

365 
R8_SPI0_CTRL_CFG
 &~
RB_SPI_DMA_ENABLE
;

366 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_sys.c

11 
	~"CH57x_comm⁄.h
"

22 
__©åibuã__
((
£˘i⁄
(".highcode")))

23 
	$SëSysClock
(
SYS_CLKTy≥Def
 
sc
)

25 
uöt32_t
 
i
;

26 
	`sys_ß„_ac˚ss_íabÀ
();

27 
R8_PLL_CONFIG
 &= ~(1 << 5);

28 
	`sys_ß„_ac˚ss_dißbÀ
();

29 if(
sc
 & 0x20)

31 if(!(
R8_HFCK_PWR_CTRL
 & 
RB_CLK_XT32M_PON
))

33 
	`sys_ß„_ac˚ss_íabÀ
();

34 
R8_HFCK_PWR_CTRL
 |
RB_CLK_XT32M_PON
;

35 
i
 = 0; i < 1200; i++)

37 
	`__n›
();

38 
	`__n›
();

42 
	`sys_ß„_ac˚ss_íabÀ
();

43 
R16_CLK_SYS_CFG
 = (0 << 6Ë| (
sc
 & 0x1f);

44 
	`__n›
();

45 
	`__n›
();

46 
	`__n›
();

47 
	`__n›
();

48 
	`sys_ß„_ac˚ss_dißbÀ
();

49 
	`sys_ß„_ac˚ss_íabÀ
();

50 
R8_FLASH_CFG
 = 0X51;

51 
	`sys_ß„_ac˚ss_dißbÀ
();

54 if(
sc
 & 0x40)

56 if(!(
R8_HFCK_PWR_CTRL
 & 
RB_CLK_PLL_PON
))

58 
	`sys_ß„_ac˚ss_íabÀ
();

59 
R8_HFCK_PWR_CTRL
 |
RB_CLK_PLL_PON
;

60 
i
 = 0; i < 2000; i++)

62 
	`__n›
();

63 
	`__n›
();

66 
	`sys_ß„_ac˚ss_íabÀ
();

67 
R16_CLK_SYS_CFG
 = (1 << 6Ë| (
sc
 & 0x1f);

68 
	`__n›
();

69 
	`__n›
();

70 
	`__n›
();

71 
	`__n›
();

72 
	`sys_ß„_ac˚ss_dißbÀ
();

73 
	`sys_ß„_ac˚ss_íabÀ
();

74 
R8_FLASH_CFG
 = 0X53;

75 
	`sys_ß„_ac˚ss_dißbÀ
();

77 
	}
}

88 
uöt32_t
 
	$GëSysClock
()

90 
uöt16_t
 
ªv
;

92 
ªv
 = 
R16_CLK_SYS_CFG
 & 0xff;

93 if((
ªv
 & 0x40) == (0 << 6))

95  (32000000 / (
ªv
 & 0x1f));

97 if((
ªv
 & 
RB_CLK_SYS_MOD
) == (1 << 6))

99  (480000000 / (
ªv
 & 0x1f));

105 
	}
}

116 
uöt8_t
 
	$SYS_GëInfoSè
(
SYS_InfoSèTy≥Def
 
i
)

118 if(
i
 =
STA_SAFEACC_ACT
)

120  (
R8_SAFE_ACCESS_SIG
 & 
RB_SAFE_ACC_ACT
);

124  (
R8_GLOB_CFG_INFO
 & (1 << 
i
));

126 
	}
}

137 
__©åibuã__
((
£˘i⁄
(".highcode")))

138 
	$SYS_Re£tExecuã
()

140 
	`FLASH_ROM_SW_RESET
();

141 
	`sys_ß„_ac˚ss_íabÀ
();

142 
R8_RST_WDOG_CTRL
 |
RB_SOFTWARE_RESET
;

143 
	`sys_ß„_ac˚ss_dißbÀ
();

144 
	}
}

155 
	$SYS_DißbÀAŒIrq
(
uöt32_t
 *
púqv
)

157 *
púqv
 = (
PFIC
->
ISR
[0] >> 8) | (PFIC->ISR[1] << 24);

158 
PFIC
->
IRER
[0] = 0xffffffff;

159 
PFIC
->
IRER
[1] = 0xffffffff;

160 
	}
}

171 
	$SYS_RecovîIrq
(
uöt32_t
 
úq_°©us
)

173 
PFIC
->
IENR
[0] = (
úq_°©us
 << 8);

174 
PFIC
->
IENR
[1] = (
úq_°©us
 >> 24);

175 
	}
}

186 
uöt32_t
 
	$SYS_GëSysTickC¡
()

188 
uöt32_t
 
vÆ
;

190 
vÆ
 = 
SysTick
->
CNT
;

191  (
vÆ
);

192 
	}
}

203 
	$WWDG_ITCfg
(
Fun˘i⁄ÆSèã
 
s
)

205 
uöt8_t
 
˘æ
 = 
R8_RST_WDOG_CTRL
;

207 if(
s
 =
DISABLE
)

209 
˘æ
 &~
RB_WDOG_INT_EN
;

213 
˘æ
 |
RB_WDOG_INT_EN
;

216 
	`sys_ß„_ac˚ss_íabÀ
();

217 
R8_RST_WDOG_CTRL
 = 
˘æ
;

218 
	`sys_ß„_ac˚ss_dißbÀ
();

219 
	}
}

230 
	$WWDG_Re£tCfg
(
Fun˘i⁄ÆSèã
 
s
)

232 
uöt8_t
 
˘æ
 = 
R8_RST_WDOG_CTRL
;

234 if(
s
 =
DISABLE
)

236 
˘æ
 &~
RB_WDOG_RST_EN
;

240 
˘æ
 |
RB_WDOG_RST_EN
;

243 
	`sys_ß„_ac˚ss_íabÀ
();

244 
R8_RST_WDOG_CTRL
 = 
˘æ
;

245 
	`sys_ß„_ac˚ss_dißbÀ
();

246 
	}
}

257 
	$WWDG_CÀ¨Fœg
()

259 
	`sys_ß„_ac˚ss_íabÀ
();

260 
R8_RST_WDOG_CTRL
 |
RB_WDOG_INT_FLAG
;

261 
	`sys_ß„_ac˚ss_dißbÀ
();

262 
	}
}

273 
__©åibuã__
((
öãºu±
("WCH-Interrupt-fast")))

274 
__©åibuã__
((
£˘i⁄
(".highcode")))

275 
__©åibuã__
((
wók
))

276 
	$H¨dFau…_H™dÀr
()

278 
	`FLASH_ROM_SW_RESET
();

279 
	`sys_ß„_ac˚ss_íabÀ
();

280 
R16_INT32K_TUNE
 = 0xFFFF;

281 
	`sys_ß„_ac˚ss_íabÀ
();

282 
R8_RST_WDOG_CTRL
 |
RB_SOFTWARE_RESET
;

283 
	`sys_ß„_ac˚ss_dißbÀ
();

285 
	}
}

296 
__©åibuã__
((
£˘i⁄
(".highcode")))

297 
	$mDñayuS
(
uöt16_t
 
t
)

299 
uöt32_t
 
i
;

300 #if(
FREQ_SYS
 == 60000000)

301 
i
 = 
t
 * 15;

302 #ñif(
FREQ_SYS
 == 48000000)

303 
i
 = 
t
 * 12;

304 #ñif(
FREQ_SYS
 == 40000000)

305 
i
 = 
t
 * 10;

306 #ñif(
FREQ_SYS
 == 32000000)

307 
i
 = 
t
 << 3;

308 #ñif(
FREQ_SYS
 == 24000000)

309 
i
 = 
t
 * 6;

310 #ñif(
FREQ_SYS
 == 16000000)

311 
i
 = 
t
 << 2;

312 #ñif(
FREQ_SYS
 == 8000000)

313 
i
 = 
t
 << 1;

314 #ñif(
FREQ_SYS
 == 4000000)

315 
i
 = 
t
;

316 #ñif(
FREQ_SYS
 == 2000000)

317 
i
 = 
t
 >> 1;

318 #ñif(
FREQ_SYS
 == 1000000)

319 
i
 = 
t
 >> 2;

323 
	`__n›
();

324 } --
i
);

325 
	}
}

336 
__©åibuã__
((
£˘i⁄
(".highcode")))

337 
	$mDñaymS
(
uöt16_t
 
t
)

339 
uöt16_t
 
i
;

341 
i
 = 0; i < 
t
; i++)

343 
	`mDñayuS
(1000);

345 
	}
}

347 #ifde‡
DEBUG


348 
	$_wrôe
(
fd
, *
buf
, 
size
)

350 
i
;

351 
i
 = 0; i < 
size
; i++)

353 #i‡
DEBUG
 =
Debug_UART0


354 
R8_UART0_TFC
 =
UART_FIFO_SIZE
);

355 
R8_UART0_THR
 = *
buf
++;

356 #ñi‡
DEBUG
 =
Debug_UART1


357 
R8_UART1_TFC
 =
UART_FIFO_SIZE
);

358 
R8_UART1_THR
 = *
buf
++;

359 #ñi‡
DEBUG
 =
Debug_UART2


360 
R8_UART2_TFC
 =
UART_FIFO_SIZE
);

361 
R8_UART2_THR
 = *
buf
++;

362 #ñi‡
DEBUG
 =
Debug_UART3


363 
R8_UART3_TFC
 =
UART_FIFO_SIZE
);

364 
R8_UART3_THR
 = *
buf
++;

367  
size
;

368 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_timer0.c

11 
	~"CH57x_comm⁄.h
"

22 
	$TMR0_TimîInô
(
uöt32_t
 
t
)

24 
R32_TMR0_CNT_END
 = 
t
;

25 
R8_TMR0_CTRL_MOD
 = 
RB_TMR_ALL_CLEAR
;

26 
R8_TMR0_CTRL_MOD
 = 
RB_TMR_COUNT_EN
;

27 
	}
}

38 
	$TMR0_EXTSögÀCou¡îInô
(
C≠ModeTy≥Def
 
ˇp
)

40 
R8_TMR0_CTRL_MOD
 = 
RB_TMR_ALL_CLEAR
;

41 
R8_TMR0_CTRL_MOD
 = 
RB_TMR_COUNT_EN
 | 
RB_TMR_CAP_COUNT
 | 
RB_TMR_MODE_IN
 | (
ˇp
 << 6);

42 
	}
}

54 
	$TMR0_PWMInô
(
PWMX_Pﬁ¨Ty≥Def
 
¥
, 
PWM_RïótTsTy≥Def
 
ts
)

57 
R8_TMR0_CTRL_MOD
 = 
RB_TMR_COUNT_EN
 | 
RB_TMR_OUT_EN
 | (
¥
 << 4Ë| (
ts
 << 6);

58 
	}
}

69 
	$TMR0_C≠Inô
(
C≠ModeTy≥Def
 
ˇp
)

71 
R8_TMR0_CTRL_MOD
 = 
RB_TMR_ALL_CLEAR
;

72 
R8_TMR0_CTRL_MOD
 = 
RB_TMR_COUNT_EN
 | 
RB_TMR_MODE_IN
 | (
ˇp
 << 6);

73 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_timer1.c

11 
	~"CH57x_comm⁄.h
"

22 
	$TMR1_TimîInô
(
uöt32_t
 
t
)

24 
R32_TMR1_CNT_END
 = 
t
;

25 
R8_TMR1_CTRL_MOD
 = 
RB_TMR_ALL_CLEAR
;

26 
R8_TMR1_CTRL_MOD
 = 
RB_TMR_COUNT_EN
;

27 
	}
}

38 
	$TMR1_EXTSögÀCou¡îInô
(
C≠ModeTy≥Def
 
ˇp
)

40 
R8_TMR1_CTRL_MOD
 = 
RB_TMR_ALL_CLEAR
;

41 
R8_TMR1_CTRL_MOD
 = 
RB_TMR_COUNT_EN
 | 
RB_TMR_CAP_COUNT
 | 
RB_TMR_MODE_IN
 | (
ˇp
 << 6);

42 
	}
}

54 
	$TMR1_PWMInô
(
PWMX_Pﬁ¨Ty≥Def
 
¥
, 
PWM_RïótTsTy≥Def
 
ts
)

57 
R8_TMR1_CTRL_MOD
 = 
RB_TMR_COUNT_EN
 | 
RB_TMR_OUT_EN
 | (
¥
 << 4Ë| (
ts
 << 6);

58 
	}
}

69 
	$TMR1_C≠Inô
(
C≠ModeTy≥Def
 
ˇp
)

71 
R8_TMR1_CTRL_MOD
 = 
RB_TMR_ALL_CLEAR
;

72 
R8_TMR1_CTRL_MOD
 = 
RB_TMR_COUNT_EN
 | 
RB_TMR_MODE_IN
 | (
ˇp
 << 6);

73 
	}
}

87 
	$TMR1_DMACfg
(
uöt8_t
 
s
, 
uöt16_t
 
°¨tAddr
, uöt16_à
ídAddr
, 
DMAModeTy≥Def
 
m
)

89 if(
s
 =
DISABLE
)

91 
R8_TMR1_CTRL_DMA
 = 0;

95 
R16_TMR1_DMA_BEG
 = 
°¨tAddr
;

96 
R16_TMR1_DMA_END
 = 
ídAddr
;

97 if(
m
)

99 
R8_TMR1_CTRL_DMA
 = 
RB_TMR_DMA_LOOP
 | 
RB_TMR_DMA_ENABLE
;

103 
R8_TMR1_CTRL_DMA
 = 
RB_TMR_DMA_ENABLE
;

106 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_timer2.c

11 
	~"CH57x_comm⁄.h
"

22 
	$TMR2_TimîInô
(
uöt32_t
 
t
)

24 
R32_TMR2_CNT_END
 = 
t
;

25 
R8_TMR2_CTRL_MOD
 = 
RB_TMR_ALL_CLEAR
;

26 
R8_TMR2_CTRL_MOD
 = 
RB_TMR_COUNT_EN
;

27 
	}
}

38 
	$TMR2_EXTSögÀCou¡îInô
(
C≠ModeTy≥Def
 
ˇp
)

40 
R8_TMR2_CTRL_MOD
 = 
RB_TMR_ALL_CLEAR
;

41 
R8_TMR2_CTRL_MOD
 = 
RB_TMR_COUNT_EN
 | 
RB_TMR_CAP_COUNT
 | 
RB_TMR_MODE_IN
 | (
ˇp
 << 6);

42 
	}
}

54 
	$TMR2_PWMInô
(
PWMX_Pﬁ¨Ty≥Def
 
¥
, 
PWM_RïótTsTy≥Def
 
ts
)

57 
R8_TMR2_CTRL_MOD
 = 
RB_TMR_COUNT_EN
 | 
RB_TMR_OUT_EN
 | (
¥
 << 4Ë| (
ts
 << 6);

58 
	}
}

69 
	$TMR2_C≠Inô
(
C≠ModeTy≥Def
 
ˇp
)

71 
R8_TMR2_CTRL_MOD
 = 
RB_TMR_ALL_CLEAR
;

72 
R8_TMR2_CTRL_MOD
 = 
RB_TMR_COUNT_EN
 | 
RB_TMR_MODE_IN
 | (
ˇp
 << 6);

73 
	}
}

87 
	$TMR2_DMACfg
(
uöt8_t
 
s
, 
uöt16_t
 
°¨tAddr
, uöt16_à
ídAddr
, 
DMAModeTy≥Def
 
m
)

89 if(
s
 =
DISABLE
)

91 
R8_TMR2_CTRL_DMA
 = 0;

95 
R16_TMR2_DMA_BEG
 = 
°¨tAddr
;

96 
R16_TMR2_DMA_END
 = 
ídAddr
;

97 if(
m
)

99 
R8_TMR2_CTRL_DMA
 = 
RB_TMR_DMA_LOOP
 | 
RB_TMR_DMA_ENABLE
;

103 
R8_TMR2_CTRL_DMA
 = 
RB_TMR_DMA_ENABLE
;

106 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_timer3.c

11 
	~"CH57x_comm⁄.h
"

22 
	$TMR3_TimîInô
(
uöt32_t
 
t
)

24 
R32_TMR3_CNT_END
 = 
t
;

25 
R8_TMR3_CTRL_MOD
 = 
RB_TMR_ALL_CLEAR
;

26 
R8_TMR3_CTRL_MOD
 = 
RB_TMR_COUNT_EN
;

27 
	}
}

38 
	$TMR3_EXTSögÀCou¡îInô
(
C≠ModeTy≥Def
 
ˇp
)

40 
R8_TMR3_CTRL_MOD
 = 
RB_TMR_ALL_CLEAR
;

41 
R8_TMR3_CTRL_MOD
 = 
RB_TMR_COUNT_EN
 | 
RB_TMR_CAP_COUNT
 | 
RB_TMR_MODE_IN
 | (
ˇp
 << 6);

42 
	}
}

54 
	$TMR3_PWMInô
(
PWMX_Pﬁ¨Ty≥Def
 
¥
, 
PWM_RïótTsTy≥Def
 
ts
)

57 
R8_TMR3_CTRL_MOD
 = 
RB_TMR_COUNT_EN
 | 
RB_TMR_OUT_EN
 | (
¥
 << 4Ë| (
ts
 << 6);

58 
	}
}

69 
	$TMR3_C≠Inô
(
C≠ModeTy≥Def
 
ˇp
)

71 
R8_TMR3_CTRL_MOD
 = 
RB_TMR_ALL_CLEAR
;

72 
R8_TMR3_CTRL_MOD
 = 
RB_TMR_COUNT_EN
 | 
RB_TMR_MODE_IN
 | (
ˇp
 << 6);

73 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_uart0.c

11 
	~"CH57x_comm⁄.h
"

22 
	$UART0_DefInô
()

24 
	`UART0_BaudR©eCfg
(115200);

25 
R8_UART0_FCR
 = (2 << 6Ë| 
RB_FCR_TX_FIFO_CLR
 | 
RB_FCR_RX_FIFO_CLR
 | 
RB_FCR_FIFO_EN
;

26 
R8_UART0_LCR
 = 
RB_LCR_WORD_SZ
;

27 
R8_UART0_IER
 = 
RB_IER_TXD_EN
;

28 
R8_UART0_DIV
 = 1;

29 
	}
}

40 
	$UART0_BaudR©eCfg
(
uöt32_t
 
baudøã
)

42 
uöt32_t
 
x
;

44 
x
 = 10 * 
	`GëSysClock
(Ë/ 8 / 
baudøã
;

45 
x
 = (x + 5) / 10;

46 
R16_UART0_DL
 = (
uöt16_t
)
x
;

47 
	}
}

58 
	$UART0_ByãTrigCfg
(
UARTByãTRIGTy≥Def
 
b
)

60 
R8_UART0_FCR
 = (R8_UART0_FCR & ~
RB_FCR_FIFO_TRIG
Ë| (
b
 << 6);

61 
	}
}

77 
	$UART0_INTCfg
(
Fun˘i⁄ÆSèã
 
s
, 
uöt8_t
 
i
)

79 if(
s
)

81 
R8_UART0_IER
 |
i
;

82 
R8_UART0_MCR
 |
RB_MCR_INT_OE
;

86 
R8_UART0_IER
 &~
i
;

88 
	}
}

99 
	$UART0_Re£t
()

101 
R8_UART0_IER
 = 
RB_IER_RESET
;

102 
	}
}

114 
	$UART0_SídSåög
(
uöt8_t
 *
buf
, 
uöt16_t
 
l
)

116 
uöt16_t
 
Àn
 = 
l
;

118 
Àn
)

120 if(
R8_UART0_TFC
 !
UART_FIFO_SIZE
)

122 
R8_UART0_THR
 = *
buf
++;

123 
Àn
--;

126 
	}
}

137 
uöt16_t
 
	$UART0_RecvSåög
(
uöt8_t
 *
buf
)

139 
uöt16_t
 
Àn
 = 0;

141 
R8_UART0_RFC
)

143 *
buf
++ = 
R8_UART0_RBR
;

144 
Àn
++;

147  (
Àn
);

148 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_uart1.c

11 
	~"CH57x_comm⁄.h
"

22 
	$UART1_DefInô
()

24 
	`UART1_BaudR©eCfg
(115200);

25 
R8_UART1_FCR
 = (2 << 6Ë| 
RB_FCR_TX_FIFO_CLR
 | 
RB_FCR_RX_FIFO_CLR
 | 
RB_FCR_FIFO_EN
;

26 
R8_UART1_LCR
 = 
RB_LCR_WORD_SZ
;

27 
R8_UART1_IER
 = 
RB_IER_TXD_EN
;

28 
R8_UART1_DIV
 = 1;

29 
	}
}

40 
	$UART1_BaudR©eCfg
(
uöt32_t
 
baudøã
)

42 
uöt32_t
 
x
;

44 
x
 = 10 * 
	`GëSysClock
(Ë/ 8 / 
baudøã
;

45 
x
 = (x + 5) / 10;

46 
R16_UART1_DL
 = (
uöt16_t
)
x
;

47 
	}
}

58 
	$UART1_ByãTrigCfg
(
UARTByãTRIGTy≥Def
 
b
)

60 
R8_UART1_FCR
 = (R8_UART1_FCR & ~
RB_FCR_FIFO_TRIG
Ë| (
b
 << 6);

61 
	}
}

77 
	$UART1_INTCfg
(
Fun˘i⁄ÆSèã
 
s
, 
uöt8_t
 
i
)

79 if(
s
)

81 
R8_UART1_IER
 |
i
;

82 
R8_UART1_MCR
 |
RB_MCR_INT_OE
;

86 
R8_UART1_IER
 &~
i
;

88 
	}
}

99 
	$UART1_Re£t
()

101 
R8_UART1_IER
 = 
RB_IER_RESET
;

102 
	}
}

114 
	$UART1_SídSåög
(
uöt8_t
 *
buf
, 
uöt16_t
 
l
)

116 
uöt16_t
 
Àn
 = 
l
;

118 
Àn
)

120 if(
R8_UART1_TFC
 !
UART_FIFO_SIZE
)

122 
R8_UART1_THR
 = *
buf
++;

123 
Àn
--;

126 
	}
}

137 
uöt16_t
 
	$UART1_RecvSåög
(
uöt8_t
 *
buf
)

139 
uöt16_t
 
Àn
 = 0;

141 
R8_UART1_RFC
)

143 *
buf
++ = 
R8_UART1_RBR
;

144 
Àn
++;

147  (
Àn
);

148 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_uart2.c

11 
	~"CH57x_comm⁄.h
"

22 
	$UART2_DefInô
()

24 
	`UART2_BaudR©eCfg
(115200);

25 
R8_UART2_FCR
 = (2 << 6Ë| 
RB_FCR_TX_FIFO_CLR
 | 
RB_FCR_RX_FIFO_CLR
 | 
RB_FCR_FIFO_EN
;

26 
R8_UART2_LCR
 = 
RB_LCR_WORD_SZ
;

27 
R8_UART2_IER
 = 
RB_IER_TXD_EN
;

28 
R8_UART2_DIV
 = 1;

29 
	}
}

40 
	$UART2_BaudR©eCfg
(
uöt32_t
 
baudøã
)

42 
uöt32_t
 
x
;

44 
x
 = 10 * 
	`GëSysClock
(Ë/ 8 / 
baudøã
;

45 
x
 = (x + 5) / 10;

46 
R16_UART2_DL
 = (
uöt16_t
)
x
;

47 
	}
}

58 
	$UART2_ByãTrigCfg
(
UARTByãTRIGTy≥Def
 
b
)

60 
R8_UART2_FCR
 = (R8_UART2_FCR & ~
RB_FCR_FIFO_TRIG
Ë| (
b
 << 6);

61 
	}
}

77 
	$UART2_INTCfg
(
Fun˘i⁄ÆSèã
 
s
, 
uöt8_t
 
i
)

79 if(
s
)

81 
R8_UART2_IER
 |
i
;

82 
R8_UART2_MCR
 |
RB_MCR_INT_OE
;

86 
R8_UART2_IER
 &~
i
;

88 
	}
}

99 
	$UART2_Re£t
()

101 
R8_UART2_IER
 = 
RB_IER_RESET
;

102 
	}
}

114 
	$UART2_SídSåög
(
uöt8_t
 *
buf
, 
uöt16_t
 
l
)

116 
uöt16_t
 
Àn
 = 
l
;

118 
Àn
)

120 if(
R8_UART2_TFC
 !
UART_FIFO_SIZE
)

122 
R8_UART2_THR
 = *
buf
++;

123 
Àn
--;

126 
	}
}

137 
uöt16_t
 
	$UART2_RecvSåög
(
uöt8_t
 *
buf
)

139 
uöt16_t
 
Àn
 = 0;

141 
R8_UART2_RFC
)

143 *
buf
++ = 
R8_UART2_RBR
;

144 
Àn
++;

147  (
Àn
);

148 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_uart3.c

11 
	~"CH57x_comm⁄.h
"

22 
	$UART3_DefInô
()

24 
	`UART3_BaudR©eCfg
(115200);

25 
R8_UART3_FCR
 = (2 << 6Ë| 
RB_FCR_TX_FIFO_CLR
 | 
RB_FCR_RX_FIFO_CLR
 | 
RB_FCR_FIFO_EN
;

26 
R8_UART3_LCR
 = 
RB_LCR_WORD_SZ
;

27 
R8_UART3_IER
 = 
RB_IER_TXD_EN
;

28 
R8_UART3_DIV
 = 1;

29 
	}
}

40 
	$UART3_BaudR©eCfg
(
uöt32_t
 
baudøã
)

42 
uöt32_t
 
x
;

44 
x
 = 10 * 
	`GëSysClock
(Ë/ 8 / 
baudøã
;

45 
x
 = (x + 5) / 10;

46 
R16_UART3_DL
 = (
uöt16_t
)
x
;

47 
	}
}

58 
	$UART3_ByãTrigCfg
(
UARTByãTRIGTy≥Def
 
b
)

60 
R8_UART3_FCR
 = (R8_UART3_FCR & ~
RB_FCR_FIFO_TRIG
Ë| (
b
 << 6);

61 
	}
}

77 
	$UART3_INTCfg
(
Fun˘i⁄ÆSèã
 
s
, 
uöt8_t
 
i
)

79 if(
s
)

81 
R8_UART3_IER
 |
i
;

82 
R8_UART3_MCR
 |
RB_MCR_INT_OE
;

86 
R8_UART3_IER
 &~
i
;

88 
	}
}

99 
	$UART3_Re£t
()

101 
R8_UART3_IER
 = 
RB_IER_RESET
;

102 
	}
}

114 
	$UART3_SídSåög
(
uöt8_t
 *
buf
, 
uöt16_t
 
l
)

116 
uöt16_t
 
Àn
 = 
l
;

118 
Àn
)

120 if(
R8_UART3_TFC
 !
UART_FIFO_SIZE
)

122 
R8_UART3_THR
 = *
buf
++;

123 
Àn
--;

126 
	}
}

137 
uöt16_t
 
	$UART3_RecvSåög
(
uöt8_t
 *
buf
)

139 
uöt16_t
 
Àn
 = 0;

141 
R8_UART3_RFC
)

143 *
buf
++ = 
R8_UART3_RBR
;

144 
Àn
++;

147  (
Àn
);

148 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_usbdev.c

11 
	~"CH57x_comm⁄.h
"

13 
uöt8_t
 *
	gpEP0_RAM_Addr
;

14 
uöt8_t
 *
	gpEP1_RAM_Addr
;

15 
uöt8_t
 *
	gpEP2_RAM_Addr
;

16 
uöt8_t
 *
	gpEP3_RAM_Addr
;

27 
	$USB_Devi˚Inô
()

29 
R8_USB_CTRL
 = 0x00;

31 
R8_UEP4_1_MOD
 = 
RB_UEP4_RX_EN
 | 
RB_UEP4_TX_EN
 | 
RB_UEP1_RX_EN
 | 
RB_UEP1_TX_EN
;

32 
R8_UEP2_3_MOD
 = 
RB_UEP2_RX_EN
 | 
RB_UEP2_TX_EN
 | 
RB_UEP3_RX_EN
 | 
RB_UEP3_TX_EN
;

34 
R16_UEP0_DMA
 = (
uöt16_t
)(
uöt32_t
)
pEP0_RAM_Addr
;

35 
R16_UEP1_DMA
 = (
uöt16_t
)(
uöt32_t
)
pEP1_RAM_Addr
;

36 
R16_UEP2_DMA
 = (
uöt16_t
)(
uöt32_t
)
pEP2_RAM_Addr
;

37 
R16_UEP3_DMA
 = (
uöt16_t
)(
uöt32_t
)
pEP3_RAM_Addr
;

39 
R8_UEP0_CTRL
 = 
UEP_R_RES_ACK
 | 
UEP_T_RES_NAK
;

40 
R8_UEP1_CTRL
 = 
UEP_R_RES_ACK
 | 
UEP_T_RES_NAK
 | 
RB_UEP_AUTO_TOG
;

41 
R8_UEP2_CTRL
 = 
UEP_R_RES_ACK
 | 
UEP_T_RES_NAK
 | 
RB_UEP_AUTO_TOG
;

42 
R8_UEP3_CTRL
 = 
UEP_R_RES_ACK
 | 
UEP_T_RES_NAK
 | 
RB_UEP_AUTO_TOG
;

43 
R8_UEP4_CTRL
 = 
UEP_R_RES_ACK
 | 
UEP_T_RES_NAK
;

45 
R8_USB_DEV_AD
 = 0x00;

46 
R8_USB_CTRL
 = 
RB_UC_DEV_PU_EN
 | 
RB_UC_INT_BUSY
 | 
RB_UC_DMA_EN
;

47 
R16_PIN_ANALOG_IE
 |
RB_PIN_USB_IE
 | 
RB_PIN_USB_DP_PU
;

48 
R8_USB_INT_FG
 = 0xFF;

49 
R8_UDEV_CTRL
 = 
RB_UD_PD_DIS
 | 
RB_UD_PORT_EN
;

50 
R8_USB_INT_EN
 = 
RB_UIE_SUSPEND
 | 
RB_UIE_BUS_RST
 | 
RB_UIE_TRANSFER
;

51 
	}
}

62 
	$DevEP1_IN_Dól
(
uöt8_t
 
l
)

64 
R8_UEP1_T_LEN
 = 
l
;

65 
R8_UEP1_CTRL
 = (R8_UEP1_CTRL & ~
MASK_UEP_T_RES
Ë| 
UEP_T_RES_ACK
;

66 
	}
}

77 
	$DevEP2_IN_Dól
(
uöt8_t
 
l
)

79 
R8_UEP2_T_LEN
 = 
l
;

80 
R8_UEP2_CTRL
 = (R8_UEP2_CTRL & ~
MASK_UEP_T_RES
Ë| 
UEP_T_RES_ACK
;

81 
	}
}

92 
	$DevEP3_IN_Dól
(
uöt8_t
 
l
)

94 
R8_UEP3_T_LEN
 = 
l
;

95 
R8_UEP3_CTRL
 = (R8_UEP3_CTRL & ~
MASK_UEP_T_RES
Ë| 
UEP_T_RES_ACK
;

96 
	}
}

107 
	$DevEP4_IN_Dól
(
uöt8_t
 
l
)

109 
R8_UEP4_T_LEN
 = 
l
;

110 
R8_UEP4_CTRL
 = (R8_UEP4_CTRL & ~
MASK_UEP_T_RES
Ë| 
UEP_T_RES_ACK
;

111 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_usbhostBase.c

11 
	~"CH57x_comm⁄.h
"

12 #i‡
DISK_LIB_ENABLE


13 
	~"CHRV3UFI.H
"

16 
uöt8_t
 
	gUsbDevEndp0Size
;

17 
uöt8_t
 
	gFoundNewDev
;

18 
_RoŸHubDev
 
	gThisUsbDev
;

19 
_DevOnHubP‹t
 
	gDevOnHubP‹t
[
HUB_MAX_PORTS
];

21 
uöt8_t
 *
	gpHOST_RX_RAM_Addr
;

22 
uöt8_t
 *
	gpHOST_TX_RAM_Addr
;

25 
__©åibuã__
((
	$Æig√d
(4))Ëc⁄° 
uöt8_t
 
SëupGëDevDes¸
[] = {
USB_REQ_TYP_IN
, 
USB_GET_DESCRIPTOR
, 0x00,

26 
USB_DESCR_TYP_DEVICE
, 0x00, 0x00, (
USB_DEV_DESCR
), 0x00
	}
};

28 
__©åibuã__
((
	$Æig√d
(4))Ëc⁄° 
uöt8_t
 
SëupGëCfgDes¸
[] = {
USB_REQ_TYP_IN
, 
USB_GET_DESCRIPTOR
, 0x00,

29 
USB_DESCR_TYP_CONFIG
, 0x00, 0x00, 0x04, 0x00
	}
};

31 
__©åibuã__
((
	$Æig√d
(4))Ëc⁄° 
uöt8_t
 
SëupSëUsbAddr
[] = {
USB_REQ_TYP_OUT
, 
USB_SET_ADDRESS
, 
USB_DEVICE_ADDR
, 0x00,

32 0x00, 0x00, 0x00, 0x00
	}
};

34 
__©åibuã__
((
	$Æig√d
(4))Ëc⁄° 
uöt8_t
 
SëupSëUsbC⁄fig
[] = {
USB_REQ_TYP_OUT
, 
USB_SET_CONFIGURATION
, 0x00, 0x00, 0x00,

35 0x00, 0x00, 0x00
	}
};

37 
__©åibuã__
((
	$Æig√d
(4))Ëc⁄° 
uöt8_t
 
SëupSëUsbI¡îÁ˚
[] = {
USB_REQ_RECIP_INTERF
, 
USB_SET_INTERFACE
, 0x00, 0x00,

38 0x00, 0x00, 0x00, 0x00
	}
};

40 
__©åibuã__
((
	$Æig√d
(4))Ëc⁄° 
uöt8_t
 
SëupCÃEndpSèŒ
[] = {
USB_REQ_TYP_OUT
 | 
USB_REQ_RECIP_ENDP
, 
USB_CLEAR_FEATURE
,

41 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	}
};

52 
	$DißbÀRoŸHubP‹t
()

54 #ifde‡
FOR_ROOT_UDISK_ONLY


55 
CHRV3DiskSètus
 = 
DISK_DISCONNECT
;

57 #i‚de‡
DISK_BASE_BUF_LEN


58 
ThisUsbDev
.
Devi˚Sètus
 = 
ROOT_DEV_DISCONNECT
;

59 
ThisUsbDev
.
Devi˚Addªss
 = 0x00;

61 
	}
}

73 
uöt8_t
 
	$A«lyzeRoŸHub
()

75 
uöt8_t
 
s
;

77 
s
 = 
ERR_SUCCESS
;

79 if(
R8_USB_MIS_ST
 & 
RB_UMS_DEV_ATTACH
)

81 #ifde‡
DISK_BASE_BUF_LEN


82 if(
CHRV3DiskSètus
 =
DISK_DISCONNECT


84 if(
ThisUsbDev
.
Devi˚Sètus
 =
ROOT_DEV_DISCONNECT


86 || (
R8_UHOST_CTRL
 & 
RB_UH_PORT_EN
) == 0x00)

88 
	`DißbÀRoŸHubP‹t
();

89 #ifde‡
DISK_BASE_BUF_LEN


90 
CHRV3DiskSètus
 = 
DISK_CONNECT
;

92 
ThisUsbDev
.
Devi˚S≥ed
 = 
R8_USB_MIS_ST
 & 
RB_UMS_DM_LEVEL
 ? 0 : 1;

93 
ThisUsbDev
.
Devi˚Sètus
 = 
ROOT_DEV_CONNECTED
;

95 
	`PRINT
("USB dev in\n");

96 
s
 = 
ERR_USB_CONNECT
;

100 #ifde‡
DISK_BASE_BUF_LEN


101 if(
CHRV3DiskSètus
 >
DISK_CONNECT
)

104 if(
ThisUsbDev
.
Devi˚Sètus
 >
ROOT_DEV_CONNECTED
)

107 
	`DißbÀRoŸHubP‹t
();

108 
	`PRINT
("USB dev out\n");

109 if(
s
 =
ERR_SUCCESS
)

111 
s
 = 
ERR_USB_DISCON
;

115  (
s
);

116 
	}
}

127 
	$SëHo°UsbAddr
(
uöt8_t
 
addr
)

129 
R8_USB_DEV_AD
 = (R8_USB_DEV_AD & 
RB_UDA_GP_BIT
Ë| (
addr
 & 
MASK_USB_ADDR
);

130 
	}
}

141 
	$SëUsbS≥ed
(
uöt8_t
 
FuŒS≥ed
)

143 #i‚de‡
DISK_BASE_BUF_LEN


144 if(
FuŒS≥ed
)

146 
R8_USB_CTRL
 &~
RB_UC_LOW_SPEED
;

147 
R8_UH_SETUP
 &~
RB_UH_PRE_PID_EN
;

151 
R8_USB_CTRL
 |
RB_UC_LOW_SPEED
;

154 ()
FuŒS≥ed
;

155 
	}
}

166 
	$Re£tRoŸHubP‹t
()

168 
UsbDevEndp0Size
 = 
DEFAULT_ENDP0_SIZE
;

169 
	`SëHo°UsbAddr
(0x00);

170 
R8_UHOST_CTRL
 &~
RB_UH_PORT_EN
;

171 
	`SëUsbS≥ed
(1);

172 
R8_UHOST_CTRL
 = (R8_UHOST_CTRL & ~
RB_UH_LOW_SPEED
Ë| 
RB_UH_BUS_RESET
;

173 
	`mDñaymS
(15);

174 
R8_UHOST_CTRL
 = R8_UHOST_CTRL & ~
RB_UH_BUS_RESET
;

175 
	`mDñayuS
(250);

176 
R8_USB_INT_FG
 = 
RB_UIF_DETECT
;

177 
	}
}

188 
uöt8_t
 
	$E«bÀRoŸHubP‹t
()

190 #ifde‡
DISK_BASE_BUF_LEN


191 if(
CHRV3DiskSètus
 < 
DISK_CONNECT
)

192 
CHRV3DiskSètus
 = 
DISK_CONNECT
;

194 if(
ThisUsbDev
.
Devi˚Sètus
 < 
ROOT_DEV_CONNECTED
)

195 
ThisUsbDev
.
Devi˚Sètus
 = 
ROOT_DEV_CONNECTED
;

197 if(
R8_USB_MIS_ST
 & 
RB_UMS_DEV_ATTACH
)

199 #i‚de‡
DISK_BASE_BUF_LEN


200 if((
R8_UHOST_CTRL
 & 
RB_UH_PORT_EN
) == 0x00)

202 
ThisUsbDev
.
Devi˚S≥ed
 = (
R8_USB_MIS_ST
 & 
RB_UMS_DM_LEVEL
) ? 0 : 1;

203 if(
ThisUsbDev
.
Devi˚S≥ed
 == 0)

205 
R8_UHOST_CTRL
 |
RB_UH_LOW_SPEED
;

209 
R8_UHOST_CTRL
 |
RB_UH_PORT_EN
;

210  (
ERR_SUCCESS
);

212  (
ERR_USB_DISCON
);

213 
	}
}

215 #i‚de‡
DISK_BASE_BUF_LEN


225 
	$Sñe˘HubP‹t
(
uöt8_t
 
HubP‹tIndex
)

227 if(
HubP‹tIndex
)

229 
	`SëHo°UsbAddr
(
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
Devi˚Addªss
);

230 
	`SëUsbS≥ed
(
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
Devi˚S≥ed
);

231 if(
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
Devi˚S≥ed
 == 0)

233 
R8_UEP1_CTRL
 |
RB_UH_PRE_PID_EN
;

234 
	`mDñayuS
(100);

239 
	`SëHo°UsbAddr
(
ThisUsbDev
.
Devi˚Addªss
);

240 
	`SëUsbS≥ed
(
ThisUsbDev
.
Devi˚S≥ed
);

242 
	}
}

254 
uöt8_t
 
	$WaôUSB_I¡îru±
()

256 
uöt16_t
 
i
;

257 
i
 = 
WAIT_USB_TOUT_200US
; i !0 && (
R8_USB_INT_FG
 & 
RB_UIF_TRANSFER
) == 0; i--)

261  ((
R8_USB_INT_FG
 & 
RB_UIF_TRANSFER
Ë? 
ERR_SUCCESS
 : 
ERR_USB_UNKNOWN
);

262 
	}
}

279 
uöt8_t
 
	$USBHo°Tønß˘
(
uöt8_t
 
ídp_pid
, uöt8_à
tog
, 
uöt32_t
 
timeout
)

281 
uöt8_t
 
TønsRëry
;

283 
uöt8_t
 
s
, 
r
;

284 
uöt16_t
 
i
;

286 
R8_UH_RX_CTRL
 = 
R8_UH_TX_CTRL
 = 
tog
;

287 
TønsRëry
 = 0;

291 
R8_UH_EP_PID
 = 
ídp_pid
;

292 
R8_USB_INT_FG
 = 
RB_UIF_TRANSFER
;

293 
i
 = 
WAIT_USB_TOUT_200US
; i !0 && (
R8_USB_INT_FG
 & 
RB_UIF_TRANSFER
) == 0; i--)

297 
R8_UH_EP_PID
 = 0x00;

298 if((
R8_USB_INT_FG
 & 
RB_UIF_TRANSFER
) == 0)

300  (
ERR_USB_UNKNOWN
);

303 if(
R8_USB_INT_FG
 & 
RB_UIF_DETECT
)

306 
R8_USB_INT_FG
 = 
RB_UIF_DETECT
;

307 
s
 = 
	`A«lyzeRoŸHub
();

309 if(
s
 =
ERR_USB_CONNECT
)

310 
FoundNewDev
 = 1;

311 #ifde‡
DISK_BASE_BUF_LEN


312 if(
CHRV3DiskSètus
 =
DISK_DISCONNECT
)

314  (
ERR_USB_DISCON
);

316 if(
CHRV3DiskSètus
 =
DISK_CONNECT
)

318  (
ERR_USB_CONNECT
);

321 if(
ThisUsbDev
.
Devi˚Sètus
 =
ROOT_DEV_DISCONNECT
)

323  (
ERR_USB_DISCON
);

325 if(
ThisUsbDev
.
Devi˚Sètus
 =
ROOT_DEV_CONNECTED
)

327  (
ERR_USB_CONNECT
);

330 
	`mDñayuS
(200);

333 if(
R8_USB_INT_FG
 & 
RB_UIF_TRANSFER
)

335 if(
R8_USB_INT_ST
 & 
RB_UIS_TOG_OK
)

337  (
ERR_SUCCESS
);

339 
r
 = 
R8_USB_INT_ST
 & 
MASK_UIS_H_RES
;

340 if(
r
 =
USB_PID_STALL
)

342  (
r
 | 
ERR_USB_TRANSFER
);

344 if(
r
 =
USB_PID_NAK
)

346 if(
timeout
 == 0)

348  (
r
 | 
ERR_USB_TRANSFER
);

350 if(
timeout
 < 0xFFFFFFFF)

352 
timeout
--;

354 --
TønsRëry
;

357 
ídp_pid
 >> 4)

359 
USB_PID_SETUP
:

360 
USB_PID_OUT
:

361 if(
r
)

363  (
r
 | 
ERR_USB_TRANSFER
);

366 
USB_PID_IN
:

367 if(
r
 =
USB_PID_DATA0
 ||Ñ =
USB_PID_DATA1
)

370 if(
r
)

372  (
r
 | 
ERR_USB_TRANSFER
);

376  (
ERR_USB_UNKNOWN
);

382 
R8_USB_INT_FG
 = 0xFF;

384 
	`mDñayuS
(15);

385 } ++
TønsRëry
 < 3);

386  (
ERR_USB_TRANSFER
);

387 
	}
}

400 
uöt8_t
 
	$Ho°CålTøns„r
(
uöt8_t
 *
D©aBuf
, uöt8_à*
RëLí
)

402 
uöt16_t
 
RemLí
 = 0;

403 
uöt8_t
 
s
, 
RxLí
, 
RxC¡
, 
TxC¡
;

404 
uöt8_t
 *
pBuf
;

405 
uöt8_t
 *
pLí
;

407 
pBuf
 = 
D©aBuf
;

408 
pLí
 = 
RëLí
;

409 
	`mDñayuS
(200);

410 if(
pLí
)

412 *
pLí
 = 0;

415 
R8_UH_TX_LEN
 = (
USB_SETUP_REQ
);

416 
s
 = 
	`USBHo°Tønß˘
(
USB_PID_SETUP
 << 4 | 0x00, 0x00, 200000 / 20);

417 if(
s
 !
ERR_SUCCESS
)

419  (
s
);

421 
R8_UH_RX_CTRL
 = 
R8_UH_TX_CTRL
 = 
RB_UH_R_TOG
 | 
RB_UH_R_AUTO_TOG
 | 
RB_UH_T_TOG
 | 
RB_UH_T_AUTO_TOG
;

422 
R8_UH_TX_LEN
 = 0x01;

423 
RemLí
 = 
pSëupReq
->
wLígth
;

424 if(
RemLí
 && 
pBuf
)

426 if(
pSëupReq
->
bReque°Ty≥
 & 
USB_REQ_TYP_IN
)

428 
RemLí
)

430 
	`mDñayuS
(200);

431 
s
 = 
	`USBHo°Tønß˘
(
USB_PID_IN
 << 4 | 0x00, 
R8_UH_RX_CTRL
, 200000 / 20);

432 if(
s
 !
ERR_SUCCESS
)

434  (
s
);

436 
RxLí
 = 
R8_USB_RX_LEN
 < 
RemLí
 ? R8_USB_RX_LEN : RemLen;

437 
RemLí
 -
RxLí
;

438 if(
pLí
)

440 *
pLí
 +
RxLí
;

442 
RxC¡
 = 0; RxC¡ !
RxLí
; RxCnt++)

444 *
pBuf
 = 
pHOST_RX_RAM_Addr
[
RxC¡
];

445 
pBuf
++;

447 if(
R8_USB_RX_LEN
 =0 || (R8_USB_RX_LEN & (
UsbDevEndp0Size
 - 1)))

452 
R8_UH_TX_LEN
 = 0x00;

456 
RemLí
)

458 
	`mDñayuS
(200);

459 
R8_UH_TX_LEN
 = 
RemLí
 >
UsbDevEndp0Size
 ? UsbDevEndp0Size : RemLen;

460 
TxC¡
 = 0; TxC¡ !
R8_UH_TX_LEN
; TxCnt++)

462 
pHOST_TX_RAM_Addr
[
TxC¡
] = *
pBuf
;

463 
pBuf
++;

465 
s
 = 
	`USBHo°Tønß˘
(
USB_PID_OUT
 << 4 | 0x00, 
R8_UH_TX_CTRL
, 200000 / 20);

466 if(
s
 !
ERR_SUCCESS
)

468  (
s
);

470 
RemLí
 -
R8_UH_TX_LEN
;

471 if(
pLí
)

473 *
pLí
 +
R8_UH_TX_LEN
;

479 
	`mDñayuS
(200);

480 
s
 = 
	`USBHo°Tønß˘
((
R8_UH_TX_LEN
 ? 
USB_PID_IN
 << 4 | 0x00 : 
USB_PID_OUT
 << 4 | 0x00), 
RB_UH_R_TOG
 | 
RB_UH_T_TOG
, 200000 / 20);

481 if(
s
 !
ERR_SUCCESS
)

483  (
s
);

485 if(
R8_UH_TX_LEN
 == 0)

487  (
ERR_SUCCESS
);

489 if(
R8_USB_RX_LEN
 == 0)

491  (
ERR_SUCCESS
);

493  (
ERR_USB_BUF_OVER
);

494 
	}
}

505 
	$C›ySëupReqPkg
(c⁄° 
uöt8_t
 *
pReqPkt
)

507 
uöt8_t
 
i
;

508 
i
 = 0; i !(
USB_SETUP_REQ
); i++)

510 ((
uöt8_t
 *)
pSëupReq
)[
i
] = *
pReqPkt
;

511 
pReqPkt
++;

513 
	}
}

525 
uöt8_t
 
	$CålGëDevi˚Des¸
()

527 
uöt8_t
 
s
;

528 
uöt8_t
 
Àn
;

530 
UsbDevEndp0Size
 = 
DEFAULT_ENDP0_SIZE
;

531 
	`C›ySëupReqPkg
((
öt8_t
 *)
SëupGëDevDes¸
);

532 
s
 = 
	`Ho°CålTøns„r
(
Com_Buf„r
, &
Àn
);

533 if(
s
 !
ERR_SUCCESS
)

535  (
s
);

537 
UsbDevEndp0Size
 = ((
PUSB_DEV_DESCR
)
Com_Buf„r
)->
bMaxPackëSize0
;

538 if(
Àn
 < ((
PUSB_SETUP_REQ
)
SëupGëDevDes¸
)->
wLígth
)

540  (
ERR_USB_BUF_OVER
);

542  (
ERR_SUCCESS
);

543 
	}
}

555 
uöt8_t
 
	$CålGëC⁄figDes¸
()

557 
uöt8_t
 
s
;

558 
uöt8_t
 
Àn
;

560 
	`C›ySëupReqPkg
((
öt8_t
 *)
SëupGëCfgDes¸
);

561 
s
 = 
	`Ho°CålTøns„r
(
Com_Buf„r
, &
Àn
);

562 if(
s
 !
ERR_SUCCESS
)

564  (
s
);

566 if(
Àn
 < ((
PUSB_SETUP_REQ
)
SëupGëCfgDes¸
)->
wLígth
)

568  (
ERR_USB_BUF_OVER
);

571 
Àn
 = ((
PUSB_CFG_DESCR
)
Com_Buf„r
)->
wTŸÆLígth
;

572 
	`C›ySëupReqPkg
((
uöt8_t
 *)
SëupGëCfgDes¸
);

573 
pSëupReq
->
wLígth
 = 
Àn
;

574 
s
 = 
	`Ho°CålTøns„r
(
Com_Buf„r
, &
Àn
);

575 if(
s
 !
ERR_SUCCESS
)

577  (
s
);

580 #ifde‡
DISK_BASE_BUF_LEN


581 if(
Àn
 > 64)

582 
Àn
 = 64;

583 
	`mem˝y
(
TxBuf„r
, 
Com_Buf„r
, 
Àn
);

586  (
ERR_SUCCESS
);

587 
	}
}

598 
uöt8_t
 
	$CålSëUsbAddªss
(
uöt8_t
 
addr
)

600 
uöt8_t
 
s
;

602 
	`C›ySëupReqPkg
((
öt8_t
 *)
SëupSëUsbAddr
);

603 
pSëupReq
->
wVÆue
 = 
addr
;

604 
s
 = 
	`Ho°CålTøns„r
(
NULL
, NULL);

605 if(
s
 !
ERR_SUCCESS
)

607  (
s
);

609 
	`SëHo°UsbAddr
(
addr
);

610 
	`mDñaymS
(10);

611  (
ERR_SUCCESS
);

612 
	}
}

623 
uöt8_t
 
	$CålSëUsbC⁄fig
(
uöt8_t
 
cfg
)

625 
	`C›ySëupReqPkg
((
öt8_t
 *)
SëupSëUsbC⁄fig
);

626 
pSëupReq
->
wVÆue
 = 
cfg
;

627  (
	`Ho°CålTøns„r
(
NULL
, NULL));

628 
	}
}

639 
uöt8_t
 
	$CålCÀ¨EndpSèŒ
(
uöt8_t
 
ídp
)

641 
	`C›ySëupReqPkg
((
öt8_t
 *)
SëupCÃEndpSèŒ
);

642 
pSëupReq
->
wIndex
 = 
ídp
;

643  (
	`Ho°CålTøns„r
(
NULL
, NULL));

644 
	}
}

655 
uöt8_t
 
	$CålSëUsbI¡îˇ˚
(
uöt8_t
 
cfg
)

657 
	`C›ySëupReqPkg
((
öt8_t
 *)
SëupSëUsbI¡îÁ˚
);

658 
pSëupReq
->
wVÆue
 = 
cfg
;

659  (
	`Ho°CålTøns„r
(
NULL
, NULL));

660 
	}
}

671 
	$USB_Ho°Inô
()

673 
R8_USB_CTRL
 = 
RB_UC_HOST_MODE
;

674 
R8_UHOST_CTRL
 = 0;

675 
R8_USB_DEV_AD
 = 0x00;

677 
R8_UH_EP_MOD
 = 
RB_UH_EP_TX_EN
 | 
RB_UH_EP_RX_EN
;

678 
R16_UH_RX_DMA
 = (
uöt16_t
)(
uöt32_t
)
pHOST_RX_RAM_Addr
;

679 
R16_UH_TX_DMA
 = (
uöt16_t
)(
uöt32_t
)
pHOST_TX_RAM_Addr
;

681 
R8_UH_RX_CTRL
 = 0x00;

682 
R8_UH_TX_CTRL
 = 0x00;

683 
R8_USB_CTRL
 = 
RB_UC_HOST_MODE
 | 
RB_UC_INT_BUSY
 | 
RB_UC_DMA_EN
;

684 
R8_UH_SETUP
 = 
RB_UH_SOF_EN
;

685 
R8_USB_INT_FG
 = 0xFF;

686 
	`DißbÀRoŸHubP‹t
();

687 
R8_USB_INT_EN
 = 
RB_UIE_TRANSFER
 | 
RB_UIE_DETECT
;

689 
FoundNewDev
 = 0;

690 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_usbhostClass.c

11 
	~"CH57x_comm⁄.h
"

12 #i‡
DISK_LIB_ENABLE


13 
	~"CHRV3UFI.H
"

17 
__©åibuã__
((
	$Æig√d
(4))Ëc⁄° 
uöt8_t
 
SëupSëHIDIdÀ
[] = {0x21, 
HID_SET_IDLE
, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	}
};

19 
__©åibuã__
((
	$Æig√d
(4))Ëc⁄° 
uöt8_t
 
SëupGëHIDDevRï‹t
[] = {0x81, 
USB_GET_DESCRIPTOR
, 0x00, 
USB_DESCR_TYP_REPORT
,

20 0x00, 0x00, 0x41, 0x00
	}
};

22 
__©åibuã__
((
	$Æig√d
(4))Ëc⁄° 
uöt8_t
 
SëupGëHubDes¸
[] = {
HUB_GET_HUB_DESCRIPTOR
, 
HUB_GET_DESCRIPTOR
, 0x00,

23 
USB_DESCR_TYP_HUB
, 0x00, 0x00, (
USB_HUB_DESCR
), 0x00
	}
};

25 
__©åibuã__
((
	$Æig√d
(4))Ë
uöt8_t
 
Com_Buf„r
[128];

36 
uöt8_t
 
	$A«lyzeHidI¡Endp
(
uöt8_t
 *
buf
, uöt8_à
HubP‹tIndex
)

38 
uöt8_t
 
i
, 
s
, 
l
;

39 
s
 = 0;

41 if(
HubP‹tIndex
)

43 
	`mem£t
(
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
GpV¨
, 0, (DevOnHubPort[HubPortIndex - 1].GpVar));

47 
	`mem£t
(
ThisUsbDev
.
GpV¨
, 0, (ThisUsbDev.GpVar));

50 
i
 = 0; i < ((
PUSB_CFG_DESCR
)
buf
)->
wTŸÆLígth
; i +
l
)

52 if(((
PUSB_ENDP_DESCR
)(
buf
 + 
i
))->
bDes¸ùt‹Ty≥
 =
USB_DESCR_TYP_ENDP


53 && (((
PUSB_ENDP_DESCR
)(
buf
 + 
i
))->
bmAâribuãs
 & 
USB_ENDP_TYPE_MASK
Ë=
USB_ENDP_TYPE_INTER


54 && (((
PUSB_ENDP_DESCR
)(
buf
 + 
i
))->
bEndpoötAddªss
 & 
USB_ENDP_DIR_MASK
))

56 if(
HubP‹tIndex
)

58 
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
GpV¨
[
s
] = ((
PUSB_ENDP_DESCR
)(
buf
 + 
i
))->
bEndpoötAddªss
 & 
USB_ENDP_ADDR_MASK
;

62 
ThisUsbDev
.
GpV¨
[
s
] = ((
PUSB_ENDP_DESCR
)(
buf
 + 
i
))->
bEndpoötAddªss
 & 
USB_ENDP_ADDR_MASK
;

64 
	`PRINT
("%02x ", (
uöt16_t
)
ThisUsbDev
.
GpV¨
[
s
]);

65 
s
++;

66 if(
s
 >= 4)

71 
l
 = ((
PUSB_ENDP_DESCR
)(
buf
 + 
i
))->
bLígth
;

72 if(
l
 > 16)

77 
	`PRINT
("\n");

78  (
s
);

79 
	}
}

90 
uöt8_t
 
	$A«lyzeBulkEndp
(
uöt8_t
 *
buf
, uöt8_à
HubP‹tIndex
)

92 
uöt8_t
 
i
, 
s1
, 
s2
, 
l
;

93 
s1
 = 0;

94 
s2
 = 2;

96 if(
HubP‹tIndex
)

98 
	`mem£t
(
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
GpV¨
, 0, (DevOnHubPort[HubPortIndex - 1].GpVar));

102 
	`mem£t
(
ThisUsbDev
.
GpV¨
, 0, (ThisUsbDev.GpVar));

105 
i
 = 0; i < ((
PUSB_CFG_DESCR
)
buf
)->
wTŸÆLígth
; i +
l
)

107 if((((
PUSB_ENDP_DESCR
)(
buf
 + 
i
))->
bDes¸ùt‹Ty≥
 =
USB_DESCR_TYP_ENDP
)

108 && ((((
PUSB_ENDP_DESCR
)(
buf
 + 
i
))->
bmAâribuãs
 & 
USB_ENDP_TYPE_MASK
Ë=
USB_ENDP_TYPE_BULK
))

111 if(
HubP‹tIndex
)

113 if(((
PUSB_ENDP_DESCR
)(
buf
 + 
i
))->
bEndpoötAddªss
 & 
USB_ENDP_DIR_MASK
)

115 
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
GpV¨
[
s1
++] = ((
PUSB_ENDP_DESCR
)(
buf
 + 
i
))->
bEndpoötAddªss
 & 
USB_ENDP_ADDR_MASK
;

119 
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
GpV¨
[
s2
++] = ((
PUSB_ENDP_DESCR
)(
buf
 + 
i
))->
bEndpoötAddªss
 & 
USB_ENDP_ADDR_MASK
;

124 if(((
PUSB_ENDP_DESCR
)(
buf
 + 
i
))->
bEndpoötAddªss
 & 
USB_ENDP_DIR_MASK
)

126 
ThisUsbDev
.
GpV¨
[
s1
++] = ((
PUSB_ENDP_DESCR
)(
buf
 + 
i
))->
bEndpoötAddªss
 & 
USB_ENDP_ADDR_MASK
;

130 
ThisUsbDev
.
GpV¨
[
s2
++] = ((
PUSB_ENDP_DESCR
)(
buf
 + 
i
))->
bEndpoötAddªss
 & 
USB_ENDP_ADDR_MASK
;

134 if(
s1
 == 2)

136 
s1
 = 1;

138 if(
s2
 == 4)

140 
s2
 = 3;

143 
l
 = ((
PUSB_ENDP_DESCR
)(
buf
 + 
i
))->
bLígth
;

144 if(
l
 > 16)

150 
	}
}

161 
uöt8_t
 
	$InôRoŸDevi˚
()

163 
uöt8_t
 
i
, 
s
;

164 
uöt8_t
 
cfg
, 
dv_˛s
, 
if_˛s
;

166 
	`PRINT
("Reset hostÖort\n");

167 
	`Re£tRoŸHubP‹t
();

168 
i
 = 0, 
s
 = 0; i < 100; i++)

170 
	`mDñaymS
(1);

171 if(
	`E«bÀRoŸHubP‹t
(Ë=
ERR_SUCCESS
)

173 
i
 = 0;

174 
s
++;

175 if(
s
 > 100)

181 if(
i
)

183 
	`DißbÀRoŸHubP‹t
();

184 
	`PRINT
("Disable hostÖort because of disconnect\n");

185  (
ERR_USB_DISCON
);

187 
	`SëUsbS≥ed
(
ThisUsbDev
.
Devi˚S≥ed
);

189 
	`PRINT
("GetDevDescr: ");

190 
s
 = 
	`CålGëDevi˚Des¸
();

191 if(
s
 =
ERR_SUCCESS
)

193 
i
 = 0; i < ((
PUSB_SETUP_REQ
)
SëupGëDevDes¸
)->
wLígth
; i++)

195 
	`PRINT
("x%02X ", (
uöt16_t
)(
Com_Buf„r
[
i
]));

197 
	`PRINT
("\n");

199 
ThisUsbDev
.
Devi˚VID
 = ((
PUSB_DEV_DESCR
)
Com_Buf„r
)->
idVíd‹
;

200 
ThisUsbDev
.
Devi˚PID
 = ((
PUSB_DEV_DESCR
)
Com_Buf„r
)->
idProdu˘
;

201 
dv_˛s
 = ((
PUSB_DEV_DESCR
)
Com_Buf„r
)->
bDevi˚Cœss
;

203 
s
 = 
	`CålSëUsbAddªss
(((
PUSB_SETUP_REQ
)
SëupSëUsbAddr
)->
wVÆue
);

204 if(
s
 =
ERR_SUCCESS
)

206 
ThisUsbDev
.
Devi˚Addªss
 = ((
PUSB_SETUP_REQ
)
SëupSëUsbAddr
)->
wVÆue
;

208 
	`PRINT
("GetCfgDescr: ");

209 
s
 = 
	`CålGëC⁄figDes¸
();

210 if(
s
 =
ERR_SUCCESS
)

212 
i
 = 0; i < ((
PUSB_CFG_DESCR
)
Com_Buf„r
)->
wTŸÆLígth
; i++)

214 
	`PRINT
("x%02X ", (
uöt16_t
)(
Com_Buf„r
[
i
]));

216 
	`PRINT
("\n");

218 
cfg
 = ((
PUSB_CFG_DESCR
)
Com_Buf„r
)->
bC⁄figuøti⁄VÆue
;

219 
if_˛s
 = ((
PUSB_CFG_DESCR_LONG
)
Com_Buf„r
)->
ôf_des¸
.
bI¡îÁ˚Cœss
;

221 if((
dv_˛s
 =0x00Ë&& (
if_˛s
 =
USB_DEV_CLASS_STORAGE
))

223 #ifde‡
FOR_ROOT_UDISK_ONLY


224 
CHRV3DiskSètus
 = 
DISK_USB_ADDR
;

225  (
ERR_SUCCESS
);

229  (
ERR_USB_UNSUPPORT
);

232 
s
 = 
	`CålSëUsbC⁄fig
(
cfg
);

233 if(
s
 =
ERR_SUCCESS
)

235 
ThisUsbDev
.
Devi˚Sètus
 = 
ROOT_DEV_SUCCESS
;

236 
ThisUsbDev
.
Devi˚Ty≥
 = 
USB_DEV_CLASS_STORAGE
;

237 
	`PRINT
("USB-Disk Ready\n");

238 
	`SëUsbS≥ed
(1);

239  (
ERR_SUCCESS
);

242 if((
dv_˛s
 =0x00Ë&& (
if_˛s
 =
USB_DEV_CLASS_PRINTER
Ë&& ((
PUSB_CFG_DESCR_LONG
)
Com_Buf„r
)->
ôf_des¸
.
bI¡îÁ˚SubCœss
 == 0x01)

244 
s
 = 
	`CålSëUsbC⁄fig
(
cfg
);

245 if(
s
 =
ERR_SUCCESS
)

248 
ThisUsbDev
.
Devi˚Sètus
 = 
ROOT_DEV_SUCCESS
;

249 
ThisUsbDev
.
Devi˚Ty≥
 = 
USB_DEV_CLASS_PRINTER
;

250 
	`PRINT
("USB-Print Ready\n");

251 
	`SëUsbS≥ed
(1);

252  (
ERR_SUCCESS
);

255 if((
dv_˛s
 =0x00Ë&& (
if_˛s
 =
USB_DEV_CLASS_HID
Ë&& ((
PUSB_CFG_DESCR_LONG
)
Com_Buf„r
)->
ôf_des¸
.
bI¡îÁ˚SubCœss
 <= 0x01)

258 
s
 = 
	`A«lyzeHidI¡Endp
(
Com_Buf„r
, 0);

259 
	`PRINT
("A«lyzeHidI¡End∞%02x\n", (
uöt16_t
)
s
);

261 
if_˛s
 = ((
PUSB_CFG_DESCR_LONG
)
Com_Buf„r
)->
ôf_des¸
.
bI¡îÁ˚PrŸocﬁ
;

262 
s
 = 
	`CålSëUsbC⁄fig
(
cfg
);

263 if(
s
 =
ERR_SUCCESS
)

267 
ThisUsbDev
.
Devi˚Sètus
 = 
ROOT_DEV_SUCCESS
;

268 if(
if_˛s
 == 1)

270 
ThisUsbDev
.
Devi˚Ty≥
 = 
DEV_TYPE_KEYBOARD
;

272 
	`PRINT
("USB-Keyboard Ready\n");

273 
	`SëUsbS≥ed
(1);

274  (
ERR_SUCCESS
);

276 if(
if_˛s
 == 2)

278 
ThisUsbDev
.
Devi˚Ty≥
 = 
DEV_TYPE_MOUSE
;

280 
	`PRINT
("USB-Mouse Ready\n");

281 
	`SëUsbS≥ed
(1);

282  (
ERR_SUCCESS
);

284 
s
 = 
ERR_USB_UNSUPPORT
;

287 if(
dv_˛s
 =
USB_DEV_CLASS_HUB
)

289 
s
 = 
	`CålGëHubDes¸
();

290 if(
s
 =
ERR_SUCCESS
)

292 
	`PRINT
("Max P‹t:%02X ", (((
PXUSB_HUB_DESCR
)
Com_Buf„r
)->
bNbrP‹ts
));

293 
ThisUsbDev
.
GpHUBP‹tNum
 = ((
PXUSB_HUB_DESCR
)
Com_Buf„r
)->
bNbrP‹ts
;

294 if(
ThisUsbDev
.
GpHUBP‹tNum
 > 
HUB_MAX_PORTS
)

296 
ThisUsbDev
.
GpHUBP‹tNum
 = 
HUB_MAX_PORTS
;

298 
s
 = 
	`CålSëUsbC⁄fig
(
cfg
);

299 if(
s
 =
ERR_SUCCESS
)

301 
ThisUsbDev
.
Devi˚Sètus
 = 
ROOT_DEV_SUCCESS
;

302 
ThisUsbDev
.
Devi˚Ty≥
 = 
USB_DEV_CLASS_HUB
;

305 
i
 = 1; i <
ThisUsbDev
.
GpHUBP‹tNum
; i++)

307 
DevOnHubP‹t
[
i
 - 1].
Devi˚Sètus
 = 
ROOT_DEV_DISCONNECT
;

308 
s
 = 
	`HubSëP‹tFótuª
(
i
, 
HUB_PORT_POWER
);

309 if(
s
 !
ERR_SUCCESS
)

311 
	`PRINT
("Ext-HUB P‹t_%1d#Öowî o¿îr‹\n", (
uöt16_t
)
i
);

314 
	`PRINT
("USB-HUB Ready\n");

315 
	`SëUsbS≥ed
(1);

316  (
ERR_SUCCESS
);

322 
s
 = 
	`CålSëUsbC⁄fig
(
cfg
);

323 if(
s
 =
ERR_SUCCESS
)

326 
ThisUsbDev
.
Devi˚Sètus
 = 
ROOT_DEV_SUCCESS
;

327 
ThisUsbDev
.
Devi˚Ty≥
 = 
DEV_TYPE_UNKNOW
;

328 
	`SëUsbS≥ed
(1);

329  (
ERR_SUCCESS
);

337 
	`PRINT
("InôRoŸDev Eº = %02X\n", (
uöt16_t
)
s
);

338 #ifde‡
FOR_ROOT_UDISK_ONLY


339 
CHRV3DiskSètus
 = 
DISK_CONNECT
;

341 
ThisUsbDev
.
Devi˚Sètus
 = 
ROOT_DEV_FAILED
;

343 
	`SëUsbS≥ed
(1);

344  (
s
);

345 
	}
}

356 
uöt8_t
 
	$InôDevOnHub
(
uöt8_t
 
HubP‹tIndex
)

358 
uöt8_t
 
i
, 
s
, 
cfg
, 
dv_˛s
, 
if_˛s
;

359 
uöt8_t
 
ifc
;

360 
	`PRINT
("Inô dev @ExtHub-p‹t_%1d ", (
uöt16_t
)
HubP‹tIndex
);

361 if(
HubP‹tIndex
 == 0)

363  (
ERR_USB_UNKNOWN
);

365 
	`Sñe˘HubP‹t
(
HubP‹tIndex
);

366 
	`PRINT
("GetDevDescr: ");

367 
s
 = 
	`CålGëDevi˚Des¸
();

368 if(
s
 !
ERR_SUCCESS
)

370  (
s
);

372 
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
Devi˚VID
 = ((
uöt16_t
)((
PUSB_DEV_DESCR
)
Com_Buf„r
)->
idVíd‹
);

373 
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
Devi˚PID
 = ((
uöt16_t
)((
PUSB_DEV_DESCR
)
Com_Buf„r
)->
idProdu˘
);

375 
dv_˛s
 = ((
PUSB_DEV_DESCR
)
Com_Buf„r
)->
bDevi˚Cœss
;

376 
cfg
 = (1 << 4Ë+ 
HubP‹tIndex
;

377 
s
 = 
	`CålSëUsbAddªss
(
cfg
);

378 if(
s
 !
ERR_SUCCESS
)

380  (
s
);

382 
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
Devi˚Addªss
 = 
cfg
;

383 
	`PRINT
("GetCfgDescr: ");

384 
s
 = 
	`CålGëC⁄figDes¸
();

385 if(
s
 !
ERR_SUCCESS
)

387  (
s
);

389 
cfg
 = ((
PUSB_CFG_DESCR
)
Com_Buf„r
)->
bC⁄figuøti⁄VÆue
;

390 
i
 = 0; i < ((
PUSB_CFG_DESCR
)
Com_Buf„r
)->
wTŸÆLígth
; i++)

392 
	`PRINT
("x%02X ", (
uöt16_t
)(
Com_Buf„r
[
i
]));

394 
	`PRINT
("\n");

396 
if_˛s
 = ((
PXUSB_CFG_DESCR_LONG
)
Com_Buf„r
)->
ôf_des¸
.
bI¡îÁ˚Cœss
;

397 if(
dv_˛s
 =0x00 && 
if_˛s
 =
USB_DEV_CLASS_STORAGE
)

399 
	`A«lyzeBulkEndp
(
Com_Buf„r
, 
HubP‹tIndex
);

400 
i
 = 0; i != 4; i++)

402 
	`PRINT
("%02x ", (
uöt16_t
)
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
GpV¨
[
i
]);

404 
	`PRINT
("\n");

405 
s
 = 
	`CålSëUsbC⁄fig
(
cfg
);

406 if(
s
 =
ERR_SUCCESS
)

408 
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
Devi˚Sètus
 = 
ROOT_DEV_SUCCESS
;

409 
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
Devi˚Ty≥
 = 
USB_DEV_CLASS_STORAGE
;

410 
	`PRINT
("USB-Disk Ready\n");

411 
	`SëUsbS≥ed
(1);

412  (
ERR_SUCCESS
);

415 if((
dv_˛s
 =0x00Ë&& (
if_˛s
 =
USB_DEV_CLASS_HID
Ë&& (((
PXUSB_CFG_DESCR_LONG
)
Com_Buf„r
)->
ôf_des¸
.
bI¡îÁ˚SubCœss
 <= 0x01))

417 
ifc
 = ((
PXUSB_CFG_DESCR_LONG
)
Com_Buf„r
)->
cfg_des¸
.
bNumI¡îÁ˚s
;

418 
s
 = 
	`A«lyzeHidI¡Endp
(
Com_Buf„r
, 
HubP‹tIndex
);

419 
	`PRINT
("A«lyzeHidI¡End∞%02x\n", (
uöt16_t
)
s
);

420 
if_˛s
 = ((
PXUSB_CFG_DESCR_LONG
)
Com_Buf„r
)->
ôf_des¸
.
bI¡îÁ˚PrŸocﬁ
;

421 
s
 = 
	`CålSëUsbC⁄fig
(
cfg
);

422 if(
s
 =
ERR_SUCCESS
)

424 
dv_˛s
 = 0; dv_˛†< 
ifc
; dv_cls++)

426 
s
 = 
	`CålGëHIDDevi˚Rï‹t
(
dv_˛s
);

427 if(
s
 =
ERR_SUCCESS
)

429 
i
 = 0; i < 64; i++)

431 
	`PRINT
("x%02X ", (
uöt16_t
)(
Com_Buf„r
[
i
]));

433 
	`PRINT
("\n");

437 
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
Devi˚Sètus
 = 
ROOT_DEV_SUCCESS
;

438 if(
if_˛s
 == 1)

440 
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
Devi˚Ty≥
 = 
DEV_TYPE_KEYBOARD
;

442 if(
ifc
 > 1)

444 
	`PRINT
("USB_DEV_CLASS_HID Ready\n");

445 
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
Devi˚Ty≥
 = 
USB_DEV_CLASS_HID
;

447 
	`PRINT
("USB-Keyboard Ready\n");

448 
	`SëUsbS≥ed
(1);

450  (
ERR_SUCCESS
);

452 if(
if_˛s
 == 2)

454 
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
Devi˚Ty≥
 = 
DEV_TYPE_MOUSE
;

456 if(
ifc
 > 1)

458 
	`PRINT
("USB_DEV_CLASS_HID Ready\n");

459 
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
Devi˚Ty≥
 = 
USB_DEV_CLASS_HID
;

461 
	`PRINT
("USB-Mouse Ready\n");

462 
	`SëUsbS≥ed
(1);

464  (
ERR_SUCCESS
);

466 
s
 = 
ERR_USB_UNSUPPORT
;

469 if(
dv_˛s
 =
USB_DEV_CLASS_HUB
)

471 
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
Devi˚Ty≥
 = 
USB_DEV_CLASS_HUB
;

472 
	`PRINT
("ThisÖrogram don't support Level 2 HUB\n");

473 
s
 = 
	`HubCÀ¨P‹tFótuª
(
i
, 
HUB_PORT_ENABLE
);

474 if(
s
 !
ERR_SUCCESS
)

476  (
s
);

478 
s
 = 
ERR_USB_UNSUPPORT
;

482 
	`A«lyzeBulkEndp
(
Com_Buf„r
, 
HubP‹tIndex
);

483 
i
 = 0; i != 4; i++)

485 
	`PRINT
("%02x ", (
uöt16_t
)
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
GpV¨
[
i
]);

487 
	`PRINT
("\n");

488 
s
 = 
	`CålSëUsbC⁄fig
(
cfg
);

489 if(
s
 =
ERR_SUCCESS
)

492 
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
Devi˚Sètus
 = 
ROOT_DEV_SUCCESS
;

493 
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
Devi˚Ty≥
 = 
dv_˛s
 ? dv_˛†: 
if_˛s
;

494 
	`SëUsbS≥ed
(1);

495  (
ERR_SUCCESS
);

498 
	`PRINT
("InôDevOnHub Eº = %02X\n", (
uöt16_t
)
s
);

499 
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
Devi˚Sètus
 = 
ROOT_DEV_FAILED
;

500 
	`SëUsbS≥ed
(1);

501  (
s
);

502 
	}
}

513 
uöt8_t
 
	$EnumHubP‹t
()

515 
uöt8_t
 
i
, 
s
;

517 
i
 = 1; i <
ThisUsbDev
.
GpHUBP‹tNum
; i++)

519 
	`Sñe˘HubP‹t
(0);

520 
s
 = 
	`HubGëP‹tSètus
(
i
);

521 if(
s
 !
ERR_SUCCESS
)

523  (
s
);

525 if(((
Com_Buf„r
[0] & (1 << (
HUB_PORT_CONNECTION
 & 0x07))Ë&& (Com_Buf„r[2] & (1 << (
HUB_C_PORT_CONNECTION
 & 0x07)))) || (Com_Buffer[2] == 0x10))

527 
DevOnHubP‹t
[
i
 - 1].
Devi˚Sètus
 = 
ROOT_DEV_CONNECTED
;

528 
DevOnHubP‹t
[
i
 - 1].
Devi˚Addªss
 = 0x00;

529 
s
 = 
	`HubGëP‹tSètus
(
i
);

530 if(
s
 !
ERR_SUCCESS
)

532  (
s
);

534 
DevOnHubP‹t
[
i
 - 1].
Devi˚S≥ed
 = 
Com_Buf„r
[1] & (1 << (
HUB_PORT_LOW_SPEED
 & 0x07)) ? 0 : 1;

535 if(
DevOnHubP‹t
[
i
 - 1].
Devi˚S≥ed
)

537 
	`PRINT
("Found fuŒ s≥ed devi˚ o¿p‹à%1d\n", (
uöt16_t
)
i
);

541 
	`PRINT
("FoundÜow s≥ed devi˚ o¿p‹à%1d\n", (
uöt16_t
)
i
);

543 
	`mDñaymS
(200);

544 
s
 = 
	`HubSëP‹tFótuª
(
i
, 
HUB_PORT_RESET
);

545 if(
s
 !
ERR_SUCCESS
)

547  (
s
);

549 
	`PRINT
("ResetÖortándÅhen wait in\n");

552 
	`mDñaymS
(1);

553 
s
 = 
	`HubGëP‹tSètus
(
i
);

554 if(
s
 !
ERR_SUCCESS
)

556  (
s
);

558 } 
Com_Buf„r
[0] & (1 << (
HUB_PORT_RESET
 & 0x07)));

559 
	`mDñaymS
(100);

560 
s
 = 
	`HubCÀ¨P‹tFótuª
(
i
, 
HUB_C_PORT_RESET
);

562 
s
 = 
	`HubCÀ¨P‹tFótuª
(
i
, 
HUB_C_PORT_CONNECTION
);

563 if(
s
 !
ERR_SUCCESS
)

565  (
s
);

567 
s
 = 
	`HubGëP‹tSètus
(
i
);

568 if(
s
 !
ERR_SUCCESS
)

570  (
s
);

572 if((
Com_Buf„r
[0] & (1 << (
HUB_PORT_CONNECTION
 & 0x07))) == 0)

574 
DevOnHubP‹t
[
i
 - 1].
Devi˚Sètus
 = 
ROOT_DEV_DISCONNECT
;

576 
s
 = 
	`InôDevOnHub
(
i
);

577 if(
s
 !
ERR_SUCCESS
)

579  (
s
);

581 
	`SëUsbS≥ed
(1);

583 if(
Com_Buf„r
[2] & (1 << (
HUB_C_PORT_ENABLE
 & 0x07)))

585 
	`HubCÀ¨P‹tFótuª
(
i
, 
HUB_C_PORT_ENABLE
);

586 
	`PRINT
("Device onÖortÉrror\n");

587 
s
 = 
	`HubSëP‹tFótuª
(
i
, 
HUB_PORT_RESET
);

588 if(
s
 !
ERR_SUCCESS
)

589  (
s
);

592 
	`mDñaymS
(1);

593 
s
 = 
	`HubGëP‹tSètus
(
i
);

594 if(
s
 !
ERR_SUCCESS
)

595  (
s
);

596 } 
Com_Buf„r
[0] & (1 << (
HUB_PORT_RESET
 & 0x07)));

598 if((
Com_Buf„r
[0] & (1 << (
HUB_PORT_CONNECTION
 & 0x07))) == 0)

600 if(
DevOnHubP‹t
[
i
 - 1].
Devi˚Sètus
 >
ROOT_DEV_CONNECTED
)

602 
	`PRINT
("Devi˚ o¿p‹à%1dÑemoved\n", (
uöt16_t
)
i
);

604 
DevOnHubP‹t
[
i
 - 1].
Devi˚Sètus
 = 
ROOT_DEV_DISCONNECT
;

605 if(
Com_Buf„r
[2] & (1 << (
HUB_C_PORT_CONNECTION
 & 0x07)))

607 
	`HubCÀ¨P‹tFótuª
(
i
, 
HUB_C_PORT_CONNECTION
);

611  (
ERR_SUCCESS
);

612 
	}
}

621 
uöt8_t
 
	$EnumAŒHubP‹t
()

623 
uöt8_t
 
s
;

625 if((
ThisUsbDev
.
Devi˚Sètus
 >
ROOT_DEV_SUCCESS
Ë&& (ThisUsbDev.
Devi˚Ty≥
 =
USB_DEV_CLASS_HUB
))

627 
	`Sñe˘HubP‹t
(0);

628 
s
 = 
	`EnumHubP‹t
();

629 if(
s
 !
ERR_SUCCESS
)

631 
	`PRINT
("EnumAŒHubP‹àî∏%02X\n", (
uöt16_t
)
s
);

633 
	`SëUsbS≥ed
(1);

635  (
ERR_SUCCESS
);

636 
	}
}

648 
uöt16_t
 
	$SórchTy≥Devi˚
(
uöt8_t
 
ty≥
)

650 
uöt8_t
 
RoŸHubIndex
;

651 
uöt8_t
 
HubP‹tIndex
;

653 
RoŸHubIndex
 = 0;

654 if((
ThisUsbDev
.
Devi˚Ty≥
 =
USB_DEV_CLASS_HUB
Ë&& (ThisUsbDev.
Devi˚Sètus
 >
ROOT_DEV_SUCCESS
))

656 
HubP‹tIndex
 = 1; HubP‹tIndex <
ThisUsbDev
.
GpHUBP‹tNum
; HubPortIndex++)

658 if(
DevOnHubP‹t
[
HubP‹tIndex
 - 1].
Devi˚Ty≥
 =
ty≥
 && DevOnHubP‹t[HubP‹tIndex - 1].
Devi˚Sètus
 >
ROOT_DEV_SUCCESS
)

660  (((
uöt16_t
)
RoŸHubIndex
 << 8Ë| 
HubP‹tIndex
);

664 if((
ThisUsbDev
.
Devi˚Ty≥
 =
ty≥
Ë&& (ThisUsbDev.
Devi˚Sètus
 >
ROOT_DEV_SUCCESS
))

666  ((
uöt16_t
)
RoŸHubIndex
 << 8);

670 
	}
}

681 
uöt8_t
 
	$SET‹OFFNumLock
(
uöt8_t
 *
buf
)

683 
uöt8_t
 
tmp
[] = {0x21, 0x09, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00};

684 
uöt8_t
 
Àn
, 
s
;

685 if((
buf
[2] == 0x53) & (buf[0] | buf[1] | buf[3] | buf[4] | buf[5] | buf[6] | buf[7] == 0))

687 
s
 = 0; s !(
tmp
); s++)

689 ((
uöt8_t
 *)
pSëupReq
)[
s
] = 
tmp
[s];

691 
s
 = 
	`Ho°CålTøns„r
(
Com_Buf„r
, &
Àn
);

692 if(
s
 !
ERR_SUCCESS
)

694  (
s
);

697  (
ERR_SUCCESS
);

698 
	}
}

709 
uöt8_t
 
	$CålGëHIDDevi˚Rï‹t
(
uöt8_t
 
öfc
)

711 
uöt8_t
 
s
;

712 
uöt8_t
 
Àn
;

714 
	`C›ySëupReqPkg
((
öt8_t
 *)
SëupSëHIDIdÀ
);

715 
pSëupReq
->
wIndex
 = 
öfc
;

716 
s
 = 
	`Ho°CålTøns„r
(
Com_Buf„r
, &
Àn
);

717 if(
s
 !
ERR_SUCCESS
)

719  (
s
);

722 
	`C›ySëupReqPkg
((
öt8_t
 *)
SëupGëHIDDevRï‹t
);

723 
pSëupReq
->
wIndex
 = 
öfc
;

724 
s
 = 
	`Ho°CålTøns„r
(
Com_Buf„r
, &
Àn
);

725 if(
s
 !
ERR_SUCCESS
)

727  (
s
);

730  (
ERR_SUCCESS
);

731 
	}
}

742 
uöt8_t
 
	$CålGëHubDes¸
()

744 
uöt8_t
 
s
;

745 
uöt8_t
 
Àn
;

747 
	`C›ySëupReqPkg
((
öt8_t
 *)
SëupGëHubDes¸
);

748 
s
 = 
	`Ho°CålTøns„r
(
Com_Buf„r
, &
Àn
);

749 if(
s
 !
ERR_SUCCESS
)

751  (
s
);

753 if(
Àn
 < ((
PUSB_SETUP_REQ
)
SëupGëHubDes¸
)->
wLígth
)

755  (
ERR_USB_BUF_OVER
);

758  (
ERR_SUCCESS
);

759 
	}
}

770 
uöt8_t
 
	$HubGëP‹tSètus
(
uöt8_t
 
HubP‹tIndex
)

772 
uöt8_t
 
s
;

773 
uöt8_t
 
Àn
;

775 
pSëupReq
->
bReque°Ty≥
 = 
HUB_GET_PORT_STATUS
;

776 
pSëupReq
->
bReque°
 = 
HUB_GET_STATUS
;

777 
pSëupReq
->
wVÆue
 = 0x0000;

778 
pSëupReq
->
wIndex
 = 0x0000 | 
HubP‹tIndex
;

779 
pSëupReq
->
wLígth
 = 0x0004;

780 
s
 = 
	`Ho°CålTøns„r
(
Com_Buf„r
, &
Àn
);

781 if(
s
 !
ERR_SUCCESS
)

783  (
s
);

785 if(
Àn
 < 4)

787  (
ERR_USB_BUF_OVER
);

789  (
ERR_SUCCESS
);

790 
	}
}

802 
uöt8_t
 
	$HubSëP‹tFótuª
(
uöt8_t
 
HubP‹tIndex
, uöt8_à
FótuªSñt
)

804 
pSëupReq
->
bReque°Ty≥
 = 
HUB_SET_PORT_FEATURE
;

805 
pSëupReq
->
bReque°
 = 
HUB_SET_FEATURE
;

806 
pSëupReq
->
wVÆue
 = 0x0000 | 
FótuªSñt
;

807 
pSëupReq
->
wIndex
 = 0x0000 | 
HubP‹tIndex
;

808 
pSëupReq
->
wLígth
 = 0x0000;

809  (
	`Ho°CålTøns„r
(
NULL
, NULL));

810 
	}
}

822 
uöt8_t
 
	$HubCÀ¨P‹tFótuª
(
uöt8_t
 
HubP‹tIndex
, uöt8_à
FótuªSñt
)

824 
pSëupReq
->
bReque°Ty≥
 = 
HUB_CLEAR_PORT_FEATURE
;

825 
pSëupReq
->
bReque°
 = 
HUB_CLEAR_FEATURE
;

826 
pSëupReq
->
wVÆue
 = 0x0000 | 
FótuªSñt
;

827 
pSëupReq
->
wIndex
 = 0x0000 | 
HubP‹tIndex
;

828 
pSëupReq
->
wLígth
 = 0x0000;

829  (
	`Ho°CålTøns„r
(
NULL
, NULL));

830 
	}
}

	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH573SFR.h

9 #i‚de‡
__BASE_TYPE__


10 
	#__BASE_TYPE__


	)

12 #ifde‡
__˝lu•lus


19 #i‚de‡
TRUE


20 
	#TRUE
 1

	)

21 
	#FALSE
 0

	)

23 #i‚de‡
NULL


24 
	#NULL
 0

	)

27 #i‚de‡
VOID


28 
	#VOID
 

	)

30 #i‚de‡
CONST


31 
	#CONST
 c⁄°

	)

33 #i‚de‡
BOOL


34 
	tBOOL
;

36 #i‚de‡
BOOLEAN


37 
	tBOOLEAN
;

39 #i‚de‡
CHAR


40 
	tCHAR
;

42 #i‚de‡
INT8


43 
	tINT8
;

45 #i‚de‡
INT16


46 
	tINT16
;

48 #i‚de‡
INT32


49 
	tINT32
;

51 #i‚de‡
UINT8


52 
	tUINT8
;

54 #i‚de‡
UINT16


55 
	tUINT16
;

57 #i‚de‡
UINT32


58 
	tUINT32
;

60 #i‚de‡
UINT64


61 
	tUINT64
;

63 #i‚de‡
UINT8V


64 vﬁ©ûê
	tUINT8V
;

66 #i‚de‡
UINT16V


67 vﬁ©ûê
	tUINT16V
;

69 #i‚de‡
UINT32V


70 vﬁ©ûê
	tUINT32V
;

72 #i‚de‡
UINT64V


73 vﬁ©ûê
	tUINT64V
;

76 #i‚de‡
PVOID


77 *
	tPVOID
;

79 #i‚de‡
PCHAR


80 *
	tPCHAR
;

82 #i‚de‡
PCHAR


83 c⁄° *
	tPCCHAR
;

85 #i‚de‡
PINT8


86 *
	tPINT8
;

88 #i‚de‡
PINT16


89 *
	tPINT16
;

91 #i‚de‡
PINT32


92 *
	tPINT32
;

94 #i‚de‡
PUINT8


95 *
	tPUINT8
;

97 #i‚de‡
PUINT16


98 *
	tPUINT16
;

100 #i‚de‡
PUINT32


101 *
	tPUINT32
;

103 #i‚de‡
PUINT8V


104 vﬁ©ûê*
	tPUINT8V
;

106 #i‚de‡
PUINT16V


107 vﬁ©ûê*
	tPUINT16V
;

109 #i‚de‡
PUINT32V


110 vﬁ©ûê*
	tPUINT32V
;

112 #i‚de‡
PUINT64V


113 vﬁ©ûê*
	tPUINT64V
;

119 #i‚de‡
mö


120 
	#mö
(
a
,
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

122 #i‚de‡
max


123 
	#max
(
a
,
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

126 #ifde‡ 
DEBUG


127 
	#PRINT
(
X
...Ë
	`¥ötf
(X)

	)

129 
	#PRINT
(
X
...)

	)

133 
	#FIELD_OFFSET
(
Ty≥
, 
Fõld
Ë((
UINT16
)&(((Ty≥ *)0)->Fõld))

	)

136 
	#FIELD_SIZE
(
Ty≥
, 
Fõld
Ë((((Ty≥ *)0)->Fõld))

	)

139 
	#FIELD_TYPE
(
Ty≥
, 
Fõld
Ë(((Ty≥ *)0)->Fõld)

	)

142 
	#NUMBER_OF
(
Aºay
Ë((Aºay)/((Aºay)[0]))

	)

143 
	#NUMBER_OF_FIELD
(
Ty≥
, 
Fõld
Ë(
	`NUMBER_OF
(
	`FIELD_TYPE
(Ty≥, Fõld)))

	)

145 #ifde‡
__˝lu•lus


152 #i‚de‡
__CH573SFR_H__


153 
	#__CH573SFR_H__


	)

155 #ifde‡
__˝lu•lus


204 
	#R32_SAFE_ACCESS
 (*((
PUINT32V
)0x40001040))

205 
	#R8_SAFE_ACCESS_SIG
 (*((
PUINT8V
)0x40001040))

206 
	#RB_SAFE_ACC_MODE
 0x03

207 
	#RB_SAFE_ACC_ACT
 0x08

208 
	#RB_SAFE_ACC_TIMER
 0x70

209 
	#SAFE_ACCESS_SIG1
 0x57

210 
	#SAFE_ACCESS_SIG2
 0xA8

211 
	#SAFE_ACCESS_SIG0
 0x00

212 
	#R8_CHIP_ID
 (*((
PUINT8V
)0x40001041))

213 
	#R8_SAFE_ACCESS_ID
 (*((
PUINT8V
)0x40001042))

214 
	#R8_WDOG_COUNT
 (*((
PUINT8V
)0x40001043))

215 

	)

217 
	#R32_GLOBAL_CONFIG
 (*((
PUINT32V
)0x40001044))

218 
	#R8_RESET_STATUS
 (*((
PUINT8V
)0x40001044))

219 
	#RB_RESET_FLAG
 0x07

220 
	#RST_FLAG_SW
 0x00

	)

221 
	#RST_FLAG_RPOR
 0x01

	)

222 
	#RST_FLAG_WTR
 0x02

	)

223 
	#RST_FLAG_MR
 0x03

	)

225 
	#RST_FLAG_GPWSM
 0x05

	)

233 
	#R8_GLOB_ROM_CFG
 
R8_RESET_STATUS


234 
	#RB_ROM_CODE_OFS
 0x10

235 
	#RB_ROM_CTRL_EN
 0x20

236 
	#RB_ROM_DATA_WE
 0x40

237 
	#RB_ROM_CODE_WE
 0x80

238 
	#R8_GLOB_CFG_INFO
 (*((
PUINT8V
)0x40001045))

239 
	#RB_CFG_ROM_READ
 0x01

240 
	#RB_CFG_RESET_EN
 0x04

241 
	#RB_CFG_BOOT_EN
 0x08

242 
	#RB_CFG_DEBUG_EN
 0x10

243 
	#RB_BOOT_LOADER
 0x20

244 
	#R8_RST_WDOG_CTRL
 (*((
PUINT8V
)0x40001046))

245 
	#RB_SOFTWARE_RESET
 0x01

246 
	#RB_WDOG_RST_EN
 0x02

247 
	#RB_WDOG_INT_EN
 0x04

248 
	#RB_WDOG_INT_FLAG
 0x10

249 
	#R8_GLOB_RESET_KEEP
 (*((
PUINT8V
)0x40001047))

250 

	)

252 
	#R32_CLOCK_CONFIG
 (*((
PUINT32V
)0x40001008))

253 
	#R16_CLK_SYS_CFG
 (*((
PUINT16V
)0x40001008))

254 
	#RB_CLK_PLL_DIV
 0x1F

255 
	#RB_CLK_SYS_MOD
 0xC0

256 
	#R8_HFCK_PWR_CTRL
 (*((
PUINT8V
)0x4000100A))

257 
	#RB_CLK_XT32M_PON
 0x04

258 
	#RB_CLK_PLL_PON
 0x10

264 

	)

266 
	#R32_SLEEP_CONTROL
 (*((
PUINT32V
)0x4000100C))

267 
	#R8_SLP_CLK_OFF0
 (*((
PUINT8V
)0x4000100C))

268 
	#RB_SLP_CLK_TMR0
 0x01

269 
	#RB_SLP_CLK_TMR1
 0x02

270 
	#RB_SLP_CLK_TMR2
 0x04

271 
	#RB_SLP_CLK_TMR3
 0x08

272 
	#RB_SLP_CLK_UART0
 0x10

273 
	#RB_SLP_CLK_UART1
 0x20

274 
	#RB_SLP_CLK_UART2
 0x40

275 
	#RB_SLP_CLK_UART3
 0x80

276 
	#R8_SLP_CLK_OFF1
 (*((
PUINT8V
)0x4000100D))

277 
	#RB_SLP_CLK_SPI0
 0x01

278 
	#RB_SLP_CLK_PWMX
 0x04

279 
	#RB_SLP_CLK_USB
 0x10

280 
	#RB_SLP_CLK_BLE
 0x80

281 
	#R8_SLP_WAKE_CTRL
 (*((
PUINT8V
)0x4000100E))

282 
	#RB_SLP_USB_WAKE
 0x01

284 
	#RB_SLP_RTC_WAKE
 0x08

285 
	#RB_SLP_GPIO_WAKE
 0x10

286 
	#RB_SLP_BAT_WAKE
 0x20

287 
	#RB_WAKE_EV_MODE
 0x40

288 
	#RB_WAKE_DELAY
 0x80

289 
	#R8_SLP_POWER_CTRL
 (*((
PUINT8V
)0x4000100F))

292 
	#RB_SLP_CLK_RAMX
 0x10

293 
	#RB_SLP_CLK_RAM2K
 0x20

294 
	#RB_RAM_RET_LV
 0x40

295 

	)

297 
	#R32_PIN_CONFIG
 (*((
PUINT32V
)0x40001018))

298 
	#R16_PIN_ALTERNATE
 (*((
PUINT16V
)0x40001018))

299 
	#RB_PIN_TMR0
 0x01

300 
	#RB_PIN_TMR1
 0x02

301 
	#RB_PIN_TMR2
 0x04

302 
	#RB_PIN_UART0
 0x10

303 
	#RB_PIN_UART1
 0x20

304 
	#RB_PIN_SPI0
 0x100

305 
	#R16_PIN_ANALOG_IE
 (*((
PUINT16V
)0x4000101A))

306 
	#RB_PIN_USB_DP_PU
 0x40

307 
	#RB_PIN_USB_IE
 0x80

308 
	#RB_PIN_ADC8_9_IE
 0x0100

309 
	#RB_PIN_ADC0_IE
 0x0200

310 
	#RB_PIN_ADC1_IE
 0x0400

311 
	#RB_PIN_ADC12_IE
 0x0800

312 
	#RB_PIN_ADC13_IE
 0x1000

313 
	#RB_PIN_XT32K_IE
 0x2000

314 
	#RB_PIN_ADC2_3_IE
 0x4000

315 
	#RB_PIN_ADC4_5_IE
 0x8000

316 

	)

318 
	#R32_POWER_MANAG
 (*((
PUINT32V
)0x40001020))

319 
	#R16_POWER_PLAN
 (*((
PUINT16V
)0x40001020))

320 
	#RB_PWR_XROM
 0x01

321 
	#RB_PWR_RAM2K
 0x02

322 
	#RB_PWR_CORE
 0x04

323 
	#RB_PWR_EXTEND
 0x08

324 
	#RB_PWR_RAM16K
 0x10

325 
	#RB_PWR_SYS_EN
 0x80

327 
	#RB_PWR_DCDC_EN
 0x0200

328 
	#RB_PWR_DCDC_PRE
 0x0400

329 
	#RB_PWR_PLAN_EN
 0x8000

330 
	#RB_PWR_MUST_0010
 0x1000

331 
	#R16_AUX_POWER_ADJ
 (*((
PUINT8V
)0x40001022))

332 
	#RB_ULPLDO_ADJ
 0x0007

333 

	)

335 
	#R32_BATTERY_CTRL
 (*((
PUINT32V
)0x40001024))

336 
	#R8_BAT_DET_CTRL
 (*((
PUINT8V
)0x40001024))

337 
	#RB_BAT_DET_EN
 0x01

338 
	#RB_BAT_LOW_VTHX
 0x01

339 
	#RB_BAT_MON_EN
 0x02

340 
	#RB_BAT_LOWER_IE
 0x04

341 
	#RB_BAT_LOW_IE
 0x08

343 
	#R8_BAT_DET_CFG
 (*((
PUINT8V
)0x40001025))

344 
	#RB_BAT_LOW_VTH
 0x03

345 
	#R8_BAT_STATUS
 (*((
PUINT8V
)0x40001026))

346 
	#RB_BAT_STAT_LOWER
 0x01

347 
	#RB_BAT_STAT_LOW
 0x02

348 

	)

350 
	#R32_OSC32K_CTRL
 (*((
PUINT32V
)0x4000102C))

351 
	#R16_INT32K_TUNE
 (*((
PUINT16V
)0x4000102C))

352 
	#RB_INT32K_TUNE
 0x0FFF

353 
	#R8_XT32K_TUNE
 (*((
PUINT8V
)0x4000102E))

354 
	#RB_XT32K_I_TUNE
 0x03

355 
	#RB_XT32K_C_LOAD
 0xF0

356 
	#R8_CK32K_CONFIG
 (*((
PUINT8V
)0x4000102F))

357 
	#RB_CLK_XT32K_PON
 0x01

358 
	#RB_CLK_INT32K_PON
 0x02

359 
	#RB_CLK_OSC32K_XT
 0x04

360 
	#RB_32K_CLK_PIN
 0x80

361 

	)

363 
	#R32_RTC_CTRL
 (*((
PUINT32V
)0x40001030))

364 
	#R8_RTC_FLAG_CTRL
 (*((
PUINT8V
)0x40001030))

365 
	#RB_RTC_TMR_CLR
 0x10

366 
	#RB_RTC_TRIG_CLR
 0x20

367 
	#RB_RTC_TMR_FLAG
 0x40

368 
	#RB_RTC_TRIG_FLAG
 0x80

369 
	#R8_RTC_MODE_CTRL
 (*((
PUINT8V
)0x40001031))

370 
	#RB_RTC_TMR_MODE
 0x07

371 
	#RB_RTC_IGNORE_B0
 0x08

372 
	#RB_RTC_TMR_EN
 0x10

373 
	#RB_RTC_TRIG_EN
 0x20

374 
	#RB_RTC_LOAD_LO
 0x40

375 
	#RB_RTC_LOAD_HI
 0x80

376 
	#R32_RTC_TRIG
 (*((
PUINT32V
)0x40001034))

377 
	#R32_RTC_CNT_32K
 (*((
PUINT32V
)0x40001038))

378 
	#R16_RTC_CNT_32K
 (*((
PUINT16V
)0x40001038))

379 
	#R16_RTC_CNT_2S
 (*((
PUINT16V
)0x4000103A))

380 
	#R32_RTC_CNT_DAY
 (*((
PUINT32V
)0x4000103C))

381 

	)

383 
	#R32_MISC_CTRL
 (*((
PUINT32V
)0x40001048))

384 
	#R8_PLL_CONFIG
 (*((
PUINT8V
)0x4000104B))

385 

	)

387 
	#R32_OSC32M_CTRL
 (*((
PUINT32V
)0x4000104C))

388 
	#R8_XT32M_TUNE
 (*((
PUINT8V
)0x4000104E))

389 
	#RB_XT32M_I_BIAS
 0x03

390 
	#RB_XT32M_C_LOAD
 0x70

391 

	)

393 
	#R32_OSC_CALIB
 (*((
PUINT32V
)0x40001050))

394 
	#R16_OSC_CAL_CNT
 (*((
PUINT16V
)0x40001050))

395 
	#RB_OSC_CAL_CNT
 0x3FFF

396 
	#R8_OSC_CAL_CTRL
 (*((
PUINT8V
)0x40001052))

397 
	#RB_OSC_CNT_EN
 0x01

398 
	#RB_OSC_CNT_HALT
 0x02

399 

	)

401 
	#R32_ADC_CTRL
 (*((
PUINT32V
)0x40001058))

402 
	#R8_ADC_CHANNEL
 (*((
PUINT8V
)0x40001058))

403 
	#RB_ADC_CH_INX
 0x0F

404 
	#R8_ADC_CFG
 (*((
PUINT8V
)0x40001059))

405 
	#RB_ADC_POWER_ON
 0x01

406 
	#RB_ADC_BUF_EN
 0x02

407 
	#RB_ADC_DIFF_EN
 0x04

408 
	#RB_ADC_OFS_TEST
 0x08

409 
	#RB_ADC_PGA_GAIN
 0x30

410 
	#RB_ADC_CLK_DIV
 0xC0

411 
	#R8_ADC_CONVERT
 (*((
PUINT8V
)0x4000105A))

412 
	#RB_ADC_START
 0x01

413 
	#RB_ADC_EOC_X
 0x80

414 
	#R8_TEM_SENSOR
 (*((
PUINT8V
)0x4000105B))

415 
	#RB_TEM_SEN_PWR_ON
 0x80

416 
	#R32_ADC_DATA
 (*((
PUINT32V
)0x4000105C))

417 
	#R16_ADC_DATA
 (*((
PUINT16V
)0x4000105C))

418 
	#RB_ADC_DATA
 0x0FFF

419 
	#R8_ADC_INT_FLAG
 (*((
PUINT8V
)0x4000105E))

420 
	#RB_ADC_IF_EOC
 0x80

421 
	#R32_TKEY_CTRL
 (*((
PUINT8V
)0x40001054))

422 
	#R8_TKEY_COUNT
 (*((
PUINT8V
)0x40001054))

423 
	#RB_TKEY_CHARG_CNT
 0x1F

424 
	#RB_TKEY_DISCH_CNT
 0xE0

425 
	#R8_TKEY_CONVERT
 (*((
PUINT8V
)0x40001056))

426 
	#RB_TKEY_START
 0x01

427 
	#R8_TKEY_CFG
 (*((
PUINT8V
)0x40001057))

428 
	#RB_TKEY_PWR_ON
 0x01

429 
	#RB_TKEY_CURRENT
 0x02

430 
	#RB_TKEY_PGA_ADJ
 0x08

431 
	#R32_ADC_DMA_CTRL
 (*((
PUINT32V
)0x40001060))

432 
	#R8_ADC_CTRL_DMA
 (*((
PUINT8V
)0x40001061))

433 
	#RB_ADC_DMA_ENABLE
 0x01

434 
	#RB_ADC_DMA_LOOP
 0x04

435 
	#RB_ADC_IE_DMA_END
 0x08

436 
	#RB_ADC_IE_EOC
 0x10

437 
	#RB_ADC_AUTO_EN
 0x80

438 
	#R8_ADC_DMA_IF
 (*((
PUINT8V
)0x40001062))

439 
	#RB_ADC_IF_DMA_END
 0x08

440 
	#RB_ADC_IF_END_ADC
 0x10

441 
	#R8_ADC_AUTO_CYCLE
 (*((
PUINT8V
)0x40001063))

442 
	#R32_ADC_DMA_NOW
 (*((
PUINT32V
)0x40001064))

443 
	#R16_ADC_DMA_NOW
 (*((
PUINT16V
)0x40001064))

444 
	#R32_ADC_DMA_BEG
 (*((
PUINT32V
)0x40001068))

445 
	#R16_ADC_DMA_BEG
 (*((
PUINT16V
)0x40001068))

446 
	#R32_ADC_DMA_END
 (*((
PUINT32V
)0x4000106C))

447 
	#R16_ADC_DMA_END
 (*((
PUINT16V
)0x4000106C))

448 

	)

450 
	#R32_FLASH_DATA
 (*((
PUINT32V
)0x40001800))

451 
	#R32_FLASH_CONTROL
 (*((
PUINT32V
)0x40001804))

452 
	#R8_FLASH_DATA
 (*((
PUINT8V
)0x40001804))

453 
	#R8_FLASH_CTRL
 (*((
PUINT8V
)0x40001806))

454 
	#R8_FLASH_CFG
 (*((
PUINT8V
)0x40001807))

455 

	)

457 
	#R32_GPIO_INT_EN
 (*((
PUINT32V
)0x40001090))

458 
	#R16_PA_INT_EN
 (*((
PUINT16V
)0x40001090))

459 
	#R16_PB_INT_EN
 (*((
PUINT16V
)0x40001092))

460 
	#R32_GPIO_INT_MODE
 (*((
PUINT32V
)0x40001094))

461 
	#R16_PA_INT_MODE
 (*((
PUINT16V
)0x40001094))

462 
	#R16_PB_INT_MODE
 (*((
PUINT16V
)0x40001096))

463 
	#R32_GPIO_INT_IF
 (*((
PUINT32V
)0x4000109C))

464 
	#R16_PA_INT_IF
 (*((
PUINT16V
)0x4000109C))

465 
	#R16_PB_INT_IF
 (*((
PUINT16V
)0x4000109E))

466 

	)

468 
	#R32_PA_DIR
 (*((
PUINT32V
)0x400010A0))

469 
	#R8_PA_DIR_0
 (*((
PUINT8V
)0x400010A0))

470 
	#R8_PA_DIR_1
 (*((
PUINT8V
)0x400010A1))

471 
	#R32_PA_PIN
 (*((
PUINT32V
)0x400010A4))

472 
	#R8_PA_PIN_0
 (*((
PUINT8V
)0x400010A4))

473 
	#R8_PA_PIN_1
 (*((
PUINT8V
)0x400010A5))

474 
	#R32_PA_OUT
 (*((
PUINT32V
)0x400010A8))

475 
	#R8_PA_OUT_0
 (*((
PUINT8V
)0x400010A8))

476 
	#R8_PA_OUT_1
 (*((
PUINT8V
)0x400010A9))

477 
	#R32_PA_CLR
 (*((
PUINT32V
)0x400010AC))

478 
	#R8_PA_CLR_0
 (*((
PUINT8V
)0x400010AC))

479 
	#R8_PA_CLR_1
 (*((
PUINT8V
)0x400010AD))

480 
	#R32_PA_PU
 (*((
PUINT32V
)0x400010B0))

481 
	#R8_PA_PU_0
 (*((
PUINT8V
)0x400010B0))

482 
	#R8_PA_PU_1
 (*((
PUINT8V
)0x400010B1))

483 
	#R32_PA_PD_DRV
 (*((
PUINT32V
)0x400010B4))

484 
	#R8_PA_PD_DRV_0
 (*((
PUINT8V
)0x400010B4))

485 
	#R8_PA_PD_DRV_1
 (*((
PUINT8V
)0x400010B5))

486 

	)

488 
	#R32_PB_DIR
 (*((
PUINT32V
)0x400010C0))

489 
	#R8_PB_DIR_0
 (*((
PUINT8V
)0x400010C0))

490 
	#R8_PB_DIR_1
 (*((
PUINT8V
)0x400010C1))

491 
	#R8_PB_DIR_2
 (*((
PUINT8V
)0x400010C2))

492 
	#R32_PB_PIN
 (*((
PUINT32V
)0x400010C4))

493 
	#R8_PB_PIN_0
 (*((
PUINT8V
)0x400010C4))

494 
	#R8_PB_PIN_1
 (*((
PUINT8V
)0x400010C5))

495 
	#R8_PB_PIN_2
 (*((
PUINT8V
)0x400010C6))

496 
	#R32_PB_OUT
 (*((
PUINT32V
)0x400010C8))

497 
	#R8_PB_OUT_0
 (*((
PUINT8V
)0x400010C8))

498 
	#R8_PB_OUT_1
 (*((
PUINT8V
)0x400010C9))

499 
	#R8_PB_OUT_2
 (*((
PUINT8V
)0x400010CA))

500 
	#R32_PB_CLR
 (*((
PUINT32V
)0x400010CC))

501 
	#R8_PB_CLR_0
 (*((
PUINT8V
)0x400010CC))

502 
	#R8_PB_CLR_1
 (*((
PUINT8V
)0x400010CD))

503 
	#R8_PB_CLR_2
 (*((
PUINT8V
)0x400010CE))

504 
	#R32_PB_PU
 (*((
PUINT32V
)0x400010D0))

505 
	#R8_PB_PU_0
 (*((
PUINT8V
)0x400010D0))

506 
	#R8_PB_PU_1
 (*((
PUINT8V
)0x400010D1))

507 
	#R8_PB_PU_2
 (*((
PUINT8V
)0x400010D2))

508 
	#R32_PB_PD_DRV
 (*((
PUINT32V
)0x400010D4))

509 
	#R8_PB_PD_DRV_0
 (*((
PUINT8V
)0x400010D4))

510 
	#R8_PB_PD_DRV_1
 (*((
PUINT8V
)0x400010D5))

511 
	#R8_PB_PD_DRV_2
 (*((
PUINT8V
)0x400010D6))

512 

	)

514 
	#BA_PA
 ((
PUINT8V
)0x400010A0)

515 
	#BA_PB
 ((
PUINT8V
)0x400010C0)

516 
	#GPIO_DIR
 0x00

	)

517 
	#GPIO_DIR_0
 0x00

	)

518 
	#GPIO_DIR_1
 0x01

	)

519 
	#GPIO_DIR_2
 0x02

	)

520 
	#GPIO_PIN
 0x04

	)

521 
	#GPIO_PIN_0
 0x04

	)

522 
	#GPIO_PIN_1
 0x05

	)

523 
	#GPIO_PIN_2
 0x06

	)

524 
	#GPIO_OUT
 0x08

	)

525 
	#GPIO_OUT_0
 0x08

	)

526 
	#GPIO_OUT_1
 0x09

	)

527 
	#GPIO_OUT_2
 0x0A

	)

528 
	#GPIO_CLR
 0x0C

	)

529 
	#GPIO_CLR_0
 0x0C

	)

530 
	#GPIO_CLR_1
 0x0D

	)

531 
	#GPIO_CLR_2
 0x0E

	)

532 
	#GPIO_PU
 0x10

	)

533 
	#GPIO_PU_0
 0x10

	)

534 
	#GPIO_PU_1
 0x11

	)

535 
	#GPIO_PU_2
 0x12

	)

536 
	#GPIO_PD_DRV
 0x14

	)

537 
	#GPIO_PD_DRV_0
 0x14

	)

538 
	#GPIO_PD_DRV_1
 0x15

	)

539 
	#GPIO_PD_DRV_2
 0x16

	)

542 
	#bAIN0
 (1<<4)

543 
	#bRXD3
 (1<<4)

544 
	#bAIN1
 (1<<5)

545 
	#bTXD3
 (1<<5)

546 
	#bAIN12
 (1<<8)

547 
	#bRXD1
 (1<<8)

548 
	#bAIN13
 (1<<9)

549 
	#bTMR0
 (1<<9)

550 
	#bCAP0
 
bTMR0


	)

551 
	#bPWM0
 
bTMR0


	)

552 
	#bTXD1
 (1<<9)

553 
	#bX32KI
 (1<<10)

554 
	#bTMR1
 (1<<10)

555 
	#bCAP1
 
bTMR1


	)

556 
	#bPWM1
 
bTMR1


	)

557 
	#bX32KO
 (1<<11)

558 
	#bTMR2
 (1<<11)

559 
	#bCAP2
 
bTMR2


	)

560 
	#bPWM2
 
bTMR2


	)

561 
	#bAIN2
 (1<<12)

562 
	#bPWM4
 (1<<12)

563 
	#bSCS
 (1<<12)

564 
	#bAIN3
 (1<<13)

565 
	#bSCK0
 (1<<13)

566 
	#bPWM5
 (1<<13)

567 
	#bAIN4
 (1<<14)

568 
	#bMOSI
 (1<<14)

569 
	#bTXD0_
 (1<<14)

570 
	#bAIN5
 (1<<15)

571 
	#bMISO
 (1<<15)

572 
	#bRXD0_
 (1<<15)

573 
	#bAIN8
 (1<<0)

574 
	#bPWM6
 (1<<0)

575 
	#bCTS
 (1<<0)

576 
	#bPWM7
 (1<<4)

577 
	#bRXD0
 (1<<4)

578 
	#bAIN9
 (1<<6)

579 
	#bRTS
 (1<<6)

580 
	#bPWM8
 (1<<6)

581 
	#bTXD0
 (1<<7)

582 
	#bPWM9
 (1<<7)

583 
	#bUDM
 (1<<10)

584 
	#bTMR1_
 (1<<10)

585 
	#bCAP1_
 
bTMR1_


	)

586 
	#bPWM1_
 
bTMR1_


	)

587 
	#bUDP
 (1<<11)

588 
	#bTMR2_
 (1<<11)

589 
	#bCAP2_
 
bTMR2_


	)

590 
	#bPWM2_
 
bTMR2_


	)

591 
	#bSCS_
 (1<<12)

592 
	#bRXD1_
 (1<<12)

593 
	#bSCK0_
 (1<<13)

594 
	#bTXD1_
 (1<<13)

595 
	#bTIO
 (1<<14)

596 
	#bDSR
 (1<<14)

597 
	#bMOSI_
 (1<<14)

598 
	#bPWM10
 (1<<14)

599 
	#bTCK
 (1<<15)

600 
	#bMISO_
 (1<<15)

601 
	#bDTR
 (1<<15)

602 
	#bRXD2
 (1<<22)

603 
	#bTMR3
 (1<<22)

604 
	#bCAP3
 
bTMR3


	)

605 
	#bPWM3
 
bTMR3


	)

606 
	#bRST
 (1<<23)

607 
	#bTMR0_
 (1<<23)

608 
	#bCAP0_
 
bTMR0_


	)

609 
	#bPWM0_
 
bTMR0_


	)

610 
	#bTXD2
 (1<<23)

611 
	#bPWM11
 (1<<23)

612 

	)

614 
	#R32_TMR0_CONTROL
 (*((
PUINT32V
)0x40002000))

615 
	#R8_TMR0_CTRL_MOD
 (*((
PUINT8V
)0x40002000))

616 
	#R8_TMR0_INTER_EN
 (*((
PUINT8V
)0x40002002))

617 
	#R32_TMR0_STATUS
 (*((
PUINT32V
)0x40002004))

618 
	#R8_TMR0_INT_FLAG
 (*((
PUINT8V
)0x40002006))

619 
	#R8_TMR0_FIFO_COUNT
 (*((
PUINT8V
)0x40002007))

620 
	#R32_TMR0_COUNT
 (*((
PUINT32V
)0x40002008))

621 
	#R16_TMR0_COUNT
 (*((
PUINT16V
)0x40002008))

622 
	#R8_TMR0_COUNT
 (*((
PUINT8V
)0x40002008))

623 
	#R32_TMR0_CNT_END
 (*((
PUINT32V
)0x4000200C))

624 
	#R32_TMR0_FIFO
 (*((
PUINT32V
)0x40002010))

625 
	#R16_TMR0_FIFO
 (*((
PUINT16V
)0x40002010))

626 
	#R8_TMR0_FIFO
 (*((
PUINT8V
)0x40002010))

627 

	)

629 
	#R32_TMR1_CONTROL
 (*((
PUINT32V
)0x40002400))

630 
	#R8_TMR1_CTRL_MOD
 (*((
PUINT8V
)0x40002400))

631 
	#R8_TMR1_CTRL_DMA
 (*((
PUINT8V
)0x40002401))

632 
	#R8_TMR1_INTER_EN
 (*((
PUINT8V
)0x40002402))

633 
	#R32_TMR1_STATUS
 (*((
PUINT32V
)0x40002404))

634 
	#R8_TMR1_INT_FLAG
 (*((
PUINT8V
)0x40002406))

635 
	#R8_TMR1_FIFO_COUNT
 (*((
PUINT8V
)0x40002407))

636 
	#R32_TMR1_COUNT
 (*((
PUINT32V
)0x40002408))

637 
	#R16_TMR1_COUNT
 (*((
PUINT16V
)0x40002408))

638 
	#R8_TMR1_COUNT
 (*((
PUINT8V
)0x40002408))

639 
	#R32_TMR1_CNT_END
 (*((
PUINT32V
)0x4000240C))

640 
	#R32_TMR1_FIFO
 (*((
PUINT32V
)0x40002410))

641 
	#R16_TMR1_FIFO
 (*((
PUINT16V
)0x40002410))

642 
	#R8_TMR1_FIFO
 (*((
PUINT8V
)0x40002410))

643 
	#R32_TMR1_DMA_NOW
 (*((
PUINT32V
)0x40002414))

644 
	#R16_TMR1_DMA_NOW
 (*((
PUINT16V
)0x40002414))

645 
	#R32_TMR1_DMA_BEG
 (*((
PUINT32V
)0x40002418))

646 
	#R16_TMR1_DMA_BEG
 (*((
PUINT16V
)0x40002418))

647 
	#R32_TMR1_DMA_END
 (*((
PUINT32V
)0x4000241C))

648 
	#R16_TMR1_DMA_END
 (*((
PUINT16V
)0x4000241C))

649 

	)

651 
	#R32_TMR2_CONTROL
 (*((
PUINT32V
)0x40002800))

652 
	#R8_TMR2_CTRL_MOD
 (*((
PUINT8V
)0x40002800))

653 
	#R8_TMR2_CTRL_DMA
 (*((
PUINT8V
)0x40002801))

654 
	#R8_TMR2_INTER_EN
 (*((
PUINT8V
)0x40002802))

655 
	#R32_TMR2_STATUS
 (*((
PUINT32V
)0x40002804))

656 
	#R8_TMR2_INT_FLAG
 (*((
PUINT8V
)0x40002806))

657 
	#R8_TMR2_FIFO_COUNT
 (*((
PUINT8V
)0x40002807))

658 
	#R32_TMR2_COUNT
 (*((
PUINT32V
)0x40002808))

659 
	#R16_TMR2_COUNT
 (*((
PUINT16V
)0x40002808))

660 
	#R8_TMR2_COUNT
 (*((
PUINT8V
)0x40002808))

661 
	#R32_TMR2_CNT_END
 (*((
PUINT32V
)0x4000280C))

662 
	#R32_TMR2_FIFO
 (*((
PUINT32V
)0x40002810))

663 
	#R16_TMR2_FIFO
 (*((
PUINT16V
)0x40002810))

664 
	#R8_TMR2_FIFO
 (*((
PUINT8V
)0x40002810))

665 
	#R32_TMR2_DMA_NOW
 (*((
PUINT32V
)0x40002814))

666 
	#R16_TMR2_DMA_NOW
 (*((
PUINT16V
)0x40002814))

667 
	#R32_TMR2_DMA_BEG
 (*((
PUINT32V
)0x40002818))

668 
	#R16_TMR2_DMA_BEG
 (*((
PUINT16V
)0x40002818))

669 
	#R32_TMR2_DMA_END
 (*((
PUINT32V
)0x4000281C))

670 
	#R16_TMR2_DMA_END
 (*((
PUINT16V
)0x4000281C))

671 

	)

673 
	#R32_TMR3_CONTROL
 (*((
PUINT32V
)0x40002C00))

674 
	#R8_TMR3_CTRL_MOD
 (*((
PUINT8V
)0x40002C00))

675 
	#R8_TMR3_INTER_EN
 (*((
PUINT8V
)0x40002C02))

676 
	#R32_TMR3_STATUS
 (*((
PUINT32V
)0x40002C04))

677 
	#R8_TMR3_INT_FLAG
 (*((
PUINT8V
)0x40002C06))

678 
	#R8_TMR3_FIFO_COUNT
 (*((
PUINT8V
)0x40002C07))

679 
	#R32_TMR3_COUNT
 (*((
PUINT32V
)0x40002C08))

680 
	#R16_TMR3_COUNT
 (*((
PUINT16V
)0x40002C08))

681 
	#R8_TMR3_COUNT
 (*((
PUINT8V
)0x40002C08))

682 
	#R32_TMR3_CNT_END
 (*((
PUINT32V
)0x40002C0C))

683 
	#R32_TMR3_FIFO
 (*((
PUINT32V
)0x40002C10))

684 
	#R16_TMR3_FIFO
 (*((
PUINT16V
)0x40002C10))

685 
	#R8_TMR3_FIFO
 (*((
PUINT8V
)0x40002C10))

686 

	)

688 
	#TMR_FIFO_SIZE
 8

689 
	#BA_TMR0
 ((
PUINT8V
)0x40002000)

690 
	#BA_TMR1
 ((
PUINT8V
)0x40002400)

691 
	#BA_TMR2
 ((
PUINT8V
)0x40002800)

692 
	#BA_TMR3
 ((
PUINT8V
)0x40002C00)

693 
	#TMR_CTRL_MOD
 0

	)

694 
	#RB_TMR_MODE_IN
 0x01

695 
	#RB_TMR_ALL_CLEAR
 0x02

696 
	#RB_TMR_COUNT_EN
 0x04

697 
	#RB_TMR_OUT_EN
 0x08

698 
	#RB_TMR_OUT_POLAR
 0x10

699 
	#RB_TMR_CAP_COUNT
 0x10

700 
	#RB_TMR_PWM_REPEAT
 0xC0

701 
	#RB_TMR_CAP_EDGE
 0xC0

702 
	#TMR_CTRL_DMA
 1

	)

703 
	#RB_TMR_DMA_ENABLE
 0x01

704 
	#RB_TMR_DMA_LOOP
 0x04

705 
	#TMR_INTER_EN
 2

	)

706 
	#RB_TMR_IE_CYC_END
 0x01

707 
	#RB_TMR_IE_DATA_ACT
 0x02

708 
	#RB_TMR_IE_FIFO_HF
 0x04

709 
	#RB_TMR_IE_DMA_END
 0x08

710 
	#RB_TMR_IE_FIFO_OV
 0x10

711 
	#TMR_INT_FLAG
 6

	)

712 
	#RB_TMR_IF_CYC_END
 0x01

713 
	#RB_TMR_IF_DATA_ACT
 0x02

714 
	#RB_TMR_IF_FIFO_HF
 0x04

715 
	#RB_TMR_IF_DMA_END
 0x08

716 
	#RB_TMR_IF_FIFO_OV
 0x10

717 
	#TMR_FIFO_COUNT
 7

	)

718 
	#TMR_COUNT
 0x08

	)

719 
	#TMR_CNT_END
 0x0C

	)

720 
	#TMR_FIFO
 0x10

	)

721 
	#TMR_DMA_NOW
 0x14

	)

722 
	#TMR_DMA_BEG
 0x18

	)

723 
	#TMR_DMA_END
 0x1C

	)

726 
	#R32_UART0_CTRL
 (*((
PUINT32V
)0x40003000))

727 
	#R8_UART0_MCR
 (*((
PUINT8V
)0x40003000))

728 
	#R8_UART0_IER
 (*((
PUINT8V
)0x40003001))

729 
	#R8_UART0_FCR
 (*((
PUINT8V
)0x40003002))

730 
	#R8_UART0_LCR
 (*((
PUINT8V
)0x40003003))

731 
	#R32_UART0_STAT
 (*((
PUINT32V
)0x40003004))

732 
	#R8_UART0_IIR
 (*((
PUINT8V
)0x40003004))

733 
	#R8_UART0_LSR
 (*((
PUINT8V
)0x40003005))

734 
	#R8_UART0_MSR
 (*((
PUINT8V
)0x40003006))

735 
	#R32_UART0_FIFO
 (*((
PUINT32V
)0x40003008))

736 
	#R8_UART0_RBR
 (*((
PUINT8V
)0x40003008))

737 
	#R8_UART0_THR
 (*((
PUINT8V
)0x40003008))

738 
	#R8_UART0_RFC
 (*((
PUINT8V
)0x4000300A))

739 
	#R8_UART0_TFC
 (*((
PUINT8V
)0x4000300B))

740 
	#R32_UART0_SETUP
 (*((
PUINT32V
)0x4000300C))

741 
	#R16_UART0_DL
 (*((
PUINT16V
)0x4000300C))

742 
	#R8_UART0_DLL
 (*((
PUINT8V
)0x4000300C))

743 
	#R8_UART0_DLM
 (*((
PUINT8V
)0x4000300D))

744 
	#R8_UART0_DIV
 (*((
PUINT8V
)0x4000300E))

745 
	#R8_UART0_ADR
 (*((
PUINT8V
)0x4000300F))

746 

	)

748 
	#R32_UART1_CTRL
 (*((
PUINT32V
)0x40003400))

749 
	#R8_UART1_MCR
 (*((
PUINT8V
)0x40003400))

750 
	#R8_UART1_IER
 (*((
PUINT8V
)0x40003401))

751 
	#R8_UART1_FCR
 (*((
PUINT8V
)0x40003402))

752 
	#R8_UART1_LCR
 (*((
PUINT8V
)0x40003403))

753 
	#R32_UART1_STAT
 (*((
PUINT32V
)0x40003404))

754 
	#R8_UART1_IIR
 (*((
PUINT8V
)0x40003404))

755 
	#R8_UART1_LSR
 (*((
PUINT8V
)0x40003405))

756 
	#R32_UART1_FIFO
 (*((
PUINT32V
)0x40003408))

757 
	#R8_UART1_RBR
 (*((
PUINT8V
)0x40003408))

758 
	#R8_UART1_THR
 (*((
PUINT8V
)0x40003408))

759 
	#R8_UART1_RFC
 (*((
PUINT8V
)0x4000340A))

760 
	#R8_UART1_TFC
 (*((
PUINT8V
)0x4000340B))

761 
	#R32_UART1_SETUP
 (*((
PUINT32V
)0x4000340C))

762 
	#R16_UART1_DL
 (*((
PUINT16V
)0x4000340C))

763 
	#R8_UART1_DLL
 (*((
PUINT8V
)0x4000340C))

764 
	#R8_UART1_DLM
 (*((
PUINT8V
)0x4000340D))

765 
	#R8_UART1_DIV
 (*((
PUINT8V
)0x4000340E))

766 

	)

768 
	#R32_UART2_CTRL
 (*((
PUINT32V
)0x40003800))

769 
	#R8_UART2_MCR
 (*((
PUINT8V
)0x40003800))

770 
	#R8_UART2_IER
 (*((
PUINT8V
)0x40003801))

771 
	#R8_UART2_FCR
 (*((
PUINT8V
)0x40003802))

772 
	#R8_UART2_LCR
 (*((
PUINT8V
)0x40003803))

773 
	#R32_UART2_STAT
 (*((
PUINT32V
)0x40003804))

774 
	#R8_UART2_IIR
 (*((
PUINT8V
)0x40003804))

775 
	#R8_UART2_LSR
 (*((
PUINT8V
)0x40003805))

776 
	#R32_UART2_FIFO
 (*((
PUINT32V
)0x40003808))

777 
	#R8_UART2_RBR
 (*((
PUINT8V
)0x40003808))

778 
	#R8_UART2_THR
 (*((
PUINT8V
)0x40003808))

779 
	#R8_UART2_RFC
 (*((
PUINT8V
)0x4000380A))

780 
	#R8_UART2_TFC
 (*((
PUINT8V
)0x4000380B))

781 
	#R32_UART2_SETUP
 (*((
PUINT32V
)0x4000380C))

782 
	#R16_UART2_DL
 (*((
PUINT16V
)0x4000380C))

783 
	#R8_UART2_DLL
 (*((
PUINT8V
)0x4000380C))

784 
	#R8_UART2_DLM
 (*((
PUINT8V
)0x4000380D))

785 
	#R8_UART2_DIV
 (*((
PUINT8V
)0x4000380E))

786 

	)

788 
	#R32_UART3_CTRL
 (*((
PUINT32V
)0x40003C00))

789 
	#R8_UART3_MCR
 (*((
PUINT8V
)0x40003C00))

790 
	#R8_UART3_IER
 (*((
PUINT8V
)0x40003C01))

791 
	#R8_UART3_FCR
 (*((
PUINT8V
)0x40003C02))

792 
	#R8_UART3_LCR
 (*((
PUINT8V
)0x40003C03))

793 
	#R32_UART3_STAT
 (*((
PUINT32V
)0x40003C04))

794 
	#R8_UART3_IIR
 (*((
PUINT8V
)0x40003C04))

795 
	#R8_UART3_LSR
 (*((
PUINT8V
)0x40003C05))

796 
	#R32_UART3_FIFO
 (*((
PUINT32V
)0x40003C08))

797 
	#R8_UART3_RBR
 (*((
PUINT8V
)0x40003C08))

798 
	#R8_UART3_THR
 (*((
PUINT8V
)0x40003C08))

799 
	#R8_UART3_RFC
 (*((
PUINT8V
)0x40003C0A))

800 
	#R8_UART3_TFC
 (*((
PUINT8V
)0x40003C0B))

801 
	#R32_UART3_SETUP
 (*((
PUINT32V
)0x40003C0C))

802 
	#R16_UART3_DL
 (*((
PUINT16V
)0x40003C0C))

803 
	#R8_UART3_DLL
 (*((
PUINT8V
)0x40003C0C))

804 
	#R8_UART3_DLM
 (*((
PUINT8V
)0x40003C0D))

805 
	#R8_UART3_DIV
 (*((
PUINT8V
)0x40003C0E))

806 

	)

808 
	#UART_FIFO_SIZE
 8

809 
	#UART_RECV_RDY_SZ
 7

810 
	#BA_UART0
 ((
PUINT8V
)0x40003000)

811 
	#BA_UART1
 ((
PUINT8V
)0x40003400)

812 
	#BA_UART2
 ((
PUINT8V
)0x40003800)

813 
	#BA_UART3
 ((
PUINT8V
)0x40003C00)

814 
	#UART_MCR
 0

	)

815 
	#RB_MCR_DTR
 0x01

816 
	#RB_MCR_RTS
 0x02

817 
	#RB_MCR_OUT1
 0x04

818 
	#RB_MCR_OUT2
 0x08

819 
	#RB_MCR_INT_OE
 0x08

820 
	#RB_MCR_LOOP
 0x10

821 
	#RB_MCR_AU_FLOW_EN
 0x20

822 
	#RB_MCR_TNOW
 0x40

823 
	#RB_MCR_HALF
 0x80

824 
	#UART_IER
 1

	)

825 
	#RB_IER_RECV_RDY
 0x01

826 
	#RB_IER_THR_EMPTY
 0x02

827 
	#RB_IER_LINE_STAT
 0x04

828 
	#RB_IER_MODEM_CHG
 0x08

829 
	#RB_IER_DTR_EN
 0x10

830 
	#RB_IER_RTS_EN
 0x20

831 
	#RB_IER_TXD_EN
 0x40

832 
	#RB_IER_RESET
 0x80

833 
	#UART_FCR
 2

	)

834 
	#RB_FCR_FIFO_EN
 0x01

835 
	#RB_FCR_RX_FIFO_CLR
 0x02

836 
	#RB_FCR_TX_FIFO_CLR
 0x04

837 
	#RB_FCR_FIFO_TRIG
 0xC0

838 
	#UART_LCR
 3

	)

839 
	#RB_LCR_WORD_SZ
 0x03

840 
	#RB_LCR_STOP_BIT
 0x04

841 
	#RB_LCR_PAR_EN
 0x08

842 
	#RB_LCR_PAR_MOD
 0x30

843 
	#RB_LCR_BREAK_EN
 0x40

844 
	#RB_LCR_DLAB
 0x80

845 
	#RB_LCR_GP_BIT
 0x80

846 
	#UART_IIR
 4

	)

847 
	#RB_IIR_NO_INT
 0x01

848 
	#RB_IIR_INT_MASK
 0x0F

849 
	#RB_IIR_FIFO_ID
 0xC0

850 
	#UART_LSR
 5

	)

851 
	#RB_LSR_DATA_RDY
 0x01

852 
	#RB_LSR_OVER_ERR
 0x02

853 
	#RB_LSR_PAR_ERR
 0x04

854 
	#RB_LSR_FRAME_ERR
 0x08

855 
	#RB_LSR_BREAK_ERR
 0x10

856 
	#RB_LSR_TX_FIFO_EMP
 0x20

857 
	#RB_LSR_TX_ALL_EMP
 0x40

858 
	#RB_LSR_ERR_RX_FIFO
 0x80

859 
	#UART_MSR
 6

	)

860 
	#RB_MSR_CTS_CHG
 0x01

861 
	#RB_MSR_DSR_CHG
 0x02

864 
	#RB_MSR_CTS
 0x10

865 
	#RB_MSR_DSR
 0x20

868 
	#UART_RBR
 8

	)

869 
	#UART_THR
 8

	)

870 
	#UART_RFC
 0x0A

	)

871 
	#UART_TFC
 0x0B

	)

872 
	#UART_DLL
 0x0C

	)

873 
	#UART_DLM
 0x0D

	)

874 
	#UART_DIV
 0x0E

	)

875 
	#UART_ADR
 0x0F

	)

878 
	#UART_II_SLV_ADDR
 0x0E

879 
	#UART_II_LINE_STAT
 0x06

880 
	#UART_II_RECV_RDY
 0x04

881 
	#UART_II_RECV_TOUT
 0x0C

882 
	#UART_II_THR_EMPTY
 0x02

883 
	#UART_II_MODEM_CHG
 0x00

884 
	#UART_II_NO_INTER
 0x01

885 

	)

887 
	#R32_SPI0_CONTROL
 (*((
PUINT32V
)0x40004000))

888 
	#R8_SPI0_CTRL_MOD
 (*((
PUINT8V
)0x40004000))

889 
	#R8_SPI0_CTRL_CFG
 (*((
PUINT8V
)0x40004001))

890 
	#R8_SPI0_INTER_EN
 (*((
PUINT8V
)0x40004002))

891 
	#R8_SPI0_CLOCK_DIV
 (*((
PUINT8V
)0x40004003))

892 
	#R8_SPI0_SLAVE_PRE
 (*((
PUINT8V
)0x40004003))

893 
	#R32_SPI0_STATUS
 (*((
PUINT32V
)0x40004004))

894 
	#R8_SPI0_BUFFER
 (*((
PUINT8V
)0x40004004))

895 
	#R8_SPI0_RUN_FLAG
 (*((
PUINT8V
)0x40004005))

896 
	#R8_SPI0_INT_FLAG
 (*((
PUINT8V
)0x40004006))

897 
	#R8_SPI0_FIFO_COUNT
 (*((
PUINT8V
)0x40004007))

898 
	#R32_SPI0_TOTAL_CNT
 (*((
PUINT32V
)0x4000400C))

899 
	#R16_SPI0_TOTAL_CNT
 (*((
PUINT16V
)0x4000400C))

900 
	#R32_SPI0_FIFO
 (*((
PUINT32V
)0x40004010))

901 
	#R8_SPI0_FIFO
 (*((
PUINT8V
)0x40004010))

902 
	#R8_SPI0_FIFO_COUNT1
 (*((
PUINT8V
)0x40004013))

903 
	#R32_SPI0_DMA_NOW
 (*((
PUINT32V
)0x40004014))

904 
	#R16_SPI0_DMA_NOW
 (*((
PUINT16V
)0x40004014))

905 
	#R32_SPI0_DMA_BEG
 (*((
PUINT32V
)0x40004018))

906 
	#R16_SPI0_DMA_BEG
 (*((
PUINT16V
)0x40004018))

907 
	#R32_SPI0_DMA_END
 (*((
PUINT32V
)0x4000401C))

908 
	#R16_SPI0_DMA_END
 (*((
PUINT16V
)0x4000401C))

909 

	)

911 
	#SPI_FIFO_SIZE
 8

912 
	#BA_SPI0
 ((
PUINT8V
)0x40004000)

913 
	#SPI_CTRL_MOD
 0

	)

914 
	#RB_SPI_MODE_SLAVE
 0x01

915 
	#RB_SPI_ALL_CLEAR
 0x02

916 
	#RB_SPI_2WIRE_MOD
 0x04

917 
	#RB_SPI_MST_SCK_MOD
 0x08

918 
	#RB_SPI_SLV_CMD_MOD
 0x08

919 
	#RB_SPI_FIFO_DIR
 0x10

920 
	#RB_SPI_SCK_OE
 0x20

921 
	#RB_SPI_MOSI_OE
 0x40

922 
	#RB_SPI_MISO_OE
 0x80

923 
	#SPI_CTRL_CFG
 1

	)

924 
	#RB_SPI_DMA_ENABLE
 0x01

925 
	#RB_SPI_DMA_LOOP
 0x04

926 
	#RB_SPI_AUTO_IF
 0x10

927 
	#RB_SPI_BIT_ORDER
 0x20

928 
	#RB_SPI_MST_DLY_EN
 0x40

929 
	#SPI_INTER_EN
 2

	)

930 
	#RB_SPI_IE_CNT_END
 0x01

931 
	#RB_SPI_IE_BYTE_END
 0x02

932 
	#RB_SPI_IE_FIFO_HF
 0x04

933 
	#RB_SPI_IE_DMA_END
 0x08

934 
	#RB_SPI_IE_FIFO_OV
 0x10

935 
	#RB_SPI_IE_FST_BYTE
 0x80

936 
	#SPI_CLOCK_DIV
 3

	)

937 
	#SPI_SLAVE_PRESET
 3

	)

938 
	#SPI_BUFFER
 4

	)

939 
	#SPI_RUN_FLAG
 5

	)

940 
	#RB_SPI_SLV_CMD_ACT
 0x10

941 
	#RB_SPI_FIFO_READY
 0x20

942 
	#RB_SPI_SLV_CS_LOAD
 0x40

943 
	#RB_SPI_SLV_SELECT
 0x80

944 
	#SPI_INT_FLAG
 6

	)

945 
	#RB_SPI_IF_CNT_END
 0x01

946 
	#RB_SPI_IF_BYTE_END
 0x02

947 
	#RB_SPI_IF_FIFO_HF
 0x04

948 
	#RB_SPI_IF_DMA_END
 0x08

949 
	#RB_SPI_IF_FIFO_OV
 0x10

950 
	#RB_SPI_FREE
 0x40

951 
	#RB_SPI_IF_FST_BYTE
 0x80

952 
	#SPI_FIFO_COUNT
 7

	)

953 
	#SPI_TOTAL_CNT
 0x0C

	)

954 
	#SPI_FIFO
 0x10

	)

955 
	#SPI_DMA_NOW
 0x14

	)

956 
	#SPI_DMA_BEG
 0x18

	)

957 
	#SPI_DMA_END
 0x1C

	)

960 
	#R32_PWM_CONTROL
 (*((
PUINT32V
)0x40005000))

961 
	#R8_PWM_OUT_EN
 (*((
PUINT8V
)0x40005000))

962 
	#R8_PWM_POLAR
 (*((
PUINT8V
)0x40005001))

963 
	#R8_PWM_CONFIG
 (*((
PUINT8V
)0x40005002))

964 
	#R8_PWM_CLOCK_DIV
 (*((
PUINT8V
)0x40005003))

965 
	#R32_PWM4_7_DATA
 (*((
PUINT32V
)0x40005004))

966 
	#R8_PWM4_DATA
 (*((
PUINT8V
)0x40005004))

967 
	#R8_PWM5_DATA
 (*((
PUINT8V
)0x40005005))

968 
	#R8_PWM6_DATA
 (*((
PUINT8V
)0x40005006))

969 
	#R8_PWM7_DATA
 (*((
PUINT8V
)0x40005007))

970 
	#R32_PWM8_11_DATA
 (*((
PUINT32V
)0x40005008))

971 
	#R8_PWM8_DATA
 (*((
PUINT8V
)0x40005008))

972 
	#R8_PWM9_DATA
 (*((
PUINT8V
)0x40005009))

973 
	#R8_PWM10_DATA
 (*((
PUINT8V
)0x4000500A))

974 
	#R8_PWM11_DATA
 (*((
PUINT8V
)0x4000500B))

975 
	#R8_PWM_INT_CTRL
 (*((
PUINT32V
)0x4000500C))

976 
	#RB_PWM_IE_CYC
 0x01

977 
	#RB_PWM_CYC_PRE
 0x02

978 
	#RB_PWM_IF_CYC
 0x80

979 

	)

981 
	#BA_PWMX
 ((
PUINT8V
)0x40005000)

982 
	#PWM_OUT_EN
 0

	)

983 
	#RB_PWM4_OUT_EN
 0x01

984 
	#RB_PWM5_OUT_EN
 0x02

985 
	#RB_PWM6_OUT_EN
 0x04

986 
	#RB_PWM7_OUT_EN
 0x08

987 
	#RB_PWM8_OUT_EN
 0x10

988 
	#RB_PWM9_OUT_EN
 0x20

989 
	#RB_PWM10_OUT_EN
 0x40

990 
	#RB_PWM11_OUT_EN
 0x80

991 
	#PWM_POLAR
 1

	)

992 
	#RB_PWM4_POLAR
 0x01

993 
	#RB_PWM5_POLAR
 0x02

994 
	#RB_PWM6_POLAR
 0x04

995 
	#RB_PWM7_POLAR
 0x08

996 
	#RB_PWM8_POLAR
 0x10

997 
	#RB_PWM9_POLAR
 0x20

998 
	#RB_PWM10_POLAR
 0x40

999 
	#RB_PWM11_POLAR
 0x80

1000 
	#PWM_CONFIG
 2

	)

1001 
	#RB_PWM_CYCLE_SEL
 0x01

1002 
	#RB_PWM_STAG_ST
 0x02

1003 
	#RB_PWM_CYC_MOD
 0x0C

1004 
	#RB_PWM4_5_STAG_EN
 0x10

1005 
	#RB_PWM6_7_STAG_EN
 0x20

1006 
	#RB_PWM8_9_STAG_EN
 0x40

1007 
	#RB_PWM10_11_STAG_EN
 0x80

1008 
	#PWM_CLOCK_DIV
 3

	)

1009 
	#PWM4_DATA_HOLD
 4

	)

1010 
	#PWM5_DATA_HOLD
 5

	)

1011 
	#PWM6_DATA_HOLD
 6

	)

1012 
	#PWM7_DATA_HOLD
 7

	)

1013 
	#PWM8_DATA_HOLD
 8

	)

1014 
	#PWM9_DATA_HOLD
 9

	)

1015 
	#PWM10_DATA_HOLD
 10

	)

1016 
	#PWM11_DATA_HOLD
 11

	)

1019 
	#BA_CODE
 ((
PUINT32
)0x00000000)

1020 
	#SZ_CODE
 0x00040000

1021 
	#BA_SFR
 ((
PUINT32
)0x40000000)

1022 
	#SZ_SFR
 0x00010000

1023 
	#BA_RAM
 ((
PUINT32
)0x20000000)

1024 
	#SZ_RAM
 0x00008000

1025 

	)

1027 
	#DATA_FLASH_ADDR
 0x70000

1028 
	#DATA_FLASH_SIZE
 0x8000

1029 
	#BOOT_LOAD_ADDR
 0x78000

1030 
	#BOOT_LOAD_SIZE
 0x6000

1031 
	#BOOT_LOAD_CFG
 0x7E000

1032 
	#ROM_CFG_ADDR
 0x7F000

1033 

	)

1035 
	#ID_CH573
 0x73

1036 
	#ID_CH571
 0x71

1037 

	)

1039 
	#INT_ID_TMR0
 16

1040 
	#INT_ID_GPIO_A
 17

1041 
	#INT_ID_GPIO_B
 18

1042 
	#INT_ID_SPI0
 19

1043 
	#INT_ID_BLEB
 20

1044 
	#INT_ID_BLEL
 21

1045 
	#INT_ID_USB
 22

1046 
	#INT_ID_TMR1
 24

1047 
	#INT_ID_TMR2
 25

1048 
	#INT_ID_UART0
 26

1049 
	#INT_ID_UART1
 27

1050 
	#INT_ID_RTC
 28

1051 
	#INT_ID_ADC
 29

1052 
	#INT_ID_PWMX
 31

1053 
	#INT_ID_TMR3
 32

1054 
	#INT_ID_UART2
 33

1055 
	#INT_ID_UART3
 34

1056 
	#INT_ID_WDOG_BAT
 35

1057 
	#INT_VEC_ENTRY_SZ
 4

1058 
	#INT_ADDR_TMR0
 (
INT_ID_TMR0
*
INT_VEC_ENTRY_SZ
)

1059 
	#INT_ADDR_GPIO_A
 (
INT_ID_GPIO_A
*
INT_VEC_ENTRY_SZ
)

1060 
	#INT_ADDR_GPIO_B
 (
INT_ID_GPIO_B
*
INT_VEC_ENTRY_SZ
)

1061 
	#INT_ADDR_SPI0
 (
INT_ID_SPI0
*
INT_VEC_ENTRY_SZ
)

1062 
	#INT_ADDR_BLEB
 (
INT_ID_BLEB
*
INT_VEC_ENTRY_SZ
)

1063 
	#INT_ADDR_BLEL
 (
INT_ID_BLEL
*
INT_VEC_ENTRY_SZ
)

1064 
	#INT_ADDR_USB
 (
INT_ID_USB
*
INT_VEC_ENTRY_SZ
)

1065 
	#INT_ADDR_TMR1
 (
INT_ID_TMR1
*
INT_VEC_ENTRY_SZ
)

1066 
	#INT_ADDR_TMR2
 (
INT_ID_TMR2
*
INT_VEC_ENTRY_SZ
)

1067 
	#INT_ADDR_UART0
 (
INT_ID_UART0
*
INT_VEC_ENTRY_SZ
)

1068 
	#INT_ADDR_UART1
 (
INT_ID_UART1
*
INT_VEC_ENTRY_SZ
)

1069 
	#INT_ADDR_RTC
 (
INT_ID_RTC
*
INT_VEC_ENTRY_SZ
)

1070 
	#INT_ADDR_ADC
 (
INT_ID_ADC
*
INT_VEC_ENTRY_SZ
)

1071 
	#INT_ADDR_PWMX
 (
INT_ID_PWMX
*
INT_VEC_ENTRY_SZ
)

1072 
	#INT_ADDR_TMR3
 (
INT_ID_TMR3
*
INT_VEC_ENTRY_SZ
)

1073 
	#INT_ADDR_UART2
 (
INT_ID_UART2
*
INT_VEC_ENTRY_SZ
)

1074 
	#INT_ADDR_UART3
 (
INT_ID_UART3
*
INT_VEC_ENTRY_SZ
)

1075 
	#INT_ADDR_WDOG_BAT
 (
INT_ID_WDOG_BAT
*
INT_VEC_ENTRY_SZ
)

1076 

	)

1077 #i‚de‡
TABLE_IRQN


1078 
	#__PFIC_PRIO_BITS
 2

	)

1079 
	#__Víd‹_SysTickC⁄fig
 0

	)

1080 
	eIRQn


1082 
Re£t_IRQn
 = 1,

1083 
NMI_IRQn
 = 2,

1084 
EXC_IRQn
 = 3,

1085 
SysTick_IRQn
 = 12,

1086 
SWI_IRQn
 = 14,

1087 
TMR0_IRQn
 = 16,

1088 
GPIO_A_IRQn
 = 17,

1089 
GPIO_B_IRQn
 = 18,

1090 
SPI0_IRQn
 = 19,

1091 
BLEB_IRQn
 = 20,

1092 
BLEL_IRQn
 = 21,

1093 
USB_IRQn
 = 22,

1094 
TMR1_IRQn
 = 24,

1095 
TMR2_IRQn
 = 25,

1096 
UART0_IRQn
 = 26,

1097 
UART1_IRQn
 = 27,

1098 
RTC_IRQn
 = 28,

1099 
ADC_IRQn
 = 29,

1100 
PWMX_IRQn
 = 31,

1101 
TMR3_IRQn
 = 32,

1102 
UART2_IRQn
 = 33,

1103 
UART3_IRQn
 = 34,

1104 
WDOG_BAT_IRQn
 = 35

1105 } 
	tIRQn_Ty≥
;

1109 #ifde‡
__˝lu•lus


1116 #i‚de‡
__CH573USBSFR_H__


1117 
	#__CH573USBSFR_H__


	)

1119 #ifde‡
__˝lu•lus


1128 
	#USB_BASE_ADDR
 (0x40008000)

	)

1131 
	#R32_USB_CONTROL
 (*((
PUINT32V
)0x40008000))

1132 
	#R8_USB_CTRL
 (*((
PUINT8V
)0x40008000))

1133 
	#RB_UC_HOST_MODE
 0x80

1134 
	#RB_UC_LOW_SPEED
 0x40

1135 
	#RB_UC_DEV_PU_EN
 0x20

1136 
	#RB_UC_SYS_CTRL1
 0x20

1137 
	#RB_UC_SYS_CTRL0
 0x10

1138 
	#MASK_UC_SYS_CTRL
 0x30

1147 
	#RB_UC_INT_BUSY
 0x08

1148 
	#RB_UC_RESET_SIE
 0x04

1149 
	#RB_UC_CLR_ALL
 0x02

1150 
	#RB_UC_DMA_EN
 0x01

1151 

	)

1152 
	#R8_UDEV_CTRL
 (*((
PUINT8V
)0x40008001))

1153 
	#RB_UD_PD_DIS
 0x80

1154 
	#RB_UD_DP_PIN
 0x20

1155 
	#RB_UD_DM_PIN
 0x10

1156 
	#RB_UD_LOW_SPEED
 0x04

1157 
	#RB_UD_GP_BIT
 0x02

1158 
	#RB_UD_PORT_EN
 0x01

1159 

	)

1160 
	#R8_UHOST_CTRL
 
R8_UDEV_CTRL


1161 
	#RB_UH_PD_DIS
 0x80

1162 
	#RB_UH_DP_PIN
 0x20

1163 
	#RB_UH_DM_PIN
 0x10

1164 
	#RB_UH_LOW_SPEED
 0x04

1165 
	#RB_UH_BUS_RESET
 0x02

1166 
	#RB_UH_PORT_EN
 0x01

1167 

	)

1168 
	#R8_USB_INT_EN
 (*((
PUINT8V
)0x40008002))

1169 
	#RB_UIE_DEV_SOF
 0x80

1170 
	#RB_UIE_DEV_NAK
 0x40

1171 
	#RB_UIE_FIFO_OV
 0x10

1172 
	#RB_UIE_HST_SOF
 0x08

1173 
	#RB_UIE_SUSPEND
 0x04

1174 
	#RB_UIE_TRANSFER
 0x02

1175 
	#RB_UIE_DETECT
 0x01

1176 
	#RB_UIE_BUS_RST
 0x01

1177 

	)

1178 
	#R8_USB_DEV_AD
 (*((
PUINT8V
)0x40008003))

1179 
	#RB_UDA_GP_BIT
 0x80

1180 
	#MASK_USB_ADDR
 0x7F

1181 

	)

1182 
	#R32_USB_STATUS
 (*((
PUINT32V
)0x40008004))

1183 
	#R8_USB_MIS_ST
 (*((
PUINT8V
)0x40008005))

1184 
	#RB_UMS_SOF_PRES
 0x80

1185 
	#RB_UMS_SOF_ACT
 0x40

1186 
	#RB_UMS_SIE_FREE
 0x20

1187 
	#RB_UMS_R_FIFO_RDY
 0x10

1188 
	#RB_UMS_BUS_RESET
 0x08

1189 
	#RB_UMS_SUSPEND
 0x04

1190 
	#RB_UMS_DM_LEVEL
 0x02

1191 
	#RB_UMS_DEV_ATTACH
 0x01

1192 

	)

1193 
	#R8_USB_INT_FG
 (*((
PUINT8V
)0x40008006))

1194 
	#RB_U_IS_NAK
 0x80

1195 
	#RB_U_TOG_OK
 0x40

1196 
	#RB_U_SIE_FREE
 0x20

1197 
	#RB_UIF_FIFO_OV
 0x10

1198 
	#RB_UIF_HST_SOF
 0x08

1199 
	#RB_UIF_SUSPEND
 0x04

1200 
	#RB_UIF_TRANSFER
 0x02

1201 
	#RB_UIF_DETECT
 0x01

1202 
	#RB_UIF_BUS_RST
 0x01

1203 

	)

1204 
	#R8_USB_INT_ST
 (*((
PUINT8V
)0x40008007))

1205 
	#RB_UIS_SETUP_ACT
 0x80

1206 
	#RB_UIS_TOG_OK
 0x40

1207 
	#RB_UIS_TOKEN1
 0x20

1208 
	#RB_UIS_TOKEN0
 0x10

1209 
	#MASK_UIS_TOKEN
 0x30

1210 
	#UIS_TOKEN_OUT
 0x00

	)

1211 
	#UIS_TOKEN_SOF
 0x10

	)

1212 
	#UIS_TOKEN_IN
 0x20

	)

1213 
	#UIS_TOKEN_SETUP
 0x30

	)

1219 
	#MASK_UIS_ENDP
 0x0F

1220 
	#MASK_UIS_H_RES
 0x0F

1221 

	)

1222 
	#R8_USB_RX_LEN
 (*((
PUINT8V
)0x40008008))

1223 
	#R32_USB_BUF_MODE
 (*((
PUINT32V
)0x4000800C))

1224 
	#R8_UEP4_1_MOD
 (*((
PUINT8V
)0x4000800C))

1225 
	#RB_UEP1_RX_EN
 0x80

1226 
	#RB_UEP1_TX_EN
 0x40

1227 
	#RB_UEP1_BUF_MOD
 0x10

1236 
	#RB_UEP4_RX_EN
 0x08

1237 
	#RB_UEP4_TX_EN
 0x04

1244 

	)

1245 
	#R8_UEP2_3_MOD
 (*((
PUINT8V
)0x4000800D))

1246 
	#RB_UEP3_RX_EN
 0x80

1247 
	#RB_UEP3_TX_EN
 0x40

1248 
	#RB_UEP3_BUF_MOD
 0x10

1249 
	#RB_UEP2_RX_EN
 0x08

1250 
	#RB_UEP2_TX_EN
 0x04

1251 
	#RB_UEP2_BUF_MOD
 0x01

1252 

	)

1253 
	#R8_UH_EP_MOD
 
R8_UEP2_3_MOD


1254 
	#RB_UH_EP_TX_EN
 0x40

1255 
	#RB_UH_EP_TBUF_MOD
 0x10

1260 
	#RB_UH_EP_RX_EN
 0x08

1261 
	#RB_UH_EP_RBUF_MOD
 0x01

1266 

	)

1267 
	#R16_UEP0_DMA
 (*((
PUINT16V
)0x40008010))

1268 
	#R16_UEP1_DMA
 (*((
PUINT16V
)0x40008014))

1269 
	#R16_UEP2_DMA
 (*((
PUINT16V
)0x40008018))

1270 
	#R16_UH_RX_DMA
 
R16_UEP2_DMA


1271 
	#R16_UEP3_DMA
 (*((
PUINT16V
)0x4000801C))

1272 
	#R16_UH_TX_DMA
 
R16_UEP3_DMA


1273 
	#R32_USB_EP0_CTRL
 (*((
PUINT32V
)0x40008020))

1274 
	#R8_UEP0_T_LEN
 (*((
PUINT8V
)0x40008020))

1275 
	#R8_UEP0_CTRL
 (*((
PUINT8V
)0x40008022))

1276 
	#R32_USB_EP1_CTRL
 (*((
PUINT32V
)0x40008024))

1277 
	#R8_UEP1_T_LEN
 (*((
PUINT8V
)0x40008024))

1278 
	#R8_UEP1_CTRL
 (*((
PUINT8V
)0x40008026))

1279 
	#RB_UEP_R_TOG
 0x80

1280 
	#RB_UEP_T_TOG
 0x40

1281 
	#RB_UEP_AUTO_TOG
 0x10

1282 
	#RB_UEP_R_RES1
 0x08

1283 
	#RB_UEP_R_RES0
 0x04

1284 
	#MASK_UEP_R_RES
 0x0C

1285 
	#UEP_R_RES_ACK
 0x00

	)

1286 
	#UEP_R_RES_TOUT
 0x04

	)

1287 
	#UEP_R_RES_NAK
 0x08

	)

1288 
	#UEP_R_RES_STALL
 0x0C

	)

1294 
	#RB_UEP_T_RES1
 0x02

1295 
	#RB_UEP_T_RES0
 0x01

1296 
	#MASK_UEP_T_RES
 0x03

1297 
	#UEP_T_RES_ACK
 0x00

	)

1298 
	#UEP_T_RES_TOUT
 0x01

	)

1299 
	#UEP_T_RES_NAK
 0x02

	)

1300 
	#UEP_T_RES_STALL
 0x03

	)

1307 
	#R8_UH_SETUP
 
R8_UEP1_CTRL


1308 
	#RB_UH_PRE_PID_EN
 0x80

1309 
	#RB_UH_SOF_EN
 0x40

1310 

	)

1311 
	#R32_USB_EP2_CTRL
 (*((
PUINT32V
)0x40008028))

1312 
	#R8_UEP2_T_LEN
 (*((
PUINT8V
)0x40008028))

1313 
	#R8_UEP2_CTRL
 (*((
PUINT8V
)0x4000802A))

1314 

	)

1315 
	#R8_UH_EP_PID
 
R8_UEP2_T_LEN


1316 
	#MASK_UH_TOKEN
 0xF0

1317 
	#MASK_UH_ENDP
 0x0F

1318 

	)

1319 
	#R8_UH_RX_CTRL
 
R8_UEP2_CTRL


1320 
	#RB_UH_R_TOG
 0x80

1321 
	#RB_UH_R_AUTO_TOG
 0x10

1322 
	#RB_UH_R_RES
 0x04

1323 

	)

1324 
	#R32_USB_EP3_CTRL
 (*((
PUINT32V
)0x4000802c))

1325 
	#R8_UEP3_T_LEN
 (*((
PUINT8V
)0x4000802c))

1326 
	#R8_UEP3_CTRL
 (*((
PUINT8V
)0x4000802e))

1327 
	#R8_UH_TX_LEN
 
R8_UEP3_T_LEN


1328 

	)

1329 
	#R8_UH_TX_CTRL
 
R8_UEP3_CTRL


1330 
	#RB_UH_T_TOG
 0x40

1331 
	#RB_UH_T_AUTO_TOG
 0x10

1332 
	#RB_UH_T_RES
 0x01

1333 

	)

1334 
	#R32_USB_EP4_CTRL
 (*((
PUINT32V
)0x40008030))

1335 
	#R8_UEP4_T_LEN
 (*((
PUINT8V
)0x40008030))

1336 
	#R8_UEP4_CTRL
 (*((
PUINT8V
)0x40008032))

1337 

	)

1338 #ifde‡
__˝lu•lus


1345 #i‚de‡
__USB_TYPE__


1346 
	#__USB_TYPE__


	)

1348 #ifde‡
__˝lu•lus


1355 #i‚de‡
USB_PID_SETUP


1356 
	#USB_PID_NULL
 0x00

	)

1357 
	#USB_PID_SOF
 0x05

	)

1358 
	#USB_PID_SETUP
 0x0D

	)

1359 
	#USB_PID_IN
 0x09

	)

1360 
	#USB_PID_OUT
 0x01

	)

1361 
	#USB_PID_ACK
 0x02

	)

1362 
	#USB_PID_NAK
 0x0A

	)

1363 
	#USB_PID_STALL
 0x0E

	)

1364 
	#USB_PID_DATA0
 0x03

	)

1365 
	#USB_PID_DATA1
 0x0B

	)

1366 
	#USB_PID_PRE
 0x0C

	)

1370 #i‚de‡
USB_GET_DESCRIPTOR


1371 
	#USB_GET_STATUS
 0x00

	)

1372 
	#USB_CLEAR_FEATURE
 0x01

	)

1373 
	#USB_SET_FEATURE
 0x03

	)

1374 
	#USB_SET_ADDRESS
 0x05

	)

1375 
	#USB_GET_DESCRIPTOR
 0x06

	)

1376 
	#USB_SET_DESCRIPTOR
 0x07

	)

1377 
	#USB_GET_CONFIGURATION
 0x08

	)

1378 
	#USB_SET_CONFIGURATION
 0x09

	)

1379 
	#USB_GET_INTERFACE
 0x0A

	)

1380 
	#USB_SET_INTERFACE
 0x0B

	)

1381 
	#USB_SYNCH_FRAME
 0x0C

	)

1385 #i‚de‡
HUB_GET_DESCRIPTOR


1386 
	#HUB_GET_STATUS
 0x00

	)

1387 
	#HUB_CLEAR_FEATURE
 0x01

	)

1388 
	#HUB_GET_STATE
 0x02

	)

1389 
	#HUB_SET_FEATURE
 0x03

	)

1390 
	#HUB_GET_DESCRIPTOR
 0x06

	)

1391 
	#HUB_SET_DESCRIPTOR
 0x07

	)

1395 #i‚de‡
HID_GET_REPORT


1396 
	#HID_GET_REPORT
 0x01

	)

1397 
	#HID_GET_IDLE
 0x02

	)

1398 
	#HID_GET_PROTOCOL
 0x03

	)

1399 
	#HID_SET_REPORT
 0x09

	)

1400 
	#HID_SET_IDLE
 0x0A

	)

1401 
	#HID_SET_PROTOCOL
 0x0B

	)

1405 #i‚de‡
USB_REQ_TYP_MASK


1406 
	#USB_REQ_TYP_IN
 0x80

	)

1407 
	#USB_REQ_TYP_OUT
 0x00

	)

1408 
	#USB_REQ_TYP_READ
 0x80

	)

1409 
	#USB_REQ_TYP_WRITE
 0x00

	)

1410 
	#USB_REQ_TYP_MASK
 0x60

	)

1411 
	#USB_REQ_TYP_STANDARD
 0x00

	)

1412 
	#USB_REQ_TYP_CLASS
 0x20

	)

1413 
	#USB_REQ_TYP_VENDOR
 0x40

	)

1414 
	#USB_REQ_TYP_RESERVED
 0x60

	)

1415 
	#USB_REQ_RECIP_MASK
 0x1F

	)

1416 
	#USB_REQ_RECIP_DEVICE
 0x00

	)

1417 
	#USB_REQ_RECIP_INTERF
 0x01

	)

1418 
	#USB_REQ_RECIP_ENDP
 0x02

	)

1419 
	#USB_REQ_RECIP_OTHER
 0x03

	)

1423 #i‚de‡
HUB_GET_HUB_DESCRIPTOR


1424 
	#HUB_CLEAR_HUB_FEATURE
 0x20

	)

1425 
	#HUB_CLEAR_PORT_FEATURE
 0x23

	)

1426 
	#HUB_GET_BUS_STATE
 0xA3

	)

1427 
	#HUB_GET_HUB_DESCRIPTOR
 0xA0

	)

1428 
	#HUB_GET_HUB_STATUS
 0xA0

	)

1429 
	#HUB_GET_PORT_STATUS
 0xA3

	)

1430 
	#HUB_SET_HUB_DESCRIPTOR
 0x20

	)

1431 
	#HUB_SET_HUB_FEATURE
 0x20

	)

1432 
	#HUB_SET_PORT_FEATURE
 0x23

	)

1436 #i‚de‡
HUB_PORT_RESET


1437 
	#HUB_C_HUB_LOCAL_POWER
 0

	)

1438 
	#HUB_C_HUB_OVER_CURRENT
 1

	)

1439 
	#HUB_PORT_CONNECTION
 0

	)

1440 
	#HUB_PORT_ENABLE
 1

	)

1441 
	#HUB_PORT_SUSPEND
 2

	)

1442 
	#HUB_PORT_OVER_CURRENT
 3

	)

1443 
	#HUB_PORT_RESET
 4

	)

1444 
	#HUB_PORT_POWER
 8

	)

1445 
	#HUB_PORT_LOW_SPEED
 9

	)

1446 
	#HUB_C_PORT_CONNECTION
 16

	)

1447 
	#HUB_C_PORT_ENABLE
 17

	)

1448 
	#HUB_C_PORT_SUSPEND
 18

	)

1449 
	#HUB_C_PORT_OVER_CURRENT
 19

	)

1450 
	#HUB_C_PORT_RESET
 20

	)

1454 #i‚de‡
USB_DESCR_TYP_DEVICE


1455 
	#USB_DESCR_TYP_DEVICE
 0x01

	)

1456 
	#USB_DESCR_TYP_CONFIG
 0x02

	)

1457 
	#USB_DESCR_TYP_STRING
 0x03

	)

1458 
	#USB_DESCR_TYP_INTERF
 0x04

	)

1459 
	#USB_DESCR_TYP_ENDP
 0x05

	)

1460 
	#USB_DESCR_TYP_QUALIF
 0x06

	)

1461 
	#USB_DESCR_TYP_SPEED
 0x07

	)

1462 
	#USB_DESCR_TYP_OTG
 0x09

	)

1463 
	#USB_DESCR_TYP_HID
 0x21

	)

1464 
	#USB_DESCR_TYP_REPORT
 0x22

	)

1465 
	#USB_DESCR_TYP_PHYSIC
 0x23

	)

1466 
	#USB_DESCR_TYP_CS_INTF
 0x24

	)

1467 
	#USB_DESCR_TYP_CS_ENDP
 0x25

	)

1468 
	#USB_DESCR_TYP_HUB
 0x29

	)

1472 #i‚de‡
USB_DEV_CLASS_HUB


1473 
	#USB_DEV_CLASS_RESERVED
 0x00

	)

1474 
	#USB_DEV_CLASS_AUDIO
 0x01

	)

1475 
	#USB_DEV_CLASS_COMMUNIC
 0x02

	)

1476 
	#USB_DEV_CLASS_HID
 0x03

	)

1477 
	#USB_DEV_CLASS_MONITOR
 0x04

	)

1478 
	#USB_DEV_CLASS_PHYSIC_IF
 0x05

	)

1479 
	#USB_DEV_CLASS_POWER
 0x06

	)

1480 
	#USB_DEV_CLASS_PRINTER
 0x07

	)

1481 
	#USB_DEV_CLASS_STORAGE
 0x08

	)

1482 
	#USB_DEV_CLASS_HUB
 0x09

	)

1483 
	#USB_DEV_CLASS_VEN_SPEC
 0xFF

	)

1487 #i‚de‡
USB_ENDP_TYPE_MASK


1488 
	#USB_ENDP_DIR_MASK
 0x80

	)

1489 
	#USB_ENDP_ADDR_MASK
 0x0F

	)

1490 
	#USB_ENDP_TYPE_MASK
 0x03

	)

1491 
	#USB_ENDP_TYPE_CTRL
 0x00

	)

1492 
	#USB_ENDP_TYPE_ISOCH
 0x01

	)

1493 
	#USB_ENDP_TYPE_BULK
 0x02

	)

1494 
	#USB_ENDP_TYPE_INTER
 0x03

	)

1497 #i‚de‡
USB_DEVICE_ADDR


1498 
	#USB_DEVICE_ADDR
 0x02

	)

1500 #i‚de‡
DEFAULT_ENDP0_SIZE


1501 
	#DEFAULT_ENDP0_SIZE
 8

	)

1503 #i‚de‡
MAX_PACKET_SIZE


1504 
	#MAX_PACKET_SIZE
 64

	)

1506 #i‚de‡
USB_BO_CBW_SIZE


1507 
	#USB_BO_CBW_SIZE
 0x1F

	)

1508 
	#USB_BO_CSW_SIZE
 0x0D

	)

1510 #i‚de‡
USB_BO_CBW_SIG


1511 
	#USB_BO_CBW_SIG
 0x43425355

	)

1512 
	#USB_BO_CSW_SIG
 0x53425355

	)

1515 #i‚de‡
__PACKED


1516 
	#__PACKED
 
	`__©åibuã__
((
∑cked
))

	)

1519 
__PACKED
 
	t_USB_SETUP_REQ
 {

1520 
UINT8
 
bReque°Ty≥
;

1521 
UINT8
 
bReque°
;

1522 
UINT16
 
wVÆue
;

1523 
UINT16
 
wIndex
;

1524 
UINT16
 
wLígth
;

1525 } 
	tUSB_SETUP_REQ
, *
	tPUSB_SETUP_REQ
;

1527 
__PACKED
 
	t_USB_DEVICE_DESCR
 {

1528 
UINT8
 
bLígth
;

1529 
UINT8
 
bDes¸ùt‹Ty≥
;

1530 
UINT16
 
bcdUSB
;

1531 
UINT8
 
bDevi˚Cœss
;

1532 
UINT8
 
bDevi˚SubCœss
;

1533 
UINT8
 
bDevi˚PrŸocﬁ
;

1534 
UINT8
 
bMaxPackëSize0
;

1535 
UINT16
 
idVíd‹
;

1536 
UINT16
 
idProdu˘
;

1537 
UINT16
 
bcdDevi˚
;

1538 
UINT8
 
iM™uÁ˘uªr
;

1539 
UINT8
 
iProdu˘
;

1540 
UINT8
 
iSîülNumbî
;

1541 
UINT8
 
bNumC⁄figuøti⁄s
;

1542 } 
	tUSB_DEV_DESCR
, *
	tPUSB_DEV_DESCR
;

1544 
__PACKED
 
	t_USB_CONFIG_DESCR
 {

1545 
UINT8
 
bLígth
;

1546 
UINT8
 
bDes¸ùt‹Ty≥
;

1547 
UINT16
 
wTŸÆLígth
;

1548 
UINT8
 
bNumI¡îÁ˚s
;

1549 
UINT8
 
bC⁄figuøti⁄VÆue
;

1550 
UINT8
 
iC⁄figuøti⁄
;

1551 
UINT8
 
bmAâribuãs
;

1552 
UINT8
 
MaxPowî
;

1553 } 
	tUSB_CFG_DESCR
, *
	tPUSB_CFG_DESCR
;

1555 
__PACKED
 
	t_USB_INTERF_DESCR
 {

1556 
UINT8
 
bLígth
;

1557 
UINT8
 
bDes¸ùt‹Ty≥
;

1558 
UINT8
 
bI¡îÁ˚Numbî
;

1559 
UINT8
 
bA…î«ãSëtög
;

1560 
UINT8
 
bNumEndpoöts
;

1561 
UINT8
 
bI¡îÁ˚Cœss
;

1562 
UINT8
 
bI¡îÁ˚SubCœss
;

1563 
UINT8
 
bI¡îÁ˚PrŸocﬁ
;

1564 
UINT8
 
iI¡îÁ˚
;

1565 } 
	tUSB_ITF_DESCR
, *
	tPUSB_ITF_DESCR
;

1567 
__PACKED
 
	t_USB_ENDPOINT_DESCR
 {

1568 
UINT8
 
bLígth
;

1569 
UINT8
 
bDes¸ùt‹Ty≥
;

1570 
UINT8
 
bEndpoötAddªss
;

1571 
UINT8
 
bmAâribuãs
;

1572 
UINT16
 
wMaxPackëSize
;

1573 
UINT8
 
bI¡îvÆ
;

1574 } 
	tUSB_ENDP_DESCR
, *
	tPUSB_ENDP_DESCR
;

1576 
__PACKED
 
	t_USB_CONFIG_DESCR_LONG
 {

1577 
USB_CFG_DESCR
 
cfg_des¸
;

1578 
USB_ITF_DESCR
 
ôf_des¸
;

1579 
USB_ENDP_DESCR
 
ídp_des¸
[1];

1580 } 
	tUSB_CFG_DESCR_LONG
, *
	tPUSB_CFG_DESCR_LONG
;

1582 
USB_CFG_DESCR_LONG
 *
	tPXUSB_CFG_DESCR_LONG
;

1584 
__PACKED
 
	t_USB_HUB_DESCR
 {

1585 
UINT8
 
bDescLígth
;

1586 
UINT8
 
bDes¸ùt‹Ty≥
;

1587 
UINT8
 
bNbrP‹ts
;

1588 
UINT8
 
wHubCh¨a˘îi°icsL
;

1589 
UINT8
 
wHubCh¨a˘îi°icsH
;

1590 
UINT8
 
bPwrOn2PwrGood
;

1591 
UINT8
 
bHubC⁄åCuºít
;

1592 
UINT8
 
Devi˚RemovabÀ
;

1593 
UINT8
 
P‹tPwrCålMask
;

1594 } 
	tUSB_HUB_DESCR
, *
	tPUSB_HUB_DESCR
;

1596 
USB_HUB_DESCR
 *
	tPXUSB_HUB_DESCR
;

1598 
__PACKED
 
	t_USB_HID_DESCR
 {

1599 
UINT8
 
bLígth
;

1600 
UINT8
 
bDes¸ùt‹Ty≥
;

1601 
UINT16
 
bcdHID
;

1602 
UINT8
 
bCou¡ryCode
;

1603 
UINT8
 
bNumDes¸ùt‹s
;

1604 
UINT8
 
bDes¸ùt‹Ty≥X
;

1605 
UINT8
 
wDes¸ùt‹LígthL
;

1606 
UINT8
 
wDes¸ùt‹LígthH
;

1607 } 
	tUSB_HID_DESCR
, *
	tPUSB_HID_DESCR
;

1609 
USB_HID_DESCR
 *
	tPXUSB_HID_DESCR
;

1611 
__PACKED
 
	t_UDISK_BOC_CBW
 {

1612 
UINT32
 
mCBW_Sig
;

1613 
UINT32
 
mCBW_Tag
;

1614 
UINT32
 
mCBW_D©aLí
;

1615 
UINT8
 
mCBW_Fœg
;

1616 
UINT8
 
mCBW_LUN
;

1617 
UINT8
 
mCBW_CB_Lí
;

1618 
UINT8
 
mCBW_CB_Buf
[16];

1619 } 
	tUDISK_BOC_CBW
, *
	tPUDISK_BOC_CBW
;

1621 
UDISK_BOC_CBW
 *
	tPXUDISK_BOC_CBW
;

1623 
__PACKED
 
	t_UDISK_BOC_CSW
 {

1624 
UINT32
 
mCSW_Sig
;

1625 
UINT32
 
mCSW_Tag
;

1626 
UINT32
 
mCSW_Residue
;

1627 
UINT8
 
mCSW_Sètus
;

1628 } 
	tUDISK_BOC_CSW
, *
	tPUDISK_BOC_CSW
;

1630 
UDISK_BOC_CSW
 *
	tPXUDISK_BOC_CSW
;

1632 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_adc.h

11 #i‚de‡
__CH57x_ADC_H__


12 
	#__CH57x_ADC_H__


	)

14 #ifde‡
__˝lu•lus


18 
	#ROM_CFG_TMP_25C
 0x7F014

	)

25 
CH_EXTIN_0
 = 0,

26 
CH_EXTIN_1
,

27 
CH_EXTIN_2
,

28 
CH_EXTIN_3
,

29 
CH_EXTIN_4
,

30 
CH_EXTIN_5
,

31 
CH_EXTIN_8
 = 8,

32 
CH_EXTIN_9
,

33 
CH_EXTIN_12
 = 12,

34 
CH_EXTIN_13
,

36 
CH_INTE_VBAT
 = 14,

37 
CH_INTE_VTEMP
 = 15,

39 } 
	tADC_SögÀCh™√lTy≥Def
;

46 
CH_DIFF_0_2
 = 0,

47 
CH_DIFF_1_3
,

49 } 
	tADC_DiffCh™√lTy≥Def
;

56 
Sam∂eFªq_3_2
 = 0,

57 
Sam∂eFªq_8
,

58 
Sam∂eFªq_5_33
,

59 
Sam∂eFªq_4
,

60 } 
	tADC_SampClkTy≥Def
;

67 
ADC_PGA_1_4
 = 0,

68 
ADC_PGA_1_2
,

69 
ADC_PGA_0
,

70 
ADC_PGA_2
,

71 } 
	tADC_Sig«lPGATy≥Def
;

78 
ADC_Mode_SögÀ
 = 0,

79 
ADC_Mode_LOOP
,

80 } 
	tADC_DMAModeTy≥Def
;

88 
	#ADC_Ch™√lCfg
(
d
Ë(
R8_ADC_CHANNEL
 = d)

	)

95 
	#ADC_SampClkCfg
(
d
Ë(
R8_ADC_CFG
 = R8_ADC_CFG & (~
RB_ADC_CLK_DIV
Ë| (d << 6))

	)

102 
	#ADC_PGACfg
(
d
Ë(
R8_ADC_CFG
 = R8_ADC_CFG & (~
RB_ADC_PGA_GAIN
Ë| (d << 4))

	)

109 
	#ADC_TempCÆibCfg
(
d
Ë(
R8_TEM_SENSOR
 = R8_TEM_SENSOR & (~
RB_TEM_SEN_CALIB
Ë| d)

	)

117 
ADC_ExtSögÀChSampInô
(
ADC_SampClkTy≥Def
 
•
, 
ADC_Sig«lPGATy≥Def
 
ga
);

125 
ADC_ExtDiffChSampInô
(
ADC_SampClkTy≥Def
 
•
, 
ADC_Sig«lPGATy≥Def
 
ga
);

130 
TouchKey_ChSampInô
();

135 
	#TouchKey_DißbÀTSPowî
(Ë(
R8_TKEY_CFG
 &~
RB_TKEY_PWR_ON
)

	)

140 
ADC_I¡îTSSampInô
();

145 
	#ADC_DißbÀTSPowî
(Ë(
R8_TEM_SENSOR
 = 0)

	)

150 
ADC_I¡îBATSampInô
();

157 
uöt16_t
 
ADC_ExcutSögÀC⁄vî
();

164 sig√d 
ADC_D©aCÆib_Rough
();

174 
uöt16_t
 
TouchKey_ExcutSögÀC⁄vî
(
uöt8_t
 
ch¨g
, uöt8_à
disch
);

181 
ADC_AutoC⁄vîCy˛e
(
uöt8_t
 
cy˛e
);

191 
ADC_DMACfg
(
uöt8_t
 
s
, 
uöt16_t
 
°¨tAddr
, uöt16_à
ídAddr
, 
ADC_DMAModeTy≥Def
 
m
);

200 
adc_to_ãm≥øtuª_˚lsius
(
uöt16_t
 
adc_vÆ
);

207 
	#ADC_RódC⁄vîVÆue
(Ë(
R16_ADC_DATA
)

	)

212 
	#ADC_SèπUp
(Ë(
R8_ADC_CONVERT
 = 
RB_ADC_START
)

	)

217 
	#ADC_GëITSètus
(Ë(
R8_ADC_INT_FLAG
 & 
RB_ADC_IF_EOC
)

	)

222 
	#ADC_CÀ¨ITFœg
(Ë(
R8_ADC_CONVERT
 = 0)

	)

227 
	#ADC_GëDMASètus
(Ë(
R8_ADC_DMA_IF
 & 
RB_ADC_IF_DMA_END
)

	)

232 
	#ADC_CÀ¨DMAFœg
(Ë(
R8_ADC_DMA_IF
 |
RB_ADC_IF_DMA_END
)

	)

237 
	#ADC_SèπDMA
(Ë(
R8_ADC_CTRL_DMA
 |
RB_ADC_AUTO_EN
)

	)

242 
	#ADC_St›DMA
(Ë(
R8_ADC_CTRL_DMA
 &~
RB_ADC_AUTO_EN
)

	)

247 
	#TouchKey_GëITSètus
(Ë(
R8_ADC_INT_FLAG
 & 
RB_ADC_IF_EOC
)

	)

252 
	#TouchKey_CÀ¨ITFœg
(Ë(
R8_TKEY_CTRL
 |
RB_TKEY_PWR_ON
)

	)

255 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_clk.h

11 #i‚de‡
__CH57x_CLK_H__


12 
	#__CH57x_CLK_H__


	)

14 #ifde‡
__˝lu•lus


23 
CLK_SOURCE_LSI
 = 0x00,

24 
CLK_SOURCE_LSE
,

26 
CLK_SOURCE_HSE_8MHz
 = 0x24,

27 
CLK_SOURCE_HSE_6_4MHz
 = 0x25,

28 
CLK_SOURCE_HSE_4MHz
 = 0x28,

29 
CLK_SOURCE_HSE_2MHz
 = (0x20 | 16),

30 
CLK_SOURCE_HSE_1MHz
 = (0x20 | 0),

32 
CLK_SOURCE_PLL_60MHz
 = 0x48,

33 
CLK_SOURCE_PLL_48MHz
 = (0x40 | 10),

34 
CLK_SOURCE_PLL_40MHz
 = (0x40 | 12),

35 
CLK_SOURCE_PLL_36_9MHz
 = (0x40 | 13),

36 
CLK_SOURCE_PLL_32MHz
 = (0x40 | 15),

37 
CLK_SOURCE_PLL_30MHz
 = (0x40 | 16),

38 
CLK_SOURCE_PLL_24MHz
 = (0x40 | 20),

39 
CLK_SOURCE_PLL_20MHz
 = (0x40 | 24),

40 
CLK_SOURCE_PLL_15MHz
 = (0x40 | 0),

41 } 
	tSYS_CLKTy≥Def
;

48 
Clk32K_LSI
 = 0,

49 
Clk32K_LSE
,

51 } 
	tLClk32KTy≥Def
;

58 
HSE_RCur_75
 = 0,

59 
HSE_RCur_100
,

60 
HSE_RCur_125
,

61 
HSE_RCur_150


63 } 
	tHSECuºítTy≥Def
;

70 
HSEC≠_10p
 = 0,

71 
HSEC≠_12p
,

72 
HSEC≠_14p
,

73 
HSEC≠_16p
,

74 
HSEC≠_18p
,

75 
HSEC≠_20p
,

76 
HSEC≠_22p
,

77 
HSEC≠_24p


79 } 
	tHSEC≠Ty≥Def
;

86 
LSE_RCur_70
 = 0,

87 
LSE_RCur_100
,

88 
LSE_RCur_140
,

89 
LSE_RCur_200


91 } 
	tLSECuºítTy≥Def
;

98 
LSEC≠_2p
 = 0,

99 
LSEC≠_13p
,

100 
LSEC≠_14p
,

101 
LSEC≠_15p
,

102 
LSEC≠_16p
,

103 
LSEC≠_17p
,

104 
LSEC≠_18p
,

105 
LSEC≠_19p
,

106 
LSEC≠_20p
,

107 
LSEC≠_21p
,

108 
LSEC≠_22p
,

109 
LSEC≠_23p
,

110 
LSEC≠_24p
,

111 
LSEC≠_25p
,

112 
LSEC≠_26p
,

113 
LSEC≠_27p


115 } 
	tLSEC≠Ty≥Def
;

117 
	#MAX_DAY
 0x00004000

	)

118 
	#MAX_2_SEC
 0x0000A8C0

	)

121 
	#BEGYEAR
 2020

	)

122 
	#IsLópYór
(
yr
Ë(!((yrË% 400Ë|| (((yrË% 100Ë&& !((yrË% 4)))

	)

123 
	#YórLígth
(
yr
Ë(
	`IsLópYór
(yrË? 366 : 365)

	)

124 
	#m⁄thLígth
(
Õyr
, 
m⁄
Ë((m⁄ =1Ë? (28 +ÜpyrË: ((m⁄ > 6Ë? ((m⁄ & 1Ë? 31 : 30Ë: ((m⁄ & 1Ë? 30 : 31)))

	)

131 
Pîiod_0_125_S
 = 0,

132 
Pîiod_0_25_S
,

133 
Pîiod_0_5_S
,

134 
Pîiod_1_S
,

135 
Pîiod_2_S
,

136 
Pîiod_4_S
,

137 
Pîiod_8_S
,

138 
Pîiod_16_S
,

139 } 
	tRTC_TMRCycTy≥Def
;

146 
RTC_TRIG_EVENT
 = 0,

147 
RTC_TMR_EVENT
,

149 } 
	tRTC_EVENTTy≥Def
;

156 
RTC_TRIG_MODE
 = 0,

157 
RTC_TMR_MODE
,

159 } 
	tRTC_MODETy≥Def
;

161 
uöt16_t
 
I¡32K_Tu√_FLASH
;

162 
uöt16_t
 
I¡32K_Tu√_RAM
;

169 
LClk32K_Sñe˘
(
LClk32KTy≥Def
 
hc
);

176 
HSECFG_Cuºít
(
HSECuºítTy≥Def
 
c
);

183 
HSECFG_C≠acô™˚
(
HSEC≠Ty≥Def
 
c
);

190 
LSECFG_Cuºít
(
LSECuºítTy≥Def
 
c
);

197 
LSECFG_C≠acô™˚
(
LSEC≠Ty≥Def
 
c
);

204 
uöt16_t
 
CÆibøti⁄_LSI_FLASH
();

211 
uöt16_t
 
CÆibøti⁄_LSI_RAM
();

216 
LSI_SëTu√_FLASH
();

221 
LSI_SëTu√_RAM
();

233 
RTC_InôTime
(
uöt16_t
 
y
, uöt16_à
m⁄
, uöt16_à
d
, uöt16_à
h
, uöt16_à
m
, uöt16_à
s
);

245 
RTC_GëTime
(
uöt16_t
 *
py
, uöt16_à*
pm⁄
, uöt16_à*
pd
, uöt16_à*
ph
, uöt16_à*
pm
, uöt16_à*
ps
);

252 
RTC_SëCy˛e32k
(
uöt32_t
 
cyc
);

259 
uöt32_t
 
RTC_GëCy˛e32k
();

266 
RTC_TRIGFunCfg
(
uöt32_t
 
cyc
);

273 
RTC_TMRFunCfg
(
RTC_TMRCycTy≥Def
 
t
);

280 
RTC_ModeFunDißbÀ
(
RTC_MODETy≥Def
 
m
);

289 
uöt8_t
 
RTC_GëITFœg
(
RTC_EVENTTy≥Def
 
f
);

296 
RTC_CÀ¨ITFœg
(
RTC_EVENTTy≥Def
 
f
);

298 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_common.h

11 #i‚de‡
__CH57x_COMM_H__


12 
	#__CH57x_COMM_H__


	)

14 #ifde‡
__˝lu•lus


18 #i‚de‡
NULL


19 
	#NULL
 0

	)

21 
	#ALL
 0xFFFF

	)

23 
	#Debug_UART0
 0

	)

24 
	#Debug_UART1
 1

	)

25 
	#Debug_UART2
 2

	)

26 
	#Debug_UART3
 3

	)

28 #ifde‡
DEBUG


29 
	~<°dio.h
>

35 #i‚de‡
FREQ_SYS


36 
	#FREQ_SYS
 60000000

	)

42 #ifde‡
CLK_OSC32K


43 #i‡–
CLK_OSC32K
 == 1 )

44 
	#CAB_LSIFQ
 32000

	)

46 
	#CAB_LSIFQ
 32768

	)

49 
	#CAB_LSIFQ
 32000

	)

52 
	~<°rög.h
>

53 
	~<°döt.h
>

54 
	~"CH573SFR.h
"

55 
	~"c‹e_riscv.h
"

56 
	~"CH57x_˛k.h
"

57 
	~"CH57x_u¨t.h
"

58 
	~"CH57x_gpio.h
"

59 
	~"CH57x_Êash.h
"

60 
	~"CH57x_pwr.h
"

61 
	~"CH57x_pwm.h
"

62 
	~"CH57x_adc.h
"

63 
	~"CH57x_sys.h
"

64 
	~"CH57x_timî.h
"

65 
	~"CH57x_•i.h
"

66 
	~"CH57x_usbdev.h
"

67 
	~"CH57x_usbho°.h
"

68 
	~"ISP573.h
"

70 
	#DñayMs
(
x
Ë
	`mDñaymS
(x)

	)

71 
	#DñayUs
(
x
Ë
	`mDñayuS
(x)

	)

73 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_flash.h

11 #i‚de‡
__CH57x_FLASH_H__


12 
	#__CH57x_FLASH_H__


	)

14 #ifde‡
__˝lu•lus


25 
FLASH_ROM_READ
(
uöt32_t
 
SèπAddr
, *
Buf„r
, uöt32_à
Àn
);

27 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_gpio.h

11 #i‚de‡
__CH57x_GPIO_H__


12 
	#__CH57x_GPIO_H__


	)

14 #ifde‡
__˝lu•lus


21 
	#GPIO_Pö_0
 (0x00000001Ë

	)

22 
	#GPIO_Pö_1
 (0x00000002Ë

	)

23 
	#GPIO_Pö_2
 (0x00000004Ë

	)

24 
	#GPIO_Pö_3
 (0x00000008Ë

	)

25 
	#GPIO_Pö_4
 (0x00000010Ë

	)

26 
	#GPIO_Pö_5
 (0x00000020Ë

	)

27 
	#GPIO_Pö_6
 (0x00000040Ë

	)

28 
	#GPIO_Pö_7
 (0x00000080Ë

	)

29 
	#GPIO_Pö_8
 (0x00000100Ë

	)

30 
	#GPIO_Pö_9
 (0x00000200Ë

	)

31 
	#GPIO_Pö_10
 (0x00000400Ë

	)

32 
	#GPIO_Pö_11
 (0x00000800Ë

	)

33 
	#GPIO_Pö_12
 (0x00001000Ë

	)

34 
	#GPIO_Pö_13
 (0x00002000Ë

	)

35 
	#GPIO_Pö_14
 (0x00004000Ë

	)

36 
	#GPIO_Pö_15
 (0x00008000Ë

	)

37 
	#GPIO_Pö_16
 (0x00010000Ë

	)

38 
	#GPIO_Pö_17
 (0x00020000Ë

	)

39 
	#GPIO_Pö_18
 (0x00040000Ë

	)

40 
	#GPIO_Pö_19
 (0x00080000Ë

	)

41 
	#GPIO_Pö_20
 (0x00100000Ë

	)

42 
	#GPIO_Pö_21
 (0x00200000Ë

	)

43 
	#GPIO_Pö_22
 (0x00400000Ë

	)

44 
	#GPIO_Pö_23
 (0x00800000Ë

	)

45 
	#GPIO_Pö_AŒ
 (0xFFFFFFFFË

	)

52 
GPIO_ModeIN_Flﬂtög
,

53 
GPIO_ModeIN_PU
,

54 
GPIO_ModeIN_PD
,

55 
GPIO_ModeOut_PP_5mA
,

56 
GPIO_ModeOut_PP_20mA
,

58 } 
	tGPIOModeTy≥Def
;

65 
GPIO_ITMode_LowLevñ
,

66 
GPIO_ITMode_HighLevñ
,

67 
GPIO_ITMode_FÆlEdge
,

68 
GPIO_ITMode_Ri£Edge
,

70 } 
	tGPIOITModeTpDef
;

78 
GPIOA_ModeCfg
(
uöt32_t
 
pö
, 
GPIOModeTy≥Def
 
mode
);

86 
GPIOB_ModeCfg
(
uöt32_t
 
pö
, 
GPIOModeTy≥Def
 
mode
);

93 
	#GPIOA_Re£tBôs
(
pö
Ë(
R32_PA_CLR
 |pö)

	)

100 
	#GPIOA_SëBôs
(
pö
Ë(
R32_PA_OUT
 |pö)

	)

107 
	#GPIOB_Re£tBôs
(
pö
Ë(
R32_PB_CLR
 |pö)

	)

114 
	#GPIOB_SëBôs
(
pö
Ë(
R32_PB_OUT
 |pö)

	)

121 
	#GPIOA_Invî£Bôs
(
pö
Ë(
R32_PA_OUT
 ^pö)

	)

128 
	#GPIOB_Invî£Bôs
(
pö
Ë(
R32_PB_OUT
 ^pö)

	)

135 
	#GPIOA_RódP‹t
(Ë(
R32_PA_PIN
)

	)

142 
	#GPIOB_RódP‹t
(Ë(
R32_PB_PIN
)

	)

151 
	#GPIOA_RódP‹tPö
(
pö
Ë(
R32_PA_PIN
 & (pö))

	)

160 
	#GPIOB_RódP‹tPö
(
pö
Ë(
R32_PB_PIN
 & (pö))

	)

168 
GPIOA_ITModeCfg
(
uöt32_t
 
pö
, 
GPIOITModeTpDef
 
mode
);

176 
GPIOB_ITModeCfg
(
uöt32_t
 
pö
, 
GPIOITModeTpDef
 
mode
);

183 
	#GPIOA_RódITFœgP‹t
(Ë(
R16_PA_INT_IF
)

	)

190 
	#GPIOB_RódITFœgP‹t
(Ë((
R16_PB_INT_IF
 & (~((
GPIO_Pö_22
 | 
GPIO_Pö_23
Ë>> 14))Ë| ((R16_PB_INT_IF << 14Ë& (GPIO_Pö_22 | GPIO_Pö_23)))

	)

199 
	#GPIOA_RódITFœgBô
(
pö
Ë(
R16_PA_INT_IF
 & (pö))

	)

208 
	#GPIOB_RódITFœgBô
(
pö
Ë(
R16_PB_INT_IF
 & (’öË| ((’öË& (
GPIO_Pö_22
 | 
GPIO_Pö_23
)Ë>> 14)))

	)

215 
	#GPIOA_CÀ¨ITFœgBô
(
pö
Ë(
R16_PA_INT_IF
 =Öö)

	)

222 
	#GPIOB_CÀ¨ITFœgBô
(
pö
Ë(
R16_PB_INT_IF
 = (’öË| ((’öË& (
GPIO_Pö_22
 | 
GPIO_Pö_23
)Ë>> 14)))

	)

235 
GPIOPöRem≠
(
Fun˘i⁄ÆSèã
 
s
, 
uöt16_t
 
≥Ωh
);

258 
GPIOAGPPCfg
(
Fun˘i⁄ÆSèã
 
s
, 
uöt16_t
 
≥Ωh
);

260 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_pwm.h

11 #i‚de‡
__CH57x_PWM_H__


12 
	#__CH57x_PWM_H__


	)

14 #ifde‡
__˝lu•lus


21 
	#CH_PWM4
 0x01

22 
	#CH_PWM5
 0x02

23 
	#CH_PWM6
 0x04

24 
	#CH_PWM7
 0x08

25 
	#CH_PWM8
 0x10

26 
	#CH_PWM9
 0x20

27 
	#CH_PWM10
 0x40

28 
	#CH_PWM11
 0x80

29 

	)

35 
High_Levñ
 = 0,

36 
Low_Levñ
,

37 } 
	tPWMX_Pﬁ¨Ty≥Def
;

44 
PWMX_Cy˛e_256
 = 0,

45 
PWMX_Cy˛e_255
,

46 
PWMX_Cy˛e_128
,

47 
PWMX_Cy˛e_127
,

48 
PWMX_Cy˛e_64
,

49 
PWMX_Cy˛e_63
,

50 
PWMX_Cy˛e_32
,

51 
PWMX_Cy˛e_31
,

52 } 
	tPWMX_Cy˛eTy≥Def
;

59 
	#PWMX_CLKCfg
(
d
Ë(
R8_PWM_CLOCK_DIV
 = d)

	)

66 
PWMX_Cy˛eCfg
(
PWMX_Cy˛eTy≥Def
 
cyc
);

73 
	#PWM4_A˘D©aWidth
(
d
Ë(
R8_PWM4_DATA
 = d)

	)

80 
	#PWM5_A˘D©aWidth
(
d
Ë(
R8_PWM5_DATA
 = d)

	)

87 
	#PWM6_A˘D©aWidth
(
d
Ë(
R8_PWM6_DATA
 = d)

	)

94 
	#PWM7_A˘D©aWidth
(
d
Ë(
R8_PWM7_DATA
 = d)

	)

101 
	#PWM8_A˘D©aWidth
(
d
Ë(
R8_PWM8_DATA
 = d)

	)

108 
	#PWM9_A˘D©aWidth
(
d
Ë(
R8_PWM9_DATA
 = d)

	)

115 
	#PWM10_A˘D©aWidth
(
d
Ë(
R8_PWM10_DATA
 = d)

	)

122 
	#PWM11_A˘D©aWidth
(
d
Ë(
R8_PWM11_DATA
 = d)

	)

132 
PWMX_ACTOUT
(
uöt8_t
 
ch
, uöt8_à
da
, 
PWMX_Pﬁ¨Ty≥Def
 
¥
, 
Fun˘i⁄ÆSèã
 
s
);

144 
PWMX_A…îOutCfg
(
uöt8_t
 
ch
, 
Fun˘i⁄ÆSèã
 
s
);

146 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_pwr.h

11 #i‚de‡
__CH57x_PWR_H__


12 
	#__CH57x_PWR_H__


	)

14 #ifde‡
__˝lu•lus


18 
	#ROM_CFG_ADR_HW
 0x7F00C

19 

	)

23 
	#BIT_SLP_CLK_TMR0
 (0x00000001Ë

	)

24 
	#BIT_SLP_CLK_TMR1
 (0x00000002Ë

	)

25 
	#BIT_SLP_CLK_TMR2
 (0x00000004Ë

	)

26 
	#BIT_SLP_CLK_TMR3
 (0x00000008Ë

	)

27 
	#BIT_SLP_CLK_UART0
 (0x00000010Ë

	)

28 
	#BIT_SLP_CLK_UART1
 (0x00000020Ë

	)

29 
	#BIT_SLP_CLK_UART2
 (0x00000040Ë

	)

30 
	#BIT_SLP_CLK_UART3
 (0x00000080Ë

	)

31 
	#BIT_SLP_CLK_SPI0
 (0x00000100Ë

	)

33 
	#BIT_SLP_CLK_PWMX
 (0x00000400Ë

	)

35 
	#BIT_SLP_CLK_USB
 (0x00001000Ë

	)

38 
	#BIT_SLP_CLK_BLE
 (0x00008000Ë

	)

40 
	#BIT_SLP_CLK_RAMX
 (0x10000000Ë

	)

41 
	#BIT_SLP_CLK_RAM2K
 (0x20000000Ë

	)

42 
	#BIT_SLP_CLK_ALL
 (0x3000FFFFË

	)

47 
	#UNIT_SYS_LSE
 
RB_CLK_XT32K_PON


48 
	#UNIT_SYS_LSI
 
RB_CLK_INT32K_PON


49 
	#UNIT_SYS_HSE
 
RB_CLK_XT32M_PON


50 
	#UNIT_SYS_PLL
 
RB_CLK_PLL_PON


51 

	)

57 
Edge_L⁄gDñay
 = 0,

58 
Edge_Sh‹tDñay
,

59 
Levñ_L⁄gDñay
,

60 
Levñ_Sh‹tDñay
,

62 } 
	tWakeUP_Modey≥Def
;

70 
HALevñ_1V9
 = 0,

71 
HALevñ_2V1
,

72 
HALevñ_2V3
,

73 
HALevñ_2V5
,

76 
LPLevñ_1V8
 = 0x80,

77 
LPLevñ_1V9
,

78 
LPLevñ_2V0
,

79 
LPLevñ_2V1
,

80 
LPLevñ_2V2
,

81 
LPLevñ_2V3
,

82 
LPLevñ_2V4
,

83 
LPLevñ_2V5
,

85 } 
	tVﬁM_Levñy≥Def
;

92 
PWR_DCDCCfg
(
Fun˘i⁄ÆSèã
 
s
);

100 
PWR_UnôModCfg
(
Fun˘i⁄ÆSèã
 
s
, 
uöt8_t
 
unô
);

108 
PWR_PîùhClkCfg
(
Fun˘i⁄ÆSèã
 
s
, 
uöt16_t
 
≥Ωh
);

121 
PWR_PîùhWakeUpCfg
(
Fun˘i⁄ÆSèã
 
s
, 
uöt8_t
 
≥Ωh
, 
WakeUP_Modey≥Def
 
mode
);

129 
PowîM⁄ô‹
(
Fun˘i⁄ÆSèã
 
s
, 
VﬁM_Levñy≥Def
 
vl
);

134 
LowPowî_IdÀ
();

139 
LowPowî_HÆt
();

152 
LowPowî_SÀï
(
uöt8_t
 
rm
);

163 
LowPowî_Shutdown
(
uöt8_t
 
rm
);

165 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_spi.h

11 #i‚de‡
__CH57x_SPI_H__


12 
	#__CH57x_SPI_H__


	)

14 #ifde‡
__˝lu•lus


21 
	#SPI0_IT_FST_BYTE
 
RB_SPI_IE_FST_BYTE


22 
	#SPI0_IT_FIFO_OV
 
RB_SPI_IE_FIFO_OV


23 
	#SPI0_IT_DMA_END
 
RB_SPI_IE_DMA_END


24 
	#SPI0_IT_FIFO_HF
 
RB_SPI_IE_FIFO_HF


25 
	#SPI0_IT_BYTE_END
 
RB_SPI_IE_BYTE_END


26 
	#SPI0_IT_CNT_END
 
RB_SPI_IE_CNT_END


27 

	)

33 
Mode0_LowBôINFr⁄t
 = 0,

34 
Mode0_HighBôINFr⁄t
,

35 
Mode3_LowBôINFr⁄t
,

36 
Mode3_HighBôINFr⁄t
,

37 } 
	tModeBôOrdîTy≥Def
;

44 
Mode_D©aSåóm
 = 0,

45 
Mo£_Fú°Cmd
,

46 } 
	tSœve_ModeTy≥Def
;

51 
SPI0_Ma°îDefInô
();

58 
SPI0_CLKCfg
(
uöt8_t
 
c
);

65 
SPI0_D©aMode
(
ModeBôOrdîTy≥Def
 
m
);

72 
SPI0_Ma°îSídByã
(
uöt8_t
 
d
);

79 
uöt8_t
 
SPI0_Ma°îRecvByã
();

87 
SPI0_Ma°îTøns
(
uöt8_t
 *
pbuf
, 
uöt16_t
 
Àn
);

95 
SPI0_Ma°îRecv
(
uöt8_t
 *
pbuf
, 
uöt16_t
 
Àn
);

103 
SPI0_Ma°îDMATøns
(
uöt8_t
 *
pbuf
, 
uöt16_t
 
Àn
);

111 
SPI0_Ma°îDMARecv
(
uöt8_t
 *
pbuf
, 
uöt16_t
 
Àn
);

116 
SPI0_SœveInô
();

123 
	#SëFú°D©a
(
d
Ë(
R8_SPI0_SLAVE_PRE
 = d)

	)

130 
SPI0_SœveSídByã
(
uöt8_t
 
d
);

137 
uöt8_t
 
SPI0_SœveRecvByã
();

145 
SPI0_SœveTøns
(
uöt8_t
 *
pbuf
, 
uöt16_t
 
Àn
);

153 
SPI0_SœveRecv
(
uöt8_t
 *
pbuf
, 
uöt16_t
 
Àn
);

161 
SPI0_SœveDMATøns
(
uöt8_t
 *
pbuf
, 
uöt16_t
 
Àn
);

169 
SPI0_SœveDMARecv
(
uöt8_t
 *
pbuf
, 
uöt16_t
 
Àn
);

177 
	#SPI0_ITCfg
(
s
, 
f
Ë((sË? (
R8_SPI0_INTER_EN
 |fË: (R8_SPI0_INTER_EN &~f))

	)

184 
	#SPI0_GëITFœg
(
f
Ë(
R8_SPI0_INT_FLAG
 & f)

	)

191 
	#SPI0_CÀ¨ITFœg
(
f
Ë(
R8_SPI0_INT_FLAG
 = f)

	)

193 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_sys.h

11 #i‚de‡
__CH57x_SYS_H__


12 
	#__CH57x_SYS_H__


	)

14 #ifde‡
__˝lu•lus


23 
RST_STATUS_SW
 = 0,

24 
RST_STATUS_RPOR
,

25 
RST_STATUS_WTR
,

26 
RST_STATUS_MR
,

27 
RST_STATUS_LRM0
,

28 
RST_STATUS_GPWSM
,

29 
RST_STATUS_LRM1
,

30 
RST_STATUS_LRM2
,

32 } 
	tSYS_Re£tSèTy≥Def
;

39 
INFO_ROM_READ
 = 0,

40 
INFO_RESET_EN
 = 2,

41 
INFO_BOOT_EN
,

42 
INFO_DEBUG_EN
,

43 
INFO_LOADER
,

44 
STA_SAFEACC_ACT
,

46 } 
	tSYS_InfoSèTy≥Def
;

51 
	#SYS_GëChùID
(Ë
R8_CHIP_ID


	)

56 
	#SYS_GëAc˚ssID
(Ë
R8_SAFE_ACCESS_ID


	)

63 
SëSysClock
(
SYS_CLKTy≥Def
 
sc
);

70 
uöt32_t
 
GëSysClock
();

79 
uöt8_t
 
SYS_GëInfoSè
(
SYS_InfoSèTy≥Def
 
i
);

86 
	#SYS_GëLa°Re£tSè
(Ë(
R8_RESET_STATUS
 & 
RB_RESET_FLAG
)

	)

91 
SYS_Re£tExecuã
();

98 
	#SYS_Re£tKìpBuf
(
d
Ë(
R8_GLOB_RESET_KEEP
 = d)

	)

105 
SYS_DißbÀAŒIrq
(
uöt32_t
 *
púqv
);

112 
SYS_RecovîIrq
(
uöt32_t
 
úq_°©us
);

119 
uöt32_t
 
SYS_GëSysTickC¡
();

126 
	#WWDG_SëCou¡î
(
c
Ë(
R8_WDOG_COUNT
 = c)

	)

133 
WWDG_ITCfg
(
Fun˘i⁄ÆSèã
 
s
);

140 
WWDG_Re£tCfg
(
Fun˘i⁄ÆSèã
 
s
);

147 
	#WWDG_GëFlowFœg
(Ë(
R8_RST_WDOG_CTRL
 & 
RB_WDOG_INT_FLAG
)

	)

152 
WWDG_CÀ¨Fœg
();

159 
mDñayuS
(
uöt16_t
 
t
);

166 
mDñaymS
(
uöt16_t
 
t
);

169 
__©åibuã__
((
Æways_ölöe
)Ë
ölöe
 
sys_ß„_ac˚ss_íabÀ
()

171 
R8_SAFE_ACCESS_SIG
 = 
SAFE_ACCESS_SIG1
;

172 
R8_SAFE_ACCESS_SIG
 = 
SAFE_ACCESS_SIG2
;

175 
__©åibuã__
((
Æways_ölöe
)Ë
ölöe
 
sys_ß„_ac˚ss_dißbÀ
()

177 
R8_SAFE_ACCESS_SIG
 = 0;

180 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_timer.h

11 #i‚de‡
__CH57x_TIMER_H__


12 
	#__CH57x_TIMER_H__


	)

14 #ifde‡
__˝lu•lus


18 
	#D©aBô_25
 (1 << 25)

	)

24 
	#TMR0_3_IT_CYC_END
 0x01

25 
	#TMR0_3_IT_DATA_ACT
 0x02

26 
	#TMR0_3_IT_FIFO_HF
 0x04

27 
	#TMR1_2_IT_DMA_END
 0x08

28 
	#TMR0_3_IT_FIFO_OV
 0x10

29 

	)

35 
PWM_Times_1
 = 0,

36 
PWM_Times_4
,

37 
PWM_Times_8
,

38 
PWM_Times_16
,

39 } 
	tPWM_RïótTsTy≥Def
;

46 
CAP_NULL
 = 0,

47 
Edge_To_Edge
,

48 
FÆlEdge_To_FÆlEdge
,

49 
Ri£Edge_To_Ri£Edge
,

50 } 
	tC≠ModeTy≥Def
;

57 
Mode_SögÀ
 = 0,

58 
Mode_LOOP
,

59 } 
	tDMAModeTy≥Def
;

66 
TMR0_TimîInô
(
uöt32_t
 
t
);

73 
	#TMR0_GëCuºítTimî
(Ë
R32_TMR0_COUNT


	)

80 
TMR0_EXTSögÀCou¡îInô
(
C≠ModeTy≥Def
 
ˇp
);

87 
	#TMR0_Cou¡OvîÊowCfg
(
cyc
Ë(
R32_TMR0_CNT_END
 = (cy¯+ 2))

	)

94 
	#TMR0_GëCuºítCou¡
(Ë
R32_TMR0_COUNT


	)

101 
	#TMR0_PWMCy˛eCfg
(
cyc
Ë(
R32_TMR0_CNT_END
 = cyc)

	)

109 
TMR0_PWMInô
(
PWMX_Pﬁ¨Ty≥Def
 
¥
, 
PWM_RïótTsTy≥Def
 
ts
);

116 
	#TMR0_PWMA˘D©aWidth
(
d
Ë(
R32_TMR0_FIFO
 = d)

	)

123 
	#TMR0_CAPTimeoutCfg
(
cyc
Ë(
R32_TMR0_CNT_END
 = cyc)

	)

130 
TMR0_C≠Inô
(
C≠ModeTy≥Def
 
ˇp
);

137 
	#TMR0_CAPGëD©a
(Ë
R32_TMR0_FIFO


	)

144 
	#TMR0_CAPD©aCou¡î
(Ë
R8_TMR0_FIFO_COUNT


	)

149 
	#TMR0_DißbÀ
(Ë(
R8_TMR0_CTRL_MOD
 &~
RB_TMR_COUNT_EN
)

	)

154 
	#TMR0_E«bÀ
(Ë(
R8_TMR0_CTRL_MOD
 |
RB_TMR_COUNT_EN
)

	)

162 
	#TMR0_ITCfg
(
s
, 
f
Ë((sË? (
R8_TMR0_INTER_EN
 |fË: (R8_TMR0_INTER_EN &~f))

	)

169 
	#TMR0_CÀ¨ITFœg
(
f
Ë(
R8_TMR0_INT_FLAG
 = f)

	)

176 
	#TMR0_GëITFœg
(
f
Ë(
R8_TMR0_INT_FLAG
 & f)

	)

183 
TMR1_TimîInô
(
uöt32_t
 
t
);

190 
	#TMR1_GëCuºítTimî
(Ë
R32_TMR1_COUNT


	)

197 
TMR1_EXTSögÀCou¡îInô
(
C≠ModeTy≥Def
 
ˇp
);

204 
	#TMR1_Cou¡OvîÊowCfg
(
cyc
Ë(
R32_TMR1_CNT_END
 = (cy¯+ 2))

	)

211 
	#TMR1_GëCuºítCou¡
(Ë
R32_TMR1_COUNT


	)

218 
	#TMR1_PWMCy˛eCfg
(
cyc
Ë(
R32_TMR1_CNT_END
 = cyc)

	)

226 
TMR1_PWMInô
(
PWMX_Pﬁ¨Ty≥Def
 
¥
, 
PWM_RïótTsTy≥Def
 
ts
);

233 
	#TMR1_PWMA˘D©aWidth
(
d
Ë(
R32_TMR1_FIFO
 = d)

	)

240 
	#TMR1_CAPTimeoutCfg
(
cyc
Ë(
R32_TMR1_CNT_END
 = cyc)

	)

247 
TMR1_C≠Inô
(
C≠ModeTy≥Def
 
ˇp
);

254 
	#TMR1_CAPGëD©a
(Ë
R32_TMR1_FIFO


	)

261 
	#TMR1_CAPD©aCou¡î
(Ë
R8_TMR1_FIFO_COUNT


	)

271 
TMR1_DMACfg
(
uöt8_t
 
s
, 
uöt16_t
 
°¨tAddr
, uöt16_à
ídAddr
, 
DMAModeTy≥Def
 
m
);

276 
	#TMR1_DißbÀ
(Ë(
R8_TMR1_CTRL_MOD
 &~
RB_TMR_COUNT_EN
)

	)

281 
	#TMR1_E«bÀ
(Ë(
R8_TMR1_CTRL_MOD
 |
RB_TMR_COUNT_EN
)

	)

289 
	#TMR1_ITCfg
(
s
, 
f
Ë((sË? (
R8_TMR1_INTER_EN
 |fË: (R8_TMR1_INTER_EN &~f))

	)

296 
	#TMR1_CÀ¨ITFœg
(
f
Ë(
R8_TMR1_INT_FLAG
 = f)

	)

303 
	#TMR1_GëITFœg
(
f
Ë(
R8_TMR1_INT_FLAG
 & f)

	)

310 
TMR2_TimîInô
(
uöt32_t
 
t
);

317 
	#TMR2_GëCuºítTimî
(Ë
R32_TMR2_COUNT


	)

324 
TMR2_EXTSögÀCou¡îInô
(
C≠ModeTy≥Def
 
ˇp
);

331 
	#TMR2_Cou¡OvîÊowCfg
(
cyc
Ë(
R32_TMR2_CNT_END
 = (cy¯+ 2))

	)

338 
	#TMR2_GëCuºítCou¡
(Ë
R32_TMR2_COUNT


	)

345 
	#TMR2_PWMCy˛eCfg
(
cyc
Ë(
R32_TMR2_CNT_END
 = cyc)

	)

353 
TMR2_PWMInô
(
PWMX_Pﬁ¨Ty≥Def
 
¥
, 
PWM_RïótTsTy≥Def
 
ts
);

360 
	#TMR2_PWMA˘D©aWidth
(
d
Ë(
R32_TMR2_FIFO
 = d)

	)

367 
	#TMR2_CAPTimeoutCfg
(
cyc
Ë(
R32_TMR2_CNT_END
 = cyc)

	)

374 
TMR2_C≠Inô
(
C≠ModeTy≥Def
 
ˇp
);

381 
	#TMR2_CAPGëD©a
(Ë
R32_TMR2_FIFO


	)

388 
	#TMR2_CAPD©aCou¡î
(Ë
R8_TMR2_FIFO_COUNT


	)

398 
TMR2_DMACfg
(
uöt8_t
 
s
, 
uöt16_t
 
°¨tAddr
, uöt16_à
ídAddr
, 
DMAModeTy≥Def
 
m
);

403 
	#TMR2_DißbÀ
(Ë(
R8_TMR2_CTRL_MOD
 &~
RB_TMR_COUNT_EN
)

	)

408 
	#TMR2_E«bÀ
(Ë(
R8_TMR2_CTRL_MOD
 |
RB_TMR_COUNT_EN
)

	)

416 
	#TMR2_ITCfg
(
s
, 
f
Ë((sË? (
R8_TMR2_INTER_EN
 |fË: (R8_TMR2_INTER_EN &~f))

	)

423 
	#TMR2_CÀ¨ITFœg
(
f
Ë(
R8_TMR2_INT_FLAG
 = f)

	)

430 
	#TMR2_GëITFœg
(
f
Ë(
R8_TMR2_INT_FLAG
 & f)

	)

437 
TMR3_TimîInô
(
uöt32_t
 
t
);

444 
	#TMR3_GëCuºítTimî
(Ë
R32_TMR3_COUNT


	)

451 
TMR3_EXTSögÀCou¡îInô
(
C≠ModeTy≥Def
 
ˇp
);

458 
	#TMR3_Cou¡OvîÊowCfg
(
cyc
Ë(
R32_TMR3_CNT_END
 = (cy¯+ 2))

	)

465 
	#TMR3_GëCuºítCou¡
(Ë
R32_TMR3_COUNT


	)

472 
	#TMR3_PWMCy˛eCfg
(
cyc
Ë(
R32_TMR3_CNT_END
 = cyc)

	)

480 
TMR3_PWMInô
(
PWMX_Pﬁ¨Ty≥Def
 
¥
, 
PWM_RïótTsTy≥Def
 
ts
);

487 
	#TMR3_PWMA˘D©aWidth
(
d
Ë(
R32_TMR3_FIFO
 = d)

	)

494 
	#TMR3_CAPTimeoutCfg
(
cyc
Ë(
R32_TMR3_CNT_END
 = cyc)

	)

501 
TMR3_C≠Inô
(
C≠ModeTy≥Def
 
ˇp
);

508 
	#TMR3_CAPGëD©a
(Ë
R32_TMR3_FIFO


	)

515 
	#TMR3_CAPD©aCou¡î
(Ë
R8_TMR3_FIFO_COUNT


	)

520 
	#TMR3_DißbÀ
(Ë(
R8_TMR3_CTRL_MOD
 &~
RB_TMR_COUNT_EN
)

	)

525 
	#TMR3_E«bÀ
(Ë(
R8_TMR3_CTRL_MOD
 |
RB_TMR_COUNT_EN
)

	)

533 
	#TMR3_ITCfg
(
s
, 
f
Ë((sË? (
R8_TMR3_INTER_EN
 |fË: (R8_TMR3_INTER_EN &~f))

	)

540 
	#TMR3_CÀ¨ITFœg
(
f
Ë(
R8_TMR3_INT_FLAG
 = f)

	)

547 
	#TMR3_GëITFœg
(
f
Ë(
R8_TMR3_INT_FLAG
 & f)

	)

549 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_uart.h

11 #i‚de‡
__CH57x_UART_H__


12 
	#__CH57x_UART_H__


	)

14 #ifde‡
__˝lu•lus


21 
	#STA_ERR_BREAK
 
RB_LSR_BREAK_ERR


22 
	#STA_ERR_FRAME
 
RB_LSR_FRAME_ERR


23 
	#STA_ERR_PAR
 
RB_LSR_PAR_ERR


24 
	#STA_ERR_FIFOOV
 
RB_LSR_OVER_ERR


25 

	)

26 
	#STA_TXFIFO_EMP
 
RB_LSR_TX_FIFO_EMP


27 
	#STA_TXALL_EMP
 
RB_LSR_TX_ALL_EMP


28 
	#STA_RECV_DATA
 
RB_LSR_DATA_RDY


29 

	)

35 
UART_1BYTE_TRIG
 = 0,

36 
UART_2BYTE_TRIG
,

37 
UART_4BYTE_TRIG
,

38 
UART_7BYTE_TRIG
,

40 } 
	tUARTByãTRIGTy≥Def
;

45 
UART0_DefInô
();

52 
UART0_BaudR©eCfg
(
uöt32_t
 
baudøã
);

59 
UART0_ByãTrigCfg
(
UARTByãTRIGTy≥Def
 
b
);

71 
UART0_INTCfg
(
Fun˘i⁄ÆSèã
 
s
, 
uöt8_t
 
i
);

76 
UART0_Re£t
();

81 
	#UART0_CLR_RXFIFO
(Ë(
R8_UART0_FCR
 |
RB_FCR_RX_FIFO_CLR
)

	)

86 
	#UART0_CLR_TXFIFO
(Ë(
R8_UART0_FCR
 |
RB_FCR_TX_FIFO_CLR
)

	)

93 
	#UART0_GëITFœg
(Ë(
R8_UART0_IIR
 & 
RB_IIR_INT_MASK
)

	)

100 
	#UART0_GëLöSTA
(Ë(
R8_UART0_LSR
)

	)

107 
	#UART0_SídByã
(
b
Ë(
R8_UART0_THR
 = b)

	)

115 
UART0_SídSåög
(
uöt8_t
 *
buf
, 
uöt16_t
 
l
);

122 
	#UART0_RecvByã
(Ë(
R8_UART0_RBR
)

	)

131 
uöt16_t
 
UART0_RecvSåög
(
uöt8_t
 *
buf
);

136 
UART1_DefInô
();

143 
UART1_BaudR©eCfg
(
uöt32_t
 
baudøã
);

150 
UART1_ByãTrigCfg
(
UARTByãTRIGTy≥Def
 
b
);

162 
UART1_INTCfg
(
Fun˘i⁄ÆSèã
 
s
, 
uöt8_t
 
i
);

167 
UART1_Re£t
();

172 
	#UART1_CLR_RXFIFO
(Ë(
R8_UART1_FCR
 |
RB_FCR_RX_FIFO_CLR
)

	)

177 
	#UART1_CLR_TXFIFO
(Ë(
R8_UART1_FCR
 |
RB_FCR_TX_FIFO_CLR
)

	)

184 
	#UART1_GëITFœg
(Ë(
R8_UART1_IIR
 & 
RB_IIR_INT_MASK
)

	)

191 
	#UART1_GëLöSTA
(Ë(
R8_UART1_LSR
)

	)

198 
	#UART1_SídByã
(
b
Ë(
R8_UART1_THR
 = b)

	)

206 
UART1_SídSåög
(
uöt8_t
 *
buf
, 
uöt16_t
 
l
);

213 
	#UART1_RecvByã
(Ë(
R8_UART1_RBR
)

	)

222 
uöt16_t
 
UART1_RecvSåög
(
uöt8_t
 *
buf
);

227 
UART2_DefInô
();

234 
UART2_BaudR©eCfg
(
uöt32_t
 
baudøã
);

241 
UART2_ByãTrigCfg
(
UARTByãTRIGTy≥Def
 
b
);

253 
UART2_INTCfg
(
Fun˘i⁄ÆSèã
 
s
, 
uöt8_t
 
i
);

258 
UART2_Re£t
();

263 
	#UART2_CLR_RXFIFO
(Ë(
R8_UART2_FCR
 |
RB_FCR_RX_FIFO_CLR
)

	)

268 
	#UART2_CLR_TXFIFO
(Ë(
R8_UART2_FCR
 |
RB_FCR_TX_FIFO_CLR
)

	)

275 
	#UART2_GëITFœg
(Ë(
R8_UART2_IIR
 & 
RB_IIR_INT_MASK
)

	)

282 
	#UART2_GëLöSTA
(Ë(
R8_UART2_LSR
)

	)

289 
	#UART2_SídByã
(
b
Ë(
R8_UART2_THR
 = b)

	)

297 
UART2_SídSåög
(
uöt8_t
 *
buf
, 
uöt16_t
 
l
);

304 
	#UART2_RecvByã
(Ë(
R8_UART2_RBR
)

	)

313 
uöt16_t
 
UART2_RecvSåög
(
uöt8_t
 *
buf
);

318 
UART3_DefInô
();

325 
UART3_BaudR©eCfg
(
uöt32_t
 
baudøã
);

332 
UART3_ByãTrigCfg
(
UARTByãTRIGTy≥Def
 
b
);

344 
UART3_INTCfg
(
Fun˘i⁄ÆSèã
 
s
, 
uöt8_t
 
i
);

349 
UART3_Re£t
();

354 
	#UART3_CLR_RXFIFO
(Ë(
R8_UART3_FCR
 |
RB_FCR_RX_FIFO_CLR
)

	)

359 
	#UART3_CLR_TXFIFO
(Ë(
R8_UART3_FCR
 |
RB_FCR_TX_FIFO_CLR
)

	)

366 
	#UART3_GëITFœg
(Ë(
R8_UART3_IIR
 & 
RB_IIR_INT_MASK
)

	)

373 
	#UART3_GëLöSTA
(Ë(
R8_UART3_LSR
)

	)

380 
	#UART3_SídByã
(
b
Ë(
R8_UART3_THR
 = b)

	)

388 
UART3_SídSåög
(
uöt8_t
 *
buf
, 
uöt16_t
 
l
);

395 
	#UART3_RecvByã
(Ë(
R8_UART3_RBR
)

	)

404 
uöt16_t
 
UART3_RecvSåög
(
uöt8_t
 *
buf
);

406 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_usbdev.h

11 #i‚de‡
__CH57x_USBDEV_H__


12 
	#__CH57x_USBDEV_H__


	)

14 #ifde‡
__˝lu•lus


19 
	#DEF_USB_GET_IDLE
 0x02

	)

20 
	#DEF_USB_GET_PROTOCOL
 0x03

	)

21 
	#DEF_USB_SET_REPORT
 0x09

	)

22 
	#DEF_USB_SET_IDLE
 0x0A

	)

23 
	#DEF_USB_SET_PROTOCOL
 0x0B

	)

26 
uöt8_t
 *
pEP0_RAM_Addr
;

27 
uöt8_t
 *
pEP1_RAM_Addr
;

28 
uöt8_t
 *
pEP2_RAM_Addr
;

29 
uöt8_t
 *
pEP3_RAM_Addr
;

31 
	#pSëupReqPak
 ((
PUSB_SETUP_REQ
)
pEP0_RAM_Addr
)

	)

32 
	#pEP0_D©aBuf
 (
pEP0_RAM_Addr
)

	)

33 
	#pEP1_OUT_D©aBuf
 (
pEP1_RAM_Addr
)

	)

34 
	#pEP1_IN_D©aBuf
 (
pEP1_RAM_Addr
 + 64)

	)

35 
	#pEP2_OUT_D©aBuf
 (
pEP2_RAM_Addr
)

	)

36 
	#pEP2_IN_D©aBuf
 (
pEP2_RAM_Addr
 + 64)

	)

37 
	#pEP3_OUT_D©aBuf
 (
pEP3_RAM_Addr
)

	)

38 
	#pEP3_IN_D©aBuf
 (
pEP3_RAM_Addr
 + 64)

	)

39 
	#pEP4_OUT_D©aBuf
 (
pEP0_RAM_Addr
 + 64)

	)

40 
	#pEP4_IN_D©aBuf
 (
pEP0_RAM_Addr
 + 128)

	)

45 
USB_Devi˚Inô
();

50 
USB_DevTønsPro˚ss
();

57 
DevEP1_OUT_Dól
(
uöt8_t
 
l
);

64 
DevEP2_OUT_Dól
(
uöt8_t
 
l
);

71 
DevEP3_OUT_Dól
(
uöt8_t
 
l
);

78 
DevEP4_OUT_Dól
(
uöt8_t
 
l
);

85 
DevEP1_IN_Dól
(
uöt8_t
 
l
);

92 
DevEP2_IN_Dól
(
uöt8_t
 
l
);

99 
DevEP3_IN_Dól
(
uöt8_t
 
l
);

106 
DevEP4_IN_Dól
(
uöt8_t
 
l
);

113 
	#EP1_GëINSè
(Ë(
R8_UEP1_CTRL
 & 
UEP_T_RES_NAK
)

	)

120 
	#EP2_GëINSè
(Ë(
R8_UEP2_CTRL
 & 
UEP_T_RES_NAK
)

	)

127 
	#EP3_GëINSè
(Ë(
R8_UEP3_CTRL
 & 
UEP_T_RES_NAK
)

	)

134 
	#EP4_GëINSè
(Ë(
R8_UEP4_CTRL
&
UEP_T_RES_NAK
)

	)

136 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_usbhost.h

11 #i‚de‡
__CH57x_USBHOST_H__


12 
	#__CH57x_USBHOST_H__


	)

14 #ifde‡
__˝lu•lus


18 #i‡
DISK_LIB_ENABLE


19 #i‡
DISK_WITHOUT_USB_HUB


21 
	#FOR_ROOT_UDISK_ONLY


	)

24 
	#DISK_BASE_BUF_LEN
 512

	)

28 
	#ERR_SUCCESS
 0x00

29 
	#ERR_USB_CONNECT
 0x15

	)

30 
	#ERR_USB_DISCON
 0x16

	)

31 
	#ERR_USB_BUF_OVER
 0x17

	)

32 
	#ERR_USB_DISK_ERR
 0x1F

	)

33 
	#ERR_USB_TRANSFER
 0x20

	)

34 
	#ERR_USB_UNSUPPORT
 0xFB

	)

35 
	#ERR_USB_UNKNOWN
 0xFE

	)

36 
	#ERR_AOA_PROTOCOL
 0x41

	)

39 
	#ROOT_DEV_DISCONNECT
 0

	)

40 
	#ROOT_DEV_CONNECTED
 1

	)

41 
	#ROOT_DEV_FAILED
 2

	)

42 
	#ROOT_DEV_SUCCESS
 3

	)

43 
	#DEV_TYPE_KEYBOARD
 (
USB_DEV_CLASS_HID
 | 0x20)

	)

44 
	#DEV_TYPE_MOUSE
 (
USB_DEV_CLASS_HID
 | 0x30)

	)

45 
	#DEF_AOA_DEVICE
 0xF0

	)

46 
	#DEV_TYPE_UNKNOW
 0xFF

	)

54 
	#HUB_MAX_PORTS
 4

	)

55 
	#WAIT_USB_TOUT_200US
 800

56 

	)

59 
uöt8_t
 
Devi˚Sètus
;

60 
uöt8_t
 
Devi˚Addªss
;

61 
uöt8_t
 
Devi˚S≥ed
;

62 
uöt8_t
 
Devi˚Ty≥
;

63 
uöt16_t
 
Devi˚VID
;

64 
uöt16_t
 
Devi˚PID
;

65 
uöt8_t
 
GpV¨
[4];

66 
uöt8_t
 
GpHUBP‹tNum
;

67 } 
	t_RoŸHubDev
;

71 
UINT8
 
Devi˚Sètus
;

72 
UINT8
 
Devi˚Addªss
;

73 
UINT8
 
Devi˚S≥ed
;

74 
UINT8
 
Devi˚Ty≥
;

75 
UINT16
 
Devi˚VID
;

76 
UINT16
 
Devi˚PID
;

77 
UINT8
 
GpV¨
[4];

78 } 
	t_DevOnHubP‹t
;

80 
_RoŸHubDev
 
ThisUsbDev
;

81 
_DevOnHubP‹t
 
DevOnHubP‹t
[
HUB_MAX_PORTS
];

82 
uöt8_t
 
UsbDevEndp0Size
;

83 
uöt8_t
 
FoundNewDev
;

85 
uöt8_t
 *
pHOST_RX_RAM_Addr
;

86 
uöt8_t
 *
pHOST_TX_RAM_Addr
;

87 
	#pSëupReq
 ((
PUSB_SETUP_REQ
)
pHOST_TX_RAM_Addr
)

	)

88 
uöt8_t
 
Com_Buf„r
[];

91 c⁄° 
uöt8_t
 
SëupGëDevDes¸
[];

92 c⁄° 
uöt8_t
 
SëupGëCfgDes¸
[];

93 c⁄° 
uöt8_t
 
SëupSëUsbAddr
[];

94 c⁄° 
uöt8_t
 
SëupSëUsbC⁄fig
[];

95 c⁄° 
uöt8_t
 
SëupSëUsbI¡îÁ˚
[];

96 c⁄° 
uöt8_t
 
SëupCÃEndpSèŒ
[];

101 
DißbÀRoŸHubP‹t
();

109 
uöt8_t
 
A«lyzeRoŸHub
();

116 
SëHo°UsbAddr
(
uöt8_t
 
addr
);

123 
SëUsbS≥ed
(
uöt8_t
 
FuŒS≥ed
);

128 
Re£tRoŸHubP‹t
();

135 
uöt8_t
 
E«bÀRoŸHubP‹t
();

142 
uöt8_t
 
WaôUSB_I¡îru±
();

157 
uöt8_t
 
USBHo°Tønß˘
(uöt8_à
ídp_pid
, uöt8_à
tog
, 
uöt32_t
 
timeout
);

168 
uöt8_t
 
Ho°CålTøns„r
(uöt8_à*
D©aBuf
, uöt8_à*
RëLí
);

175 
C›ySëupReqPkg
(c⁄° 
uöt8_t
 *
pReqPkt
);

183 
uöt8_t
 
CålGëDevi˚Des¸
();

191 
uöt8_t
 
CålGëC⁄figDes¸
();

200 
uöt8_t
 
CålSëUsbAddªss
(uöt8_à
addr
);

209 
uöt8_t
 
CålSëUsbC⁄fig
(uöt8_à
cfg
);

218 
uöt8_t
 
CålCÀ¨EndpSèŒ
(uöt8_à
ídp
);

227 
uöt8_t
 
CålSëUsbI¡îˇ˚
(uöt8_à
cfg
);

232 
USB_Ho°Inô
();

233 
uöt8_t
 
EnumAŒHubP‹t
();

234 
Sñe˘HubP‹t
(
uöt8_t
 
HubP‹tIndex
);

235 
uöt16_t
 
SórchTy≥Devi˚
(
uöt8_t
 
ty≥
);

236 
uöt8_t
 
SET‹OFFNumLock
(uöt8_à*
buf
);

243 
uöt8_t
 
InôRoŸDevi˚
();

250 
uöt8_t
 
CålGëHIDDevi˚Rï‹t
(uöt8_à
öfc
);

257 
uöt8_t
 
CålGëHubDes¸
();

266 
uöt8_t
 
HubGëP‹tSètus
(uöt8_à
HubP‹tIndex
);

276 
uöt8_t
 
HubSëP‹tFótuª
(uöt8_à
HubP‹tIndex
, uöt8_à
FótuªSñt
);

286 
uöt8_t
 
HubCÀ¨P‹tFótuª
(uöt8_à
HubP‹tIndex
, uöt8_à
FótuªSñt
);

288 #ifde‡
__˝lu•lus


	@/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/ISP573.h

22 #i‚de‡
EEPROM_PAGE_SIZE


23 
	#EEPROM_PAGE_SIZE
 256

24 
	#EEPROM_BLOCK_SIZE
 4096

25 
	#EEPROM_MIN_ER_SIZE
 
EEPROM_PAGE_SIZE


27 
	#EEPROM_MIN_WR_SIZE
 1

28 
	#EEPROM_MAX_SIZE
 0x8000

30 #i‚de‡
FLASH_MIN_WR_SIZE


	)

31 
	#FLASH_MIN_WR_SIZE
 4

33 #i‚de‡
FLASH_ROM_MAX_SIZE


	)

34 
	#FLASH_ROM_MAX_SIZE
 0x070000

36 

	)

37 #i‚de‡
CMD_FLASH_ROM_SW_RESET


40 
	#CMD_FLASH_ROM_START_IO
 0x00

41 
	#CMD_FLASH_ROM_SW_RESET
 0x04

42 
	#CMD_GET_ROM_INFO
 0x06

43 
	#CMD_GET_UNIQUE_ID
 0x07

44 
	#CMD_FLASH_ROM_PWR_DOWN
 0x0D

45 
	#CMD_FLASH_ROM_PWR_UP
 0x0C

46 
	#CMD_FLASH_ROM_LOCK
 0x08

48 

	)

49 
	#CMD_EEPROM_ERASE
 0x09

50 
	#CMD_EEPROM_WRITE
 0x0A

51 
	#CMD_EEPROM_READ
 0x0B

52 
	#CMD_FLASH_ROM_ERASE
 0x01

53 
	#CMD_FLASH_ROM_WRITE
 0x02

54 
	#CMD_FLASH_ROM_VERIFY
 0x03

56 

	)

57 
	#ROM_CFG_MAC_ADDR
 0x7F018

58 
	#ROM_CFG_BOOT_INFO
 0x7DFF8

59 

	)

70 
uöt32_t
 
FLASH_EEPROM_CMD
(
uöt8_t
 
cmd
, uöt32_à
SèπAddr
, *
Buf„r
, uöt32_à
Lígth
);

77 
	#FLASH_ROM_START_IO
(Ë
	`FLASH_EEPROM_CMD
(
CMD_FLASH_ROM_START_IO
, 0, 
NULL
, 0)

	)

84 
	#FLASH_ROM_SW_RESET
(Ë
	`FLASH_EEPROM_CMD
(
CMD_FLASH_ROM_SW_RESET
, 0, 
NULL
, 0)

	)

93 
	#GëMACAddªss
(
Buf„r
Ë
	`FLASH_EEPROM_CMD
(
CMD_GET_ROM_INFO
, 
ROM_CFG_MAC_ADDR
, Buf„r, 0)

	)

102 
	#GET_BOOT_INFO
(
Buf„r
Ë
	`FLASH_EEPROM_CMD
(
CMD_GET_ROM_INFO
, 
ROM_CFG_BOOT_INFO
, Buf„r, 0)

	)

111 
	#GET_UNIQUE_ID
(
Buf„r
Ë
	`FLASH_EEPROM_CMD
(
CMD_GET_UNIQUE_ID
, 0, Buf„r, 0)

	)

118 
	#FLASH_ROM_PWR_DOWN
(Ë
	`FLASH_EEPROM_CMD
(
CMD_FLASH_ROM_PWR_DOWN
, 0, 
NULL
, 0)

	)

125 
	#FLASH_ROM_PWR_UP
(Ë
	`FLASH_EEPROM_CMD
(
CMD_FLASH_ROM_PWR_UP
, 0, 
NULL
, 0)

	)

136 
	#EEPROM_READ
(
SèπAddr
, 
Buf„r
, 
Lígth
Ë
	`FLASH_EEPROM_CMD
(
CMD_EEPROM_READ
, SèπAddr, Buf„r, Lígth)

	)

145 
	#EEPROM_ERASE
(
SèπAddr
, 
Lígth
Ë
	`FLASH_EEPROM_CMD
(
CMD_EEPROM_ERASE
, SèπAddr, 
NULL
, Lígth)

	)

156 
	#EEPROM_WRITE
(
SèπAddr
, 
Buf„r
, 
Lígth
Ë
	`FLASH_EEPROM_CMD
(
CMD_EEPROM_WRITE
, SèπAddr, Buf„r, Lígth)

	)

166 
	#FLASH_ROM_ERASE
(
SèπAddr
, 
Lígth
Ë
	`FLASH_EEPROM_CMD
(
CMD_FLASH_ROM_ERASE
, SèπAddr, 
NULL
, Lígth)

	)

177 
	#FLASH_ROM_WRITE
(
SèπAddr
, 
Buf„r
, 
Lígth
Ë
	`FLASH_EEPROM_CMD
(
CMD_FLASH_ROM_WRITE
, SèπAddr, Buf„r, Lígth)

	)

188 
	#FLASH_ROM_VERIFY
(
SèπAddr
, 
Buf„r
, 
Lígth
Ë
	`FLASH_EEPROM_CMD
(
CMD_FLASH_ROM_VERIFY
, SèπAddr, Buf„r, Lígth)

	)

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

136 #i‡
__GLIBC_USE
 (
ISOC2X
)

138 
	#_PRINTF_NAN_LEN_MAX
 4

	)

143 
FILE
 *
°dö
;

144 
FILE
 *
°dout
;

145 
FILE
 *
°dîr
;

147 
	#°dö
 
°dö


	)

148 
	#°dout
 
°dout


	)

149 
	#°dîr
 
°dîr


	)

152 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

154 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_ATFILE


158 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

159 c⁄° *
__√w
Ë
__THROW
;

162 #ifde‡
__USE_GNU


164 
	#RENAME_NOREPLACE
 (1 << 0)

	)

165 
	#RENAME_EXCHANGE
 (1 << 1)

	)

166 
	#RENAME_WHITEOUT
 (1 << 2)

	)

170 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

171 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

178 
	`f˛o£
 (
FILE
 *
__°ªam
);

180 #unde‡
__©å_dóŒoc_f˛o£


181 
	#__©å_dóŒoc_f˛o£
 
	`__©å_dóŒoc
 (
f˛o£
, 1)

	)

187 #i‚de‡
__USE_FILE_OFFSET64


188 
FILE
 *
	$tmpfûe
 ()

189 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

191 #ifde‡
__REDIRECT


192 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
)

193 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

195 
	#tmpfûe
 
tmpfûe64


	)

199 #ifde‡
__USE_LARGEFILE64


200 
FILE
 *
	$tmpfûe64
 ()

201 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

205 *
	$tm≤am
 ([
L_tm≤am
]Ë
__THROW
 
__wur
;

207 #ifde‡
__USE_MISC


210 *
	$tm≤am_r
 (
__s
[
L_tm≤am
]Ë
__THROW
 
__wur
;

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


222 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

223 
__THROW
 
__©åibuã_mÆloc__
 
__wur
 
__©å_dóŒoc_‰ì
;

230 
	`fÊush
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_MISC


239 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

242 #ifde‡
__USE_GNU


249 
	`f˛o£Æl
 ();

253 #i‚de‡
__USE_FILE_OFFSET64


258 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
)

260 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

265 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

266 c⁄° *
__ª°ri˘
 
__modes
,

267 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 #ifde‡
__REDIRECT


270 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

272 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

273 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

274 c⁄° *
__ª°ri˘
 
__modes
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

276 
__wur
;

278 
	#f›í
 
f›í64


	)

279 
	#‰e›í
 
‰e›í64


	)

282 #ifde‡
__USE_LARGEFILE64


283 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
)

285 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

286 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

291 #ifdef 
__USE_POSIX


293 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW


294 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

297 #ifdef 
__USE_GNU


300 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

301 c⁄° *
__ª°ri˘
 
__modes
,

302 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW


303 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

306 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

308 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

309 
__THROW
 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

314 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


315 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

317 #ifde‡
_WCHAR_H


321 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


322 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
;

328 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

332 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

333 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 #ifdef 
__USE_MISC


338 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

339 
size_t
 
__size
Ë
__THROW
;

342 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

351 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

356 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

358 
	$•rötf
 (*
__ª°ri˘
 
__s
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

365 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

366 
__gnuc_va_li°
 
__¨g
);

371 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

373 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

374 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

376 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


378 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

379 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

380 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

382 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

383 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

384 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

387 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

390 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

391 
__gnuc_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

393 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

394 c⁄° *
__ª°ri˘
 
__fmt
, ...)

395 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

396 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

397 c⁄° *
__ª°ri˘
 
__fmt
, ...)

398 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

401 #ifde‡
__USE_XOPEN2K8


403 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

404 
__gnuc_va_li°
 
__¨g
)

405 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

406 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

415 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

416 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

421 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

423 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

424 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

430 
	~<bôs/Êﬂä.h
>

431 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT
 \

432 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

433 #ifde‡
__REDIRECT


434 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

435 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

436 
__isoc99_fsˇnf
Ë
__wur
;

437 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

438 
__isoc99_sˇnf
Ë
__wur
;

439 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

440 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

441 
__isoc99_ssˇnf
);

443 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

445 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

446 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

447 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

448 
	#fsˇnf
 
__isoc99_fsˇnf


	)

449 
	#sˇnf
 
__isoc99_sˇnf


	)

450 
	#ssˇnf
 
__isoc99_ssˇnf


	)

454 #ifdef 
__USE_ISOC99


459 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

460 
__gnuc_va_li°
 
__¨g
)

461 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

467 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

468 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

471 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

472 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

473 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

476 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

477 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT
 \

478 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

479 
	`__REDIRECT
 (
vfsˇnf
,

480 (
FILE
 *
__ª°ri˘
 
__s
,

481 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

482 
__isoc99_vfsˇnf
)

483 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

484 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

485 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	`__REDIRECT_NTH
 (
vssˇnf
,

488 (c⁄° *
__ª°ri˘
 
__s
,

489 c⁄° *
__ª°ri˘
 
__f‹m©
,

490 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

491 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

492 #ñi‡!
deföed
 
__REDIRECT


493 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

494 c⁄° *
__ª°ri˘
 
__f‹m©
,

495 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

496 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

497 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

498 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

499 c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

501 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

502 
	#vsˇnf
 
__isoc99_vsˇnf


	)

503 
	#vssˇnf
 
__isoc99_vssˇnf


	)

513 
	`fgëc
 (
FILE
 *
__°ªam
);

514 
	`gëc
 (
FILE
 *
__°ªam
);

520 
	`gëch¨
 ();

522 #ifde‡
__USE_POSIX199506


527 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

528 
	`gëch¨_u∆ocked
 ();

531 #ifde‡
__USE_MISC


538 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

549 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

550 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

556 
	`putch¨
 (
__c
);

558 #ifde‡
__USE_MISC


565 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

568 #ifde‡
__USE_POSIX199506


573 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putch¨_u∆ocked
 (
__c
);

578 #i‡
deföed
 
__USE_MISC
 \

579 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

581 
	`gëw
 (
FILE
 *
__°ªam
);

584 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

592 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

593 
__wur
 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

595 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

605 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

608 #ifde‡
__USE_GNU


615 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

616 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur


617 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

621 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

632 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

633 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

634 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

635 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

636 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

637 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

645 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

646 
size_t
 *
__ª°ri˘
 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

655 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

661 
	`puts
 (c⁄° *
__s
);

668 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

675 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

682 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

684 #ifde‡
__USE_GNU


691 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

692 
FILE
 *
__ª°ri˘
 
__°ªam
);

695 #ifde‡
__USE_MISC


702 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

704 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

713 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

718 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

723 
	`ªwöd
 (
FILE
 *
__°ªam
);

730 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


731 #i‚de‡
__USE_FILE_OFFSET64


736 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

741 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

743 #ifde‡
__REDIRECT


744 
	`__REDIRECT
 (
f£eko
,

745 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

746 
f£eko64
);

747 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

749 
	#f£eko
 
f£eko64


	)

750 
	#·ñlo
 
·ñlo64


	)

755 #i‚de‡
__USE_FILE_OFFSET64


760 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

765 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

767 #ifde‡
__REDIRECT


768 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

769 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

770 
	`__REDIRECT
 (
f£ços
,

771 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

773 
	#fgëpos
 
fgëpos64


	)

774 
	#f£ços
 
f£ços64


	)

778 #ifde‡
__USE_LARGEFILE64


779 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

780 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

781 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

782 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

786 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

788 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

790 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

792 #ifde‡
__USE_MISC


794 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

795 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

796 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

804 
	`≥º‹
 (c⁄° *
__s
);

807 #ifdef 
__USE_POSIX


809 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

812 #ifde‡
__USE_MISC


814 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

818 #ifde‡
__USE_POSIX2


823 
	`p˛o£
 (
FILE
 *
__°ªam
);

829 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
)

830 
__©åibuã_mÆloc__
 
	$__©å_dóŒoc
 (
p˛o£
, 1Ë
__wur
;

835 #ifdef 
__USE_POSIX


837 *
	$˘îmid
 (*
__s
Ë
__THROW


838 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

842 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


844 *
	$cu£rid
 (*
__s
)

845 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

849 #ifdef 
__USE_GNU


850 
ob°ack
;

853 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

854 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

855 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

856 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

857 c⁄° *
__ª°ri˘
 
__f‹m©
,

858 
__gnuc_va_li°
 
__¨gs
)

859 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

863 #ifde‡
__USE_POSIX199506


867 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

871 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

874 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

877 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


880 
	~<bôs/gë›t_posix.h
>

885 
	`__uÊow
 (
FILE
 *);

886 
	`__ovîÊow
 (
FILE
 *, );

888 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


890 
	~<bôs/°dio2-de˛.h
>

895 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

896 
	~<bôs/°dio-ldbl.h
>

901 #ifde‡
__USE_EXTERN_INLINES


902 
	~<bôs/°dio.h
>

904 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


906 
	~<bôs/°dio2.h
>

909 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 4));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

80 
	$__memcm≥q
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

81 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

84 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


87 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

88 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

89 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

90 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

92 #ifde‡
__OPTIMIZE__


93 
__exã∫_Æways_ölöe
 *

94 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


96  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

99 
__exã∫_Æways_ölöe
 const *

100 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


102  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

105 
	}
}

107 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__USE_GNU


114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

116 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

118 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

125 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


126 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

127 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

128 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

129 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

130 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

131 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

133 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

134 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

135 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

141 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

145 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

146 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

149 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

150 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

153 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

156 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

157 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

159 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

160 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

163 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

164 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

166 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

167 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

168 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

170 #ifde‡
__USE_XOPEN2K8


172 
	~<bôs/ty≥s/loˇÀ_t.h
>

175 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

176 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

179 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

180 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4))

181 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

184 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

185 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC2X
))

187 *
	$°rdup
 (c⁄° *
__s
)

188 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

194 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC2X
)

195 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

196 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

199 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


201 
	#°rdu∑
(
s
) \

202 (
__exãnsi⁄__
 \

204 c⁄° *
__ﬁd
 = (
s
); \

205 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

206 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 
	}
}))

	)

211 
	#°∫du∑
(
s
, 
n
) \

212 (
__exãnsi⁄__
 \

214 c⁄° *
__ﬁd
 = (
s
); \

215 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

216 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

217 
__√w
[
__Àn
] = '\0'; \

218 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

219 }))

	)

223 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


226 *
°rchr
 (*
__s
, 
__c
)

227 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

228 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

229 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

231 #ifde‡
__OPTIMIZE__


232 
__exã∫_Æways_ölöe
 *

233 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


235  
__buûtö_°rchr
 (
__s
, 
__c
);

238 
__exã∫_Æways_ölöe
 const *

239 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


241  
__buûtö_°rchr
 (
__s
, 
__c
);

246 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

247 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

250 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


253 *
	`°ºchr
 (*
__s
, 
__c
)

254 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

255 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

256 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

258 #ifde‡
__OPTIMIZE__


259 
__exã∫_Æways_ölöe
 *

260 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


262  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

265 
__exã∫_Æways_ölöe
 const *

266 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


268  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

271 
	}
}

273 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 #ifde‡
__USE_GNU


280 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


281 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

282 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

283 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

284 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

286 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

293 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

294 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


303 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

304 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

305 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

306 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

308 #ifde‡
__OPTIMIZE__


309 
__exã∫_Æways_ölöe
 *

310 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


312  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

315 
__exã∫_Æways_ölöe
 const *

316 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


318  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

321 
	}
}

323 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

324 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


330 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

331 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

332 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

333 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 #ifde‡
__OPTIMIZE__


336 
__exã∫_Æways_ölöe
 *

337 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


339  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

342 
__exã∫_Æways_ölöe
 const *

343 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


345  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

348 
	}
}

350 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

351 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

356 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

362 c⁄° *
__ª°ri˘
 
__dñim
,

363 **
__ª°ri˘
 
__ßve_±r
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

365 #ifde‡
__USE_POSIX


366 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

367 **
__ª°ri˘
 
__ßve_±r
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

371 #ifde‡
__USE_GNU


373 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


374 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

375 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

376 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

377 c⁄° *
__√edÀ
)

378 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

380 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

385 #ifde‡
__USE_GNU


389 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

390 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3))

392 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2))

393 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 3, 4));

397 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

398 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

400 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

401 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

402 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

407 
size_t
 
	$°æí
 (c⁄° *
__s
)

408 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

410 #ifdef 
__USE_XOPEN2K8


413 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

414 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

419 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

420 #ifde‡
__USE_XOPEN2K


428 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


431 #ifde‡
__REDIRECT_NTH


432 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

433 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

434 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2))

435 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

437 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

439 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

444 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

445 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

448 #ifde‡
__USE_GNU


450 c⁄° *
	$°ªº‹desc_≈
 (
__îr
Ë
__THROW
;

452 c⁄° *
	$°ªº‹«me_≈
 (
__îr
Ë
__THROW
;

456 #ifde‡
__USE_XOPEN2K8


458 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

461 #ifde‡
__USE_MISC


462 
	~<°rögs.h
>

466 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

467 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

471 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

472 c⁄° *
__ª°ri˘
 
__dñim
)

473 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

476 #ifdef 
__USE_XOPEN2K8


478 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

480 #ifde‡
__USE_GNU


482 c⁄° *
	$sigabbªv_≈
 (
__sig
Ë
__THROW
;

485 c⁄° *
	$sigdes¸_≈
 (
__sig
Ë
__THROW
;

489 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

490 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

491 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

492 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

496 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

497 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

498 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

499 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

500 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

501 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

504 #ifdef 
__USE_GNU


506 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

507 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

510 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

513 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

514 
	`__©å_ac˚ss
 ((
__ªad_wrôe__
, 1, 2));

516 #i‚de‡
ba£«me


521 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


522 "C++" *
	$ba£«me
 (*
__fûíame
)

523 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

524 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

525 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

527 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

532 #i‡
	`__GNUC_PREREQ
 (3,4)

533 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


535 
	~<bôs/°rög_f‹tifõd.h
>

539 
__END_DECLS


	@/usr/include/bits/floatn.h

19 #i‚de‡
_BITS_FLOATN_H


20 
	#_BITS_FLOATN_H


	)

22 
	~<„©uªs.h
>

29 #i‡(
deföed
 
__x86_64__
 \

30 ? 
__GNUC_PREREQ
 (4, 3) \

31 : (
deföed
 
__GNU__
 ? 
	$__GNUC_PREREQ
 (4, 5Ë: 
	$__GNUC_PREREQ
 (4, 4)))

32 
	#__HAVE_FLOAT128
 1

	)

34 
	#__HAVE_FLOAT128
 0

	)

39 #i‡
__HAVE_FLOAT128


40 
	#__HAVE_DISTINCT_FLOAT128
 1

	)

42 
	#__HAVE_DISTINCT_FLOAT128
 0

	)

48 
	#__HAVE_FLOAT64X
 1

	)

54 
	#__HAVE_FLOAT64X_LONG_DOUBLE
 1

	)

56 #i‚de‡
__ASSEMBLER__


60 #i‡
__HAVE_FLOAT128


61 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

63 
	#__f128
(
x
Ëx##
q


	)

65 
	#__f128
(
x
Ëx##
f128


	)

70 #i‡
__HAVE_FLOAT128


71 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

74 
_Com∂ex
 
	t__cÊﬂt128
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__TC__
)));

75 
	#__CFLOAT128
 
__cÊﬂt128


	)

77 
	#__CFLOAT128
 
_Com∂ex
 
_Flﬂt128


	)

82 #i‡
__HAVE_FLOAT128


85 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

86 
__Êﬂt128
 
	t_Flﬂt128
;

90 #i‡!
	`__GNUC_PREREQ
 (7, 0)

91 
	#__buûtö_huge_vÆf128
(Ë((
_Flﬂt128
Ë
	`__buûtö_huge_vÆ
 ())

	)

99 #i‡!
	`__GNUC_PREREQ
 (7, 0)

100 
	#__buûtö_c›ysignf128
 
__buûtö_c›ysignq


	)

101 
	#__buûtö_Ábsf128
 
__buûtö_Ábsq


	)

102 
	#__buûtö_öff128
(Ë((
_Flﬂt128
Ë
	`__buûtö_öf
 ())

	)

103 
	#__buûtö_«nf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«n
 (x))

	)

104 
	#__buûtö_«nsf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«ns
 (x))

	)

111 #i‡!
	`__GNUC_PREREQ
 (6, 0)

112 
	#__buûtö_signbôf128
 
__signbôf128


	)

119 
	~<bôs/Êﬂä-comm⁄.h
>

	@/usr/include/bits/getopt_posix.h

20 #i‚de‡
_GETOPT_POSIX_H


21 
	#_GETOPT_POSIX_H
 1

	)

23 #i‡!
deföed
 
_UNISTD_H
 && !deföed 
_STDIO_H


27 
	~<bôs/gë›t_c‹e.h
>

29 
	g__BEGIN_DECLS


31 #i‡
deföed
 
__USE_POSIX2
 && !deföed 
__USE_POSIX_IMPLICITLY
 \

32 && !
deföed
 
	g__USE_GNU
 && !deföed 
	g_GETOPT_H


37 #ifde‡
__REDIRECT


38 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

39 c⁄° *
__sh‹t›ts
),

40 
__posix_gë›t
);

42 
	$__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

43 c⁄° *
__sh‹t›ts
)

44 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

45 
	#gë›t
 
__posix_gë›t


	)

49 
__END_DECLS


	@/usr/include/bits/libc-header-start.h

27 #i‚de‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


31 #unde‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


33 
	~<„©uªs.h
>

37 #unde‡
__GLIBC_USE_LIB_EXT2


38 #i‡(
deföed
 
__USE_GNU
 \

39 || (
deföed
 
	g__STDC_WANT_LIB_EXT2__
 && __STDC_WANT_LIB_EXT2__ > 0))

40 
	#__GLIBC_USE_LIB_EXT2
 1

	)

42 
	#__GLIBC_USE_LIB_EXT2
 0

	)

67 #unde‡
__GLIBC_USE_IEC_60559_BFP_EXT


68 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_BFP_EXT__


69 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 1

	)

71 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 0

	)

73 #unde‡
__GLIBC_USE_IEC_60559_BFP_EXT_C2X


74 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
Ë|| __GLIBC_USE (
ISOC2X
)

75 
	#__GLIBC_USE_IEC_60559_BFP_EXT_C2X
 1

	)

77 
	#__GLIBC_USE_IEC_60559_BFP_EXT_C2X
 0

	)

79 #unde‡
__GLIBC_USE_IEC_60559_EXT


80 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
Ë|| 
deföed
 
__STDC_WANT_IEC_60559_EXT__


81 
	#__GLIBC_USE_IEC_60559_EXT
 1

	)

83 
	#__GLIBC_USE_IEC_60559_EXT
 0

	)

90 #unde‡
__GLIBC_USE_IEC_60559_FUNCS_EXT


91 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_FUNCS_EXT__


92 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 1

	)

94 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 0

	)

96 #unde‡
__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X


97 #i‡
__GLIBC_USE
 (
IEC_60559_FUNCS_EXT
Ë|| __GLIBC_USE (
ISOC2X
)

98 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X
 1

	)

100 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X
 0

	)

105 #unde‡
__GLIBC_USE_IEC_60559_TYPES_EXT


106 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_TYPES_EXT__


107 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 1

	)

109 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 0

	)

	@/usr/include/bits/stdint-intn.h

19 #i‚de‡
_BITS_STDINT_INTN_H


20 
	#_BITS_STDINT_INTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__öt8_t
 
	töt8_t
;

25 
__öt16_t
 
	töt16_t
;

26 
__öt32_t
 
	töt32_t
;

27 
__öt64_t
 
	töt64_t
;

	@/usr/include/bits/stdint-uintn.h

19 #i‚de‡
_BITS_STDINT_UINTN_H


20 
	#_BITS_STDINT_UINTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__uöt8_t
 
	tuöt8_t
;

25 
__uöt16_t
 
	tuöt16_t
;

26 
__uöt32_t
 
	tuöt32_t
;

27 
__uöt64_t
 
	tuöt64_t
;

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

24 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

25 
	$__LDBL_REDIR_DECL
 (
•rötf
)

26 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

27 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

28 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

29 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

30 #i‡
deföed
 
__LDBL_COMPAT


31 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

32 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

33 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

34 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

35 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__isoc99_fsˇnfõì128
)

36 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__isoc99_sˇnfõì128
)

37 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__isoc99_ssˇnfõì128
)

39 #îr‹ 
bôs
/
°dlib
-
ldbl
.
h
 
ö˛uded
 
whí
 
no
Üdb»
ªdúe˘i⁄s
 
¨e
 
ªquúed
.

42 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

43 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

44 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

47 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


48 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

49 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

52 #ifdef 
__USE_ISOC99


53 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

54 #i‡
deföed
 
__LDBL_COMPAT


55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

59 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__isoc99_vfsˇnfõì128
)

60 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__isoc99_vsˇnfõì128
)

61 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__isoc99_vssˇnfõì128
)

63 #îr‹ 
bôs
/
°dlib
-
ldbl
.
h
 
ö˛uded
 
whí
 
no
Üdb»
ªdúe˘i⁄s
 
¨e
 
ªquúed
.

66 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

67 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

68 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

72 #ifde‡
__USE_XOPEN2K8


73 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

74 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

77 #ifde‡
__USE_GNU


78 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

79 
	$__LDBL_REDIR2_DECL
 (
a•rötf
)

80 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

81 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

82 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


86 
	$__LDBL_REDIR2_DECL
 (
•rötf_chk
)

87 
	$__LDBL_REDIR2_DECL
 (
v•rötf_chk
)

88 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


89 
	$__LDBL_REDIR2_DECL
 (
¢¥ötf_chk
)

90 
	$__LDBL_REDIR2_DECL
 (
v¢¥ötf_chk
)

92 #i‡
__USE_FORTIFY_LEVEL
 > 1

93 
	$__LDBL_REDIR2_DECL
 (
Ârötf_chk
)

94 
	$__LDBL_REDIR2_DECL
 (
¥ötf_chk
)

95 
	$__LDBL_REDIR2_DECL
 (
vÂrötf_chk
)

96 
	$__LDBL_REDIR2_DECL
 (
v¥ötf_chk
)

97 #ifde‡
__USE_XOPEN2K8


98 
	$__LDBL_REDIR2_DECL
 (
d¥ötf_chk
)

99 
	$__LDBL_REDIR2_DECL
 (
vd¥ötf_chk
)

101 #ifde‡
__USE_GNU


102 
	$__LDBL_REDIR2_DECL
 (
a•rötf_chk
)

103 
	$__LDBL_REDIR2_DECL
 (
va•rötf_chk
)

104 
	$__LDBL_REDIR2_DECL
 (
ob°ack_¥ötf_chk
)

105 
	$__LDBL_REDIR2_DECL
 (
ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_BITS_STDIO_H


20 
	#_BITS_STDIO_H
 1

	)

22 #i‚de‡
_STDIO_H


26 #i‚de‡
__exã∫_ölöe


27 
	#__STDIO_INLINE
 
ölöe


	)

29 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

33 #ifde‡
__USE_EXTERN_INLINES


36 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

38 
__STDIO_INLINE
 

39 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

41  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

42 
	}
}

46 
__STDIO_INLINE
 

47 
	$gëch¨
 ()

49  
	`gëc
 (
°dö
);

50 
	}
}

53 #ifde‡
__USE_MISC


55 
__STDIO_INLINE
 

56 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

58  
	`__gëc_u∆ocked_body
 (
__Â
);

59 
	}
}

63 #ifde‡
__USE_POSIX199506


65 
__STDIO_INLINE
 

66 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

68  
	`__gëc_u∆ocked_body
 (
__Â
);

69 
	}
}

72 
__STDIO_INLINE
 

73 
	$gëch¨_u∆ocked
 ()

75  
	`__gëc_u∆ocked_body
 (
°dö
);

76 
	}
}

81 
__STDIO_INLINE
 

82 
	$putch¨
 (
__c
)

84  
	`putc
 (
__c
, 
°dout
);

85 
	}
}

88 #ifde‡
__USE_MISC


90 
__STDIO_INLINE
 

91 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

93  
	`__putc_u∆ocked_body
 (
__c
, 
__°ªam
);

94 
	}
}

98 #ifde‡
__USE_POSIX199506


100 
__STDIO_INLINE
 

101 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

103  
	`__putc_u∆ocked_body
 (
__c
, 
__°ªam
);

104 
	}
}

107 
__STDIO_INLINE
 

108 
	$putch¨_u∆ocked
 (
__c
)

110  
	`__putc_u∆ocked_body
 (
__c
, 
°dout
);

111 
	}
}

115 #ifdef 
__USE_GNU


117 
__STDIO_INLINE
 
__ssize_t


118 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

120  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

121 
	}
}

125 #ifde‡
__USE_MISC


127 
__STDIO_INLINE
 

128 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

130  
	`__„of_u∆ocked_body
 (
__°ªam
);

131 
	}
}

134 
__STDIO_INLINE
 

135 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

137  
	`__„º‹_u∆ocked_body
 (
__°ªam
);

138 
	}
}

144 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

145 && !
deföed
 
	g__˝lu•lus


147 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

148 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

149 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

150 && (
size_t
Ë(
size
) != 0) \

151 ? ({ *
__±r
 = (*Ë(
±r
); \

152 
FILE
 *
__°ªam
 = (
°ªam
); \

153 
size_t
 
__˙t
; \

154 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

155 
__˙t
 > 0; --__cnt) \

157 
__c
 = 
	`gëc_u∆ocked
 (
__°ªam
); \

158 i‡(
__c
 =
EOF
) \

160 *
__±r
++ = 
__c
; \

162 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

163 / (
size_t
Ë(
size
); }) \

164 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

165 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

167 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

168 (Ë(
n
), (
size_t
) 0) \

169 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

171 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

172 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

173 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

174 && (
size_t
Ë(
size
) != 0) \

175 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

176 
FILE
 *
__°ªam
 = (
°ªam
); \

177 
size_t
 
__˙t
; \

178 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

179 
__˙t
 > 0; --__cnt) \

180 i‡(
	`putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

182 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

183 / (
size_t
Ë(
size
); }) \

184 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

185 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

187 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

188 (Ë(
n
), (
size_t
) 0) \

189 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

193 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2-decl.h

19 #i‚de‡
_BITS_STDIO2_DEC_H


20 
	#_BITS_STDIO2_DEC_H
 1

	)

22 #i‚de‡
_STDIO_H


26 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW


28 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

29 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

30 c⁄° *
__ª°ri˘
 
__f‹m©
,

31 
__gnuc_va_li°
 
__≠
Ë
__THROW


32 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

34 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


36 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

37 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

38 ...Ë
__THROW


39 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

40 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

41 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

42 
__gnuc_va_li°
 
__≠
Ë
__THROW


43 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

47 #i‡
__USE_FORTIFY_LEVEL
 > 1

49 
	`__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

50 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

51 
	`__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

52 
	`__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

53 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__≠
);

54 
	`__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

55 
__gnuc_va_li°
 
__≠
);

57 #ifde‡
__USE_XOPEN2K8


58 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

59 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

60 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

61 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

62 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

65 #ifde‡
__USE_GNU


67 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

68 c⁄° *
__ª°ri˘
 
__fmt
, ...)

69 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

70 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

71 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

72 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

73 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

74 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

76 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

77 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

78 
__Êag
,

79 c⁄° *
__ª°ri˘
 
__f‹m©
,

80 
__gnuc_va_li°
 
__¨gs
)

81 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

86 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

87 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

90 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

91 
FILE
 *
__ª°ri˘
 
__°ªam
)

92 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

94 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

95 
size_t
 
__size
, size_à
__n
,

96 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

98 #ifde‡
__USE_GNU


99 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

100 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
)

101 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

104 #ifde‡
__USE_MISC


105 #unde‡
‰ód_u∆ocked


106 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

107 
size_t
 
__size
, size_à
__n
,

108 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

	@/usr/include/bits/stdio2.h

19 #i‚de‡
_BITS_STDIO2_H


20 
	#_BITS_STDIO2_H
 1

	)

22 #i‚de‡
_STDIO_H


26 #ifde‡
__va_¨g_∑ck


27 
__f‹tify_fun˘i⁄
 

28 
__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

30  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

31 
	`__glibc_objsize
 (
__s
), 
__fmt
,

32 
	`__va_¨g_∑ck
 ());

33 
	}
}

34 #ñi‡!
deföed
 
__˝lu•lus


35 
	#•rötf
(
°r
, ...) \

36 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, \

37 
	`__glibc_objsize
 (
°r
), 
__VA_ARGS__
)

	)

40 
__f‹tify_fun˘i⁄
 

41 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

42 
__gnuc_va_li°
 
__≠
))

44  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

45 
	`__glibc_objsize
 (
__s
), 
__fmt
, 
__≠
);

46 
	}
}

48 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


49 #ifde‡
__va_¨g_∑ck


50 
__f‹tify_fun˘i⁄
 

51 
__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

52 c⁄° *
__ª°ri˘
 
__fmt
, ...))

54  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

55 
	`__glibc_objsize
 (
__s
), 
__fmt
,

56 
	`__va_¨g_∑ck
 ());

57 
	}
}

58 #ñi‡!
deföed
 
__˝lu•lus


59 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

60 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, \

61 
	`__glibc_objsize
 (
°r
), 
__VA_ARGS__
)

	)

64 
__f‹tify_fun˘i⁄
 

65 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

66 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

68  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

69 
	`__glibc_objsize
 (
__s
), 
__fmt
, 
__≠
);

70 
	}
}

74 #i‡
__USE_FORTIFY_LEVEL
 > 1

75 #ifde‡
__va_¨g_∑ck


76 
__f‹tify_fun˘i⁄
 

77 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

79  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

80 
	`__va_¨g_∑ck
 ());

81 
	}
}

83 
__f‹tify_fun˘i⁄
 

84 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

86  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

87 
	}
}

88 #ñi‡!
deföed
 
__˝lu•lus


89 
	#¥ötf
(...) \

90 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

91 
	#Ârötf
(
°ªam
, ...) \

92 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

95 
__f‹tify_fun˘i⁄
 

96 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

98 #ifde‡
__USE_EXTERN_INLINES


99  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

101  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

103 
	}
}

105 
__f‹tify_fun˘i⁄
 

106 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

107 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

109  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

110 
	}
}

112 #ifde‡
__USE_XOPEN2K8


113 #ifde‡
__va_¨g_∑ck


114 
__f‹tify_fun˘i⁄
 

115 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

117  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

118 
	`__va_¨g_∑ck
 ());

119 
	}
}

120 #ñi‡!
deföed
 
__˝lu•lus


121 
	#d¥ötf
(
fd
, ...) \

122 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

125 
__f‹tify_fun˘i⁄
 

126 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

128  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

132 #ifde‡
__USE_GNU


133 #ifde‡
__va_¨g_∑ck


134 
__f‹tify_fun˘i⁄
 

135 
__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

137  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

138 
	`__va_¨g_∑ck
 ());

139 
	}
}

141 
__f‹tify_fun˘i⁄
 

142 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

145  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

146 
	`__va_¨g_∑ck
 ());

147 
	}
}

149 
__f‹tify_fun˘i⁄
 

150 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

151 c⁄° *
__ª°ri˘
 
__fmt
, ...))

153  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

154 
	`__va_¨g_∑ck
 ());

155 
	}
}

156 #ñi‡!
deföed
 
__˝lu•lus


157 
	#a•rötf
(
±r
, ...) \

158 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

159 
	#__a•rötf
(
±r
, ...) \

160 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

161 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

162 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

165 
__f‹tify_fun˘i⁄
 

166 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

167 
__gnuc_va_li°
 
__≠
))

169  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

170 
	}
}

172 
__f‹tify_fun˘i⁄
 

173 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

174 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

176  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

177 
__≠
);

178 
	}
}

184 #i‡
__GLIBC_USE
 (
DEPRECATED_GETS
)

185 *
__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

186 
__wur
 
__w¨«âr
 ("please use fgets or getline instead, gets can't "

189 
__f‹tify_fun˘i⁄
 
__wur
 *

190 
	$gës
 (*
__°r
)

192 i‡(
	`__glibc_objsize
 (
__°r
Ë!(
size_t
) -1)

193  
	`__gës_chk
 (
__°r
, 
	`__glibc_objsize
 (__str));

194  
	`__gës_w¨n
 (
__°r
);

195 
	}
}

198 *
__REDIRECT
 (
__fgës_Æüs
,

199 (*
__ª°ri˘
 
__s
, 
__n
,

200 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
)

201 
__wur
 
__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

202 *
__REDIRECT
 (
__fgës_chk_w¨n
,

203 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

204 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

205 
__wur
 
__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

208 
__f‹tify_fun˘i⁄
 
__wur
 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2) *

209 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

211 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__s
);

212 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
,  (), 
sz
))

213  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

214 i‡(
	`__glibc_unß„_Àn
 (
__n
,  (), 
sz
))

215  
	`__fgës_chk_w¨n
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

216  
	`__fgës_chk
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

217 
	}
}

219 
size_t
 
__REDIRECT
 (
__‰ód_Æüs
,

220 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

221 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

222 
‰ód
Ë
__wur
;

223 
size_t
 
__REDIRECT
 (
__‰ód_chk_w¨n
,

224 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

225 
size_t
 
__size
, size_à
__n
,

226 
FILE
 *
__ª°ri˘
 
__°ªam
),

227 
__‰ód_chk
)

228 
__wur
 
__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

231 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


232 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

233 
FILE
 *
__ª°ri˘
 
__°ªam
)

235 
size_t
 
sz
 = 
	`__glibc_objsize0
 (
__±r
);

236 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
, 
__size
, 
sz
))

237  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

238 i‡(
	`__glibc_unß„_Àn
 (
__n
, 
__size
, 
sz
))

239  
	`__‰ód_chk_w¨n
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

240  
	`__‰ód_chk
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

241 
	}
}

243 #ifde‡
__USE_GNU


244 *
__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

245 (*
__ª°ri˘
 
__s
, 
__n
,

246 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
)

247 
__wur
 
__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

248 *
__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

249 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

250 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

251 
__wur
 
__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

254 
__f‹tify_fun˘i⁄
 
__wur
 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2) *

255 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

257 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__s
);

258 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
,  (), 
sz
))

259  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

260 i‡(
	`__glibc_unß„_Àn
 (
__n
,  (), 
sz
))

261  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

262  
	`__fgës_u∆ocked_chk
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

263 
	}
}

266 #ifde‡
__USE_MISC


267 #unde‡
‰ód_u∆ocked


268 
size_t
 
__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

269 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

270 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

271 
‰ód_u∆ocked
Ë
__wur
;

272 
size_t
 
__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

273 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

274 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
),

276 
__‰ód_u∆ocked_chk
)

277 
__wur
 
__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

280 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


281 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

282 
FILE
 *
__ª°ri˘
 
__°ªam
)

284 
size_t
 
sz
 = 
	`__glibc_objsize0
 (
__±r
);

285 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
, 
__size
, 
sz
))

287 #ifde‡
__USE_EXTERN_INLINES


288 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

289 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

290 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

291 && 
__size
 * 
__n
 <= 8)

293 
size_t
 
__˙t
 = 
__size
 * 
__n
;

294 *
__˝å
 = (*Ë
__±r
;

295 i‡(
__˙t
 == 0)

298 ; 
__˙t
 > 0; --__cnt)

300 
__c
 = 
	`gëc_u∆ocked
 (
__°ªam
);

301 i‡(
__c
 =
EOF
)

303 *
__˝å
++ = 
__c
;

305  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

308  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

310 i‡(
	`__glibc_unß„_Àn
 (
__n
, 
__size
, 
sz
))

311  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

312  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

314 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‚de‡
_BITS_STDIO_LIM_H


19 
	#_BITS_STDIO_LIM_H
 1

	)

21 #i‚de‡
_STDIO_H


25 
	#L_tm≤am
 20

	)

26 
	#TMP_MAX
 238328

	)

27 
	#FILENAME_MAX
 4096

	)

29 #ifde‡
__USE_POSIX


30 
	#L_˘îmid
 9

	)

31 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


32 
	#L_cu£rid
 9

	)

36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

	@/usr/include/bits/string_fortified.h

18 #i‚de‡
_BITS_STRING_FORTIFIED_H


19 
	#_BITS_STRING_FORTIFIED_H
 1

	)

21 #i‚de‡
_STRING_H


25 
__f‹tify_fun˘i⁄
 *

26 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

27 
size_t
 
__Àn
))

29  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
,

30 
	`__glibc_objsize0
 (
__de°
));

31 
	}
}

33 
__f‹tify_fun˘i⁄
 *

34 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

36  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
,

37 
	`__glibc_objsize0
 (
__de°
));

38 
	}
}

40 #ifde‡
__USE_GNU


41 
__f‹tify_fun˘i⁄
 *

42 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__Àn
))

45  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
,

46 
	`__glibc_objsize0
 (
__de°
));

47 
	}
}

56 
__f‹tify_fun˘i⁄
 *

57 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

59  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
,

60 
	`__glibc_objsize0
 (
__de°
));

61 
	}
}

63 #ifde‡
__USE_MISC


64 
	~<bôs/°rögs_f‹tifõd.h
>

66 
	$__ex∂icô_bzîo_chk
 (*
__de°
, 
size_t
 
__Àn
, size_à
__de°Àn
)

67 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

69 
__f‹tify_fun˘i⁄
 

70 
	`__NTH
 (
	$ex∂icô_bzîo
 (*
__de°
, 
size_t
 
__Àn
))

72 
	`__ex∂icô_bzîo_chk
 (
__de°
, 
__Àn
, 
	`__glibc_objsize0
 (__dest));

73 
	}
}

76 
__f‹tify_fun˘i⁄
 *

77 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

79  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__glibc_objsize
 (__dest));

80 
	}
}

82 #ifde‡
__USE_XOPEN2K8


83 
__f‹tify_fun˘i⁄
 *

84 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

86  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__glibc_objsize
 (__dest));

87 
	}
}

91 
__f‹tify_fun˘i⁄
 *

92 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

93 
size_t
 
__Àn
))

95  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
,

96 
	`__glibc_objsize
 (
__de°
));

97 
	}
}

99 #ifde‡
__USE_XOPEN2K8


100 #i‡
__GNUC_PREREQ
 (4, 7Ë|| 
__glibc_˛™g_¥îeq
 (2, 6)

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

104  
	`__buûtö___°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
,

105 
	`__glibc_objsize
 (
__de°
));

106 
	}
}

108 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

109 
size_t
 
__de°Àn
Ë
__THROW


110 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 3)

111 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

112 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

113 
size_t
 
__n
), 
°≤˝y
);

115 
__f‹tify_fun˘i⁄
 *

116 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

118 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

119 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

120  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

121  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

122 
	}
}

127 
__f‹tify_fun˘i⁄
 *

128 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

130  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__glibc_objsize
 (__dest));

131 
	}
}

134 
__f‹tify_fun˘i⁄
 *

135 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

136 
size_t
 
__Àn
))

138  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
,

139 
	`__glibc_objsize
 (
__de°
));

140 
	}
}

	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/timesize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 
__öt8_t
 
	t__öt_Àa°8_t
;

53 
__uöt8_t
 
	t__uöt_Àa°8_t
;

54 
__öt16_t
 
	t__öt_Àa°16_t
;

55 
__uöt16_t
 
	t__uöt_Àa°16_t
;

56 
__öt32_t
 
	t__öt_Àa°32_t
;

57 
__uöt32_t
 
	t__uöt_Àa°32_t
;

58 
__öt64_t
 
	t__öt_Àa°64_t
;

59 
__uöt64_t
 
	t__uöt_Àa°64_t
;

62 #i‡
__WORDSIZE
 == 64

63 
	t__quad_t
;

64 
	t__u_quad_t
;

66 
__exãnsi⁄__
 
	t__quad_t
;

67 
__exãnsi⁄__
 
	t__u_quad_t
;

71 #i‡
__WORDSIZE
 == 64

72 
	t__ötmax_t
;

73 
	t__uötmax_t
;

75 
__exãnsi⁄__
 
	t__ötmax_t
;

76 
__exãnsi⁄__
 
	t__uötmax_t
;

109 
	#__S16_TYPE
 

	)

110 
	#__U16_TYPE
 

	)

111 
	#__S32_TYPE
 

	)

112 
	#__U32_TYPE
 

	)

113 
	#__SLONGWORD_TYPE
 

	)

114 
	#__ULONGWORD_TYPE
 

	)

115 #i‡
__WORDSIZE
 == 32

116 
	#__SQUAD_TYPE
 
__öt64_t


	)

117 
	#__UQUAD_TYPE
 
__uöt64_t


	)

118 
	#__SWORD_TYPE
 

	)

119 
	#__UWORD_TYPE
 

	)

120 
	#__SLONG32_TYPE
 

	)

121 
	#__ULONG32_TYPE
 

	)

122 
	#__S64_TYPE
 
__öt64_t


	)

123 
	#__U64_TYPE
 
__uöt64_t


	)

126 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

127 #ñi‡
__WORDSIZE
 == 64

128 
	t__SQUAD_TYPE
 

	)

129 
	t__UQUAD_TYPE
 

	)

130 
	t__SWORD_TYPE
 

	)

131 
	t__UWORD_TYPE
 

	)

132 
	t__SLONG32_TYPE
 

	)

133 
	t__ULONG32_TYPE
 

	)

134 
	t__S64_TYPE
 

	)

135 
	t__U64_TYPE
 

	)

137 
	t__STD_TYPE
 

	)

141 
	~<bôs/ty≥sizes.h
>

142 
	~<bôs/time64.h
>

145 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

146 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

147 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

148 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

149 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

150 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

151 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

152 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

153 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

154 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

155 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

156 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

157 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

158 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

159 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

160 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

161 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

162 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

163 
__STD_TYPE
 
__SUSECONDS64_T_TYPE
 
	g__su£c⁄ds64_t
;

165 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

166 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

169 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

172 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

175 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

180 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

181 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

184 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

185 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

188 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

189 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

192 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

194 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

197 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

199 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

203 
__off64_t
 
	t__loff_t
;

204 *
	t__ˇddr_t
;

207 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

210 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

215 
	t__sig_©omic_t
;

220 #i‡
__TIMESIZE
 =64 && 
deföed
 
__LIBC


221 
	#__time64_t
 
__time_t


	)

222 #ñi‡
__TIMESIZE
 != 64

223 
__STD_TYPE
 
__TIME64_T_TYPE
 
	g__time64_t
;

226 #unde‡
__STD_TYPE


	@/usr/include/bits/types/FILE.h

1 #i‚de‡
__FILE_deföed


2 
	#__FILE_deföed
 1

	)

4 
	g_IO_FILE
;

7 
_IO_FILE
 
	tFILE
;

	@/usr/include/bits/types/__FILE.h

1 #i‚de‡
____FILE_deföed


2 
	#____FILE_deföed
 1

	)

4 
	g_IO_FILE
;

5 
_IO_FILE
 
	t__FILE
;

	@/usr/include/bits/types/__fpos64_t.h

1 #i‚de‡
_____Âos64_t_deföed


2 
	#_____Âos64_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/__mb°©e_t.h
>

10 
	s_G_Âos64_t


12 
__off64_t
 
	m__pos
;

13 
__mb°©e_t
 
	m__°©e
;

14 } 
	t__Âos64_t
;

	@/usr/include/bits/types/__fpos_t.h

1 #i‚de‡
_____Âos_t_deföed


2 
	#_____Âos_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/__mb°©e_t.h
>

10 
	s_G_Âos_t


12 
__off_t
 
	m__pos
;

13 
__mb°©e_t
 
	m__°©e
;

14 } 
	t__Âos_t
;

	@/usr/include/bits/types/cookie_io_functions_t.h

18 #i‚de‡
__cookõ_io_fun˘i⁄s_t_deföed


19 
	#__cookõ_io_fun˘i⁄s_t_deföed
 1

	)

21 
	~<bôs/ty≥s.h
>

27 
__ssize_t
 
	tcookõ_ªad_fun˘i⁄_t
 (*
	t__cookõ
, *
	t__buf
,

28 
	tsize_t
 
	t__nbyãs
);

36 
__ssize_t
 
	tcookõ_wrôe_fun˘i⁄_t
 (*
	t__cookõ
, c⁄° *
	t__buf
,

37 
	tsize_t
 
	t__nbyãs
);

45 
	tcookõ_£ek_fun˘i⁄_t
 (*
	t__cookõ
, 
	t__off64_t
 *
	t__pos
, 
	t__w
);

48 
	tcookõ_˛o£_fun˘i⁄_t
 (*
	t__cookõ
);

55 
	s_IO_cookõ_io_fun˘i⁄s_t


57 
cookõ_ªad_fun˘i⁄_t
 *
	mªad
;

58 
cookõ_wrôe_fun˘i⁄_t
 *
	mwrôe
;

59 
cookõ_£ek_fun˘i⁄_t
 *
	m£ek
;

60 
cookõ_˛o£_fun˘i⁄_t
 *
	m˛o£
;

61 } 
	tcookõ_io_fun˘i⁄s_t
;

	@/usr/include/bits/types/locale_t.h

19 #i‚de‡
_BITS_TYPES_LOCALE_T_H


20 
	#_BITS_TYPES_LOCALE_T_H
 1

	)

22 
	~<bôs/ty≥s/__loˇÀ_t.h
>

24 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/bits/types/struct_FILE.h

18 #i‚de‡
__°ru˘_FILE_deföed


19 
	#__°ru˘_FILE_deföed
 1

	)

25 #i‡
deföed
 
_IO_USE_OLD_IO_FILE
 && !deföed 
_LIBC


29 #i‡
deföed
 
_IO_lock_t_deföed
 && !deföed 
_LIBC


33 
	~<bôs/ty≥s.h
>

35 
	g_IO_FILE
;

36 
	g_IO_m¨kî
;

37 
	g_IO_codecvt
;

38 
	g_IO_wide_d©a
;

42 #i‚de‡
_IO_lock_t_deföed


43 
	t_IO_lock_t
;

49 
	s_IO_FILE


51 
	m_Êags
;

54 *
	m_IO_ªad_±r
;

55 *
	m_IO_ªad_íd
;

56 *
	m_IO_ªad_ba£
;

57 *
	m_IO_wrôe_ba£
;

58 *
	m_IO_wrôe_±r
;

59 *
	m_IO_wrôe_íd
;

60 *
	m_IO_buf_ba£
;

61 *
	m_IO_buf_íd
;

64 *
	m_IO_ßve_ba£
;

65 *
	m_IO_backup_ba£
;

66 *
	m_IO_ßve_íd
;

68 
_IO_m¨kî
 *
	m_m¨kîs
;

70 
_IO_FILE
 *
	m_chaö
;

72 
	m_fûío
;

73 
	m_Êags2
;

74 
__off_t
 
	m_ﬁd_off£t
;

77 
	m_cur_cﬁumn
;

78 sig√d 
	m_vèbÀ_off£t
;

79 
	m_sh‹tbuf
[1];

81 
_IO_lock_t
 *
	m_lock
;

82 #ifde‡
_IO_USE_OLD_IO_FILE


85 
	s_IO_FILE_com∂ëe


87 
_IO_FILE
 
	m_fûe
;

89 
__off64_t
 
	m_off£t
;

91 
_IO_codecvt
 *
	m_codecvt
;

92 
_IO_wide_d©a
 *
	m_wide_d©a
;

93 
_IO_FILE
 *
	m_‰ìªs_li°
;

94 *
	m_‰ìªs_buf
;

95 
size_t
 
	m__∑d5
;

96 
	m_mode
;

98 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

102 
	#__gëc_u∆ocked_body
(
_Â
) \

103 (
	`__glibc_u∆ikñy
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
) \

104 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

106 
	#__putc_u∆ocked_body
(
_ch
, 
_Â
) \

107 (
	`__glibc_u∆ikñy
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
) \

108 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

109 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

111 
	#_IO_EOF_SEEN
 0x0010

	)

112 
	#__„of_u∆ocked_body
(
_Â
Ë(((_Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

114 
	#_IO_ERR_SEEN
 0x0020

	)

115 
	#__„º‹_u∆ocked_body
(
_Â
Ë(((_Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

117 
	#_IO_USER_LOCK
 0x8000

	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

7 
	#__WORDSIZE32_SIZE_ULONG
 0

	)

8 
	#__WORDSIZE32_PTRDIFF_LONG
 0

	)

11 #ifde‡
__x86_64__


12 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

14 
	#__SYSCALL_WORDSIZE
 64

	)

16 
	#__WORDSIZE_TIME64_COMPAT32
 0

	)

	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/bits/floatn-common.h

20 #i‚de‡
_BITS_FLOATN_COMMON_H


21 
	#_BITS_FLOATN_COMMON_H


	)

23 
	~<„©uªs.h
>

24 
	~<bôs/l⁄g-doubÀ.h
>

34 
	#__HAVE_FLOAT16
 0

	)

35 
	#__HAVE_FLOAT32
 1

	)

36 
	#__HAVE_FLOAT64
 1

	)

37 
	#__HAVE_FLOAT32X
 1

	)

38 
	#__HAVE_FLOAT128X
 0

	)

52 
	#__HAVE_DISTINCT_FLOAT16
 
__HAVE_FLOAT16


	)

53 
	#__HAVE_DISTINCT_FLOAT32
 0

	)

54 
	#__HAVE_DISTINCT_FLOAT64
 0

	)

55 
	#__HAVE_DISTINCT_FLOAT32X
 0

	)

56 
	#__HAVE_DISTINCT_FLOAT64X
 0

	)

57 
	#__HAVE_DISTINCT_FLOAT128X
 
__HAVE_FLOAT128X


	)

63 
	#__HAVE_FLOAT128_UNLIKE_LDBL
 (
__HAVE_DISTINCT_FLOAT128
 \

64 && 
__LDBL_MANT_DIG__
 !113)

	)

69 #i‡
__GNUC_PREREQ
 (7, 0Ë&& !
deföed
 
__˝lu•lus


70 
	#__HAVE_FLOATN_NOT_TYPEDEF
 1

	)

72 
	#__HAVE_FLOATN_NOT_TYPEDEF
 0

	)

75 #i‚de‡
__ASSEMBLER__


80 #i‡
__HAVE_FLOAT16


81 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

83 
	#__f16
(
x
Ë((
_Flﬂt16
Ëx##
f
)

	)

85 
	#__f16
(
x
Ëx##
f16


	)

89 #i‡
__HAVE_FLOAT32


90 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

91 
	#__f32
(
x
Ëx##
f


	)

93 
	#__f32
(
x
Ëx##
f32


	)

97 #i‡
__HAVE_FLOAT64


98 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
	#__f64
(
x
Ëx##
l


	)

102 
	#__f64
(
x
Ë
	)
x

105 
	#__f64
(
x
Ëx##
f64


	)

109 #i‡
__HAVE_FLOAT32X


110 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

111 
	#__f32x
(
x
Ë
	)
x

113 
	#__f32x
(
x
Ëx##
f32x


	)

117 #i‡
__HAVE_FLOAT64X


118 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

119 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


120 
	#__f64x
(
x
Ëx##
l


	)

122 
	#__f64x
(
x
Ë
	`__f128
 (x)

	)

125 
	#__f64x
(
x
Ëx##
f64x


	)

129 #i‡
__HAVE_FLOAT128X


130 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

133 
	#__f128x
(
x
Ëx##
f128x


	)

138 #i‡
__HAVE_FLOAT16


139 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

140 
_Com∂ex
 
	t__cÊﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HC__
)));

141 
	#__CFLOAT16
 
__cÊﬂt16


	)

143 
	#__CFLOAT16
 
_Com∂ex
 
_Flﬂt16


	)

147 #i‡
__HAVE_FLOAT32


148 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

149 
	#__CFLOAT32
 
_Com∂ex
 

	)

151 
	#__CFLOAT32
 
_Com∂ex
 
_Flﬂt32


	)

155 #i‡
__HAVE_FLOAT64


156 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

157 #ifde‡
__NO_LONG_DOUBLE_MATH


158 
	#__CFLOAT64
 
_Com∂ex
 

	)

160 
	#__CFLOAT64
 
_Com∂ex
 

	)

163 
	#__CFLOAT64
 
_Com∂ex
 
_Flﬂt64


	)

167 #i‡
__HAVE_FLOAT32X


168 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

169 
	#__CFLOAT32X
 
_Com∂ex
 

	)

171 
	#__CFLOAT32X
 
_Com∂ex
 
_Flﬂt32x


	)

175 #i‡
__HAVE_FLOAT64X


176 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

177 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


178 
	#__CFLOAT64X
 
_Com∂ex
 

	)

180 
	#__CFLOAT64X
 
__CFLOAT128


	)

183 
	#__CFLOAT64X
 
_Com∂ex
 
_Flﬂt64x


	)

187 #i‡
__HAVE_FLOAT128X


188 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

191 
	#__CFLOAT128X
 
_Com∂ex
 
_Flﬂt128x


	)

196 #i‡
__HAVE_FLOAT16


198 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

199 
	t_Flﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HF__
)));

202 #i‡!
__GNUC_PREREQ
 (7, 0)

203 
	#__buûtö_huge_vÆf16
(Ë((
_Flﬂt16
Ë
	`__buûtö_huge_vÆ
 ())

	)

204 
	#__buûtö_öff16
(Ë((
_Flﬂt16
Ë
	`__buûtö_öf
 ())

	)

205 
	#__buûtö_«nf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«n
 (x))

	)

206 
	#__buûtö_«nsf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«ns
 (x))

	)

211 #i‡
__HAVE_FLOAT32


213 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

214 
	t_Flﬂt32
;

217 #i‡!
__GNUC_PREREQ
 (7, 0)

218 
	#__buûtö_huge_vÆf32
(Ë(
	`__buûtö_huge_vÆf
 ())

	)

219 
	#__buûtö_öff32
(Ë(
	`__buûtö_öff
 ())

	)

220 
	#__buûtö_«nf32
(
x
Ë(
	`__buûtö_«nf
 (x))

	)

221 
	#__buûtö_«nsf32
(
x
Ë(
	`__buûtö_«nsf
 (x))

	)

226 #i‡
__HAVE_FLOAT64


235 #ifde‡
__NO_LONG_DOUBLE_MATH


237 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

238 
	t_Flﬂt64
;

241 #i‡!
__GNUC_PREREQ
 (7, 0)

242 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

243 
	#__buûtö_öff64
(Ë(
	`__buûtö_öÊ
 ())

	)

244 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

245 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

250 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

251 
	t_Flﬂt64
;

254 #i‡!
__GNUC_PREREQ
 (7, 0)

255 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

256 
	#__buûtö_öff64
(Ë(
	`__buûtö_öf
 ())

	)

257 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«n
 (x))

	)

258 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

265 #i‡
__HAVE_FLOAT32X


267 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

268 
	t_Flﬂt32x
;

271 #i‡!
__GNUC_PREREQ
 (7, 0)

272 
	#__buûtö_huge_vÆf32x
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

273 
	#__buûtö_öff32x
(Ë(
	`__buûtö_öf
 ())

	)

274 
	#__buûtö_«nf32x
(
x
Ë(
	`__buûtö_«n
 (x))

	)

275 
	#__buûtö_«nsf32x
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

280 #i‡
__HAVE_FLOAT64X


282 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


284 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

285 
	t_Flﬂt64x
;

288 #i‡!
__GNUC_PREREQ
 (7, 0)

289 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

290 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öÊ
 ())

	)

291 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

292 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

297 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

298 
_Flﬂt128
 
	t_Flﬂt64x
;

301 #i‡!
__GNUC_PREREQ
 (7, 0)

302 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆf128
 ())

	)

303 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öff128
 ())

	)

304 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«nf128
 (x))

	)

305 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«nsf128
 (x))

	)

312 #i‡
__HAVE_FLOAT128X


314 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

318 #i‡!
__GNUC_PREREQ
 (7, 0)

319 
	#__buûtö_huge_vÆf128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_huge_vÆ
 ())

	)

320 
	#__buûtö_öff128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_öf
 ())

	)

321 
	#__buûtö_«nf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«n
 (x))

	)

322 
	#__buûtö_«nsf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«ns
 (x))

	)

	@/usr/include/bits/getopt_core.h

20 #i‚de‡
_GETOPT_CORE_H


21 
	#_GETOPT_CORE_H
 1

	)

28 
__BEGIN_DECLS


36 *
›èrg
;

50 
›töd
;

55 
›ãº
;

59 
›t›t
;

91 
	$gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

92 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

94 
__END_DECLS


	@/usr/include/bits/strings_fortified.h

19 #i‚de‡
__STRINGS_FORTIFIED


20 
	#__STRINGS_FORTIFIED
 1

	)

22 
__f‹tify_fun˘i⁄
 

23 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

25 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
,

26 
	`__glibc_objsize0
 (
__de°
));

27 
	}
}

29 
__f‹tify_fun˘i⁄
 

30 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

32 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
,

33 
	`__glibc_objsize0
 (
__de°
));

34 
	}
}

	@/usr/include/bits/time64.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TIME64_H


24 
	#_BITS_TIME64_H
 1

	)

28 #i‡
__TIMESIZE
 == 64

30 
	#__TIME64_T_TYPE
 
__TIME_T_TYPE


	)

33 
	#__TIME64_T_TYPE
 
__SQUAD_TYPE


	)

	@/usr/include/bits/timesize.h

19 
	~<bôs/w‹dsize.h
>

21 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


23 
	#__TIMESIZE
 64

	)

26 
	#__TIMESIZE
 
__WORDSIZE


	)

	@/usr/include/bits/types/__locale_t.h

19 #i‚de‡
_BITS_TYPES___LOCALE_T_H


20 
	#_BITS_TYPES___LOCALE_T_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

41 
__loˇÀ_°ru˘
 *
	t__loˇÀ_t
;

	@/usr/include/bits/types/__mbstate_t.h

1 #i‚de‡
____mb°©e_t_deföed


2 
	#____mb°©e_t_deföed
 1

	)

8 #i‚de‡
__WINT_TYPE__


9 
	#__WINT_TYPE__
 

	)

15 
	m__cou¡
;

18 
__WINT_TYPE__
 
	m__wch
;

19 
	m__wchb
[4];

20 } 
	m__vÆue
;

21 } 
	t__mb°©e_t
;

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__SUSECONDS64_T_TYPE
 
__SQUAD_TYPE


	)

68 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

69 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

70 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

71 
	#__TIMER_T_TYPE
 *

	)

72 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

73 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

74 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

77 #ifde‡
__x86_64__


81 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

84 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__RLIM_T_MATCHES_RLIM64_T
 1

	)

90 
	#__STATFS_MATCHES_STATFS64
 1

	)

93 
	#__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64
 1

	)

95 
	#__RLIM_T_MATCHES_RLIM64_T
 0

	)

97 
	#__STATFS_MATCHES_STATFS64
 0

	)

99 
	#__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64
 0

	)

103 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

127 #unde‡
__USE_ISOC11


128 #unde‡
__USE_ISOC99


129 #unde‡
__USE_ISOC95


130 #unde‡
__USE_ISOCXX11


131 #unde‡
__USE_POSIX


132 #unde‡
__USE_POSIX2


133 #unde‡
__USE_POSIX199309


134 #unde‡
__USE_POSIX199506


135 #unde‡
__USE_XOPEN


136 #unde‡
__USE_XOPEN_EXTENDED


137 #unde‡
__USE_UNIX98


138 #unde‡
__USE_XOPEN2K


139 #unde‡
__USE_XOPEN2KXSI


140 #unde‡
__USE_XOPEN2K8


141 #unde‡
__USE_XOPEN2K8XSI


142 #unde‡
__USE_LARGEFILE


143 #unde‡
__USE_LARGEFILE64


144 #unde‡
__USE_FILE_OFFSET64


145 #unde‡
__USE_MISC


146 #unde‡
__USE_ATFILE


147 #unde‡
__USE_DYNAMIC_STACK_SIZE


148 #unde‡
__USE_GNU


149 #unde‡
__USE_FORTIFY_LEVEL


150 #unde‡
__KERNEL_STRICT_NAMES


151 #unde‡
__GLIBC_USE_ISOC2X


152 #unde‡
__GLIBC_USE_DEPRECATED_GETS


153 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


157 #i‚de‡
_LOOSE_KERNEL_NAMES


158 
	#__KERNEL_STRICT_NAMES


	)

168 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


169 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

170 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

172 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

179 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


180 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

181 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

183 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

187 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

193 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

194 && !
deföed
 
	g_DEFAULT_SOURCE


196 #unde‡
_DEFAULT_SOURCE


197 
	#_DEFAULT_SOURCE
 1

	)

201 #ifde‡
_GNU_SOURCE


202 #unde‡
_ISOC95_SOURCE


203 
	#_ISOC95_SOURCE
 1

	)

204 #unde‡
_ISOC99_SOURCE


205 
	#_ISOC99_SOURCE
 1

	)

206 #unde‡
_ISOC11_SOURCE


207 
	#_ISOC11_SOURCE
 1

	)

208 #unde‡
_ISOC2X_SOURCE


209 
	#_ISOC2X_SOURCE
 1

	)

210 #unde‡
_POSIX_SOURCE


211 
	#_POSIX_SOURCE
 1

	)

212 #unde‡
_POSIX_C_SOURCE


213 
	#_POSIX_C_SOURCE
 200809L

	)

214 #unde‡
_XOPEN_SOURCE


215 
	#_XOPEN_SOURCE
 700

	)

216 #unde‡
_XOPEN_SOURCE_EXTENDED


217 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

218 #unde‡
_LARGEFILE64_SOURCE


219 
	#_LARGEFILE64_SOURCE
 1

	)

220 #unde‡
_DEFAULT_SOURCE


221 
	#_DEFAULT_SOURCE
 1

	)

222 #unde‡
_ATFILE_SOURCE


223 
	#_ATFILE_SOURCE
 1

	)

224 #unde‡
_DYNAMIC_STACK_SIZE_SOURCE


225 
	#_DYNAMIC_STACK_SIZE_SOURCE
 1

	)

230 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

231 || (!
deföed
 
	g__STRICT_ANSI__
 \

232 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

233 && !
deföed
 
	g_ISOC2X_SOURCE
 \

234 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

235 && !
deföed
 
	g_XOPEN_SOURCE
))

236 #unde‡
_DEFAULT_SOURCE


237 
	#_DEFAULT_SOURCE
 1

	)

241 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

242 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

243 
	#__GLIBC_USE_ISOC2X
 1

	)

245 
	#__GLIBC_USE_ISOC2X
 0

	)

249 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

250 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

251 
	#__USE_ISOC11
 1

	)

255 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

256 || 
deföed
 
_ISOC2X_SOURCE
 \

257 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

258 
	#__USE_ISOC99
 1

	)

262 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

263 || 
deföed
 
_ISOC2X_SOURCE
 \

264 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

265 
	#__USE_ISOC95
 1

	)

268 #ifde‡
__˝lu•lus


270 #i‡
__˝lu•lus
 >= 201703L

271 
	#__USE_ISOC11
 1

	)

275 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


276 
	#__USE_ISOCXX11
 1

	)

277 
	#__USE_ISOC99
 1

	)

284 #ifde‡
_DEFAULT_SOURCE


285 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


286 
	#__USE_POSIX_IMPLICITLY
 1

	)

288 #unde‡
_POSIX_SOURCE


289 
	#_POSIX_SOURCE
 1

	)

290 #unde‡
_POSIX_C_SOURCE


291 
	#_POSIX_C_SOURCE
 200809L

	)

294 #i‡((!
deföed
 
__STRICT_ANSI__
 \

295 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

296 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

297 
	#_POSIX_SOURCE
 1

	)

298 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

299 
	#_POSIX_C_SOURCE
 2

	)

300 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

301 
	#_POSIX_C_SOURCE
 199506L

	)

302 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

303 
	#_POSIX_C_SOURCE
 200112L

	)

305 
	#_POSIX_C_SOURCE
 200809L

	)

307 
	#__USE_POSIX_IMPLICITLY
 1

	)

316 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

317 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

318 
	#_POSIX_SOURCE
 1

	)

319 #unde‡
_POSIX_C_SOURCE


320 
	#_POSIX_C_SOURCE
 199506L

	)

323 #i‡(
deföed
 
_POSIX_SOURCE
 \

324 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

325 || 
deföed
 
_XOPEN_SOURCE
)

326 
	#__USE_POSIX
 1

	)

329 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


330 
	#__USE_POSIX2
 1

	)

333 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

334 
	#__USE_POSIX199309
 1

	)

337 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

338 
	#__USE_POSIX199506
 1

	)

341 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

342 
	#__USE_XOPEN2K
 1

	)

343 #unde‡
__USE_ISOC95


344 
	#__USE_ISOC95
 1

	)

345 #unde‡
__USE_ISOC99


346 
	#__USE_ISOC99
 1

	)

349 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

350 
	#__USE_XOPEN2K8
 1

	)

351 #unde‡
_ATFILE_SOURCE


352 
	#_ATFILE_SOURCE
 1

	)

355 #ifdef 
_XOPEN_SOURCE


356 
	#__USE_XOPEN
 1

	)

357 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

358 
	#__USE_XOPEN_EXTENDED
 1

	)

359 
	#__USE_UNIX98
 1

	)

360 #unde‡
_LARGEFILE_SOURCE


361 
	#_LARGEFILE_SOURCE
 1

	)

362 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

363 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

364 
	#__USE_XOPEN2K8
 1

	)

365 
	#__USE_XOPEN2K8XSI
 1

	)

367 
	#__USE_XOPEN2K
 1

	)

368 
	#__USE_XOPEN2KXSI
 1

	)

369 #unde‡
__USE_ISOC95


370 
	#__USE_ISOC95
 1

	)

371 #unde‡
__USE_ISOC99


372 
	#__USE_ISOC99
 1

	)

375 #ifde‡
_XOPEN_SOURCE_EXTENDED


376 
	#__USE_XOPEN_EXTENDED
 1

	)

381 #ifde‡
_LARGEFILE_SOURCE


382 
	#__USE_LARGEFILE
 1

	)

385 #ifde‡
_LARGEFILE64_SOURCE


386 
	#__USE_LARGEFILE64
 1

	)

389 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

390 
	#__USE_FILE_OFFSET64
 1

	)

393 
	~<„©uªs-time64.h
>

395 #i‡
deföed
 
_DEFAULT_SOURCE


396 
	#__USE_MISC
 1

	)

399 #ifdef 
_ATFILE_SOURCE


400 
	#__USE_ATFILE
 1

	)

403 #ifdef 
_DYNAMIC_STACK_SIZE_SOURCE


404 
	#__USE_DYNAMIC_STACK_SIZE
 1

	)

407 #ifdef 
_GNU_SOURCE


408 
	#__USE_GNU
 1

	)

411 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

412 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

413 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

414 #ñi‡!
__GNUC_PREREQ
 (4, 1)

415 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


416 #ñi‡
_FORTIFY_SOURCE
 > 2 && (
__glibc_˛™g_¥îeq
 (9, 0) \

417 || 
	$__GNUC_PREREQ
 (12, 0))

419 #i‡
_FORTIFY_SOURCE
 > 3

420 #w¨nög 
_FORTIFY_SOURCE
 > 3 
is
 
åóãd
 
like
 3 
⁄
 
this
 
∂©f‹m


422 
	#__USE_FORTIFY_LEVEL
 3

	)

423 #ñi‡
_FORTIFY_SOURCE
 > 1

424 #i‡
_FORTIFY_SOURCE
 > 2

425 #w¨nög 
_FORTIFY_SOURCE
 > 2 
is
 
åóãd
 
like
 2 
⁄
 
this
 
∂©f‹m


427 
	#__USE_FORTIFY_LEVEL
 2

	)

429 
	#__USE_FORTIFY_LEVEL
 1

	)

432 #i‚de‡
__USE_FORTIFY_LEVEL


433 
	#__USE_FORTIFY_LEVEL
 0

	)

440 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


441 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

443 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

458 #i‡(
deföed
 
__USE_GNU
 \

459 && (
deföed
 
__˝lu•lus
 \

460 ? (
__˝lu•lus
 < 201103L && !
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
) \

461 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

462 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

464 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

469 
	~<°dc-¥edef.h
>

477 #unde‡
__GNU_LIBRARY__


478 
	#__GNU_LIBRARY__
 6

	)

482 
	#__GLIBC__
 2

	)

483 
	#__GLIBC_MINOR__
 37

	)

485 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

486 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

489 #i‚de‡
__ASSEMBLER__


490 #i‚de‡
_SYS_CDEFS_H


491 
	~<sys/cdefs.h
>

496 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


497 
	#__USE_LARGEFILE
 1

	)

498 
	#__USE_LARGEFILE64
 1

	)

504 #i‡
	`__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

505 && !
deföed
 
__OPTIMIZE_SIZE__
 && !deföed 
__NO_INLINE__
 \

506 && 
deföed
 
__exã∫_ölöe


507 
	#__USE_EXTERN_INLINES
 1

	)

515 
	~<gnu/°ubs.h
>

	@/usr/include/bits/long-double.h

21 
	#__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 0

	)

	@/usr/include/features-time64.h

20 
	~<bôs/w‹dsize.h
>

21 
	~<bôs/timesize.h
>

23 #i‡
deföed
 
_TIME_BITS


24 #i‡
_TIME_BITS
 == 64

25 #i‡! 
deföed
 (
_FILE_OFFSET_BITS
) || _FILE_OFFSET_BITS != 64

27 #ñi‡
__TIMESIZE
 == 32

28 
	#__USE_TIME_BITS64
 1

	)

30 #ñi‡
_TIME_BITS
 == 32

31 #i‡
__TIMESIZE
 > 32

35 #îr‹ 
InvÆid
 
_TIME_BITS
 
vÆue
 (
ˇn
 
⁄ly
 
be
 32 
‹
 64-
bô
)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

39 
	#__STDC_IEC_60559_BFP__
 201404L

	)

42 
	#__STDC_IEC_559__
 1

	)

43 
	#__STDC_IEC_60559_BFP__
 201404L

	)

46 #ifde‡
__GCC_IEC_559_COMPLEX


47 #i‡
__GCC_IEC_559_COMPLEX
 > 0

48 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

52 
	#__STDC_IEC_559_COMPLEX__
 1

	)

53 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

62 
	#__STDC_ISO_10646__
 201706L

	)

	@/usr/include/sys/cdefs.h

19 #i‚def 
_SYS_CDEFS_H


20 
	#_SYS_CDEFS_H
 1

	)

23 #i‚de‡
_FEATURES_H


24 
	~<„©uªs.h
>

30 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__
 && !deföed 
__˝lu•lus


35 #unde‡
__P


36 #unde‡
__PMT


42 #i‡(
deföed
 
__has_©åibuã
 \

43 && (!
deföed
 
	g__˛™g_mö‹__
 \

44 || 3 < 
	g__˛™g_maj‹__
 + (5 <
__˛™g_mö‹__
)))

45 
	#__glibc_has_©åibuã
(
©å
Ë
	`__has_©åibuã
 (©å)

	)

47 
	#__glibc_has_©åibuã
(
©å
Ë0

	)

49 #ifde‡
__has_buûtö


50 
	#__glibc_has_buûtö
(
«me
Ë
	`__has_buûtö
 («me)

	)

52 
	#__glibc_has_buûtö
(
«me
Ë0

	)

54 #ifde‡
__has_exãnsi⁄


55 
	#__glibc_has_exãnsi⁄
(
ext
Ë
	`__has_exãnsi⁄
 (ext)

	)

57 
	#__glibc_has_exãnsi⁄
(
ext
Ë0

	)

60 #i‡
deföed
 
__GNUC__
 || deföed 
__˛™g__


64 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


65 
	#__LEAF
 , 
__Àaf__


	)

66 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

68 
	#__LEAF


	)

69 
	#__LEAF_ATTR


	)

77 #i‡!
deföed
 
__˝lu•lus
 \

78 && (
__GNUC_PREREQ
 (3, 4Ë|| 
	$__glibc_has_©åibuã
 (
__nŸhrow__
))

79 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

80 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

81 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

82 
	#__NTHNL
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

84 #i‡
deföed
 
__˝lu•lus
 && (
	`__GNUC_PREREQ
 (2,8Ë|| 
__˛™g_maj‹
 >= 4)

85 #i‡
__˝lu•lus
 >= 201103L

86 
	#__THROW
 
	`n€x˚±
 (
åue
)

	)

88 
	#__THROW
 
	`throw
 ()

	)

90 
	#__THROWNL
 
__THROW


	)

91 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
__THROW


	)

92 
	#__NTHNL
(
f˘
Ëf˘ 
__THROW


	)

94 
	#__THROW


	)

95 
	#__THROWNL


	)

96 
	#__NTH
(
f˘
Ë
	)
fct

97 
	#__NTHNL
(
f˘
Ë
	)
fct

103 #i‡(
deföed
 
__˝lu•lus
 \

104 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

105 
	#__ölöe
 
ölöe


	)

107 
	#__ölöe


	)

110 
	#__THROW


	)

111 
	#__THROWNL


	)

112 
	#__NTH
(
f˘
Ë
	)
fct

118 
	#__P
(
¨gs
Ë
	)
args

119 
	#__PMT
(
¨gs
Ë
	)
args

124 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

125 
	#__STRING
(
x
Ë#x

	)

128 
	#__±r_t
 *

	)

132 #ifdef 
__˝lu•lus


133 
	#__BEGIN_DECLS
 "C" {

	)

134 
	#__END_DECLS
 
	}

	)
}

136 
	#__BEGIN_DECLS


	)

137 
	#__END_DECLS


	)

142 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

143 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

146 #i‡
__USE_FORTIFY_LEVEL
 =3 && (
__glibc_˛™g_¥îeq
 (9, 0) \

147 || 
	$__GNUC_PREREQ
 (12, 0))

148 
	#__glibc_objsize0
(
__o
Ë
	`__buûtö_dy«mic_obje˘_size
 (__o, 0)

	)

149 
	#__glibc_objsize
(
__o
Ë
	`__buûtö_dy«mic_obje˘_size
 (__o, 1)

	)

151 
	#__glibc_objsize0
(
__o
Ë
	`__bos0
 (__o)

	)

152 
	#__glibc_objsize
(
__o
Ë
	`__bos
 (__o)

	)

159 
	#__glibc_ß„_Àn_c⁄d
(
__l
, 
__s
, 
__osz
Ë((__lË<(__oszË/ (__s))

	)

160 
	#__glibc_unsig√d_‹_posôive
(
__l
) \

161 ((
	`__ty≥of
 (
__l
)) 0 < (__typeof (__l)) -1 \

162 || (
	`__buûtö_c⁄°™t_p
 (
__l
Ë&& (__lË> 0))

	)

166 
	#__glibc_ß„_‹_unknown_Àn
(
__l
, 
__s
, 
__osz
) \

167 ((
	`__buûtö_c⁄°™t_p
 (
__osz
Ë&& (__oszË=(
__SIZE_TYPE__
) -1) \

168 || (
	`__glibc_unsig√d_‹_posôive
 (
__l
) \

169 && 
	`__buûtö_c⁄°™t_p
 (
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), \

170 (
__s
), (
__osz
))) \

171 && 
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), (
__s
), (
__osz
))))

	)

176 
	#__glibc_unß„_Àn
(
__l
, 
__s
, 
__osz
) \

177 (
	`__glibc_unsig√d_‹_posôive
 (
__l
) \

178 && 
	`__buûtö_c⁄°™t_p
 (
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), \

179 
__s
, 
__osz
)) \

180 && !
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), 
__s
, 
__osz
))

	)

185 
	#__glibc_f‹tify
(
f
, 
__l
, 
__s
, 
__osz
, ...) \

186 (
	`__glibc_ß„_‹_unknown_Àn
 (
__l
, 
__s
, 
__osz
) \

187 ? 
__
 ## 
f
 ## 
	`_Æüs
 (
__VA_ARGS__
) \

188 : (
	`__glibc_unß„_Àn
 (
__l
, 
__s
, 
__osz
) \

189 ? 
__
 ## 
f
 ## 
	`_chk_w¨n
 (
__VA_ARGS__
, 
__osz
) \

190 : 
__
 ## 
f
 ## 
	`_chk
 (
__VA_ARGS__
, 
__osz
))) \

191 

	)

195 
	#__glibc_f‹tify_n
(
f
, 
__l
, 
__s
, 
__osz
, ...) \

196 (
	`__glibc_ß„_‹_unknown_Àn
 (
__l
, 
__s
, 
__osz
) \

197 ? 
__
 ## 
f
 ## 
	`_Æüs
 (
__VA_ARGS__
) \

198 : (
	`__glibc_unß„_Àn
 (
__l
, 
__s
, 
__osz
) \

199 ? 
__
 ## 
f
 ## 
	`_chk_w¨n
 (
__VA_ARGS__
, (
__osz
Ë/ (
__s
)) \

200 : 
__
 ## 
f
 ## 
	`_chk
 (
__VA_ARGS__
, (
__osz
Ë/ (
__s
)))) \

201 

	)

202 #i‡
	`__GNUC_PREREQ
 (4,3)

203 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

204 
	#__îr‹de˛
(
«me
, 
msg
) \

205 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

207 
	#__w¨«âr
(
msg
)

	)

208 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

215 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >199901L && !deföed 
__HP_cc


216 
	#__Êex¨r
 []

	)

217 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

218 #ñi‡
	`__GNUC_PREREQ
 (2,97Ë|| 
deföed
 
__˛™g__


221 
	#__Êex¨r
 []

	)

222 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

223 #ñi‡
deföed
 
__GNUC__


226 
	#__Êex¨r
 [0]

	)

227 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

230 
	#__Êex¨r
 [1]

	)

231 
	#__glibc_c99_Êex¨r_avaûabÀ
 0

	)

245 #i‡(
deföed
 
__GNUC__
 && __GNUC__ >2Ë|| (
__˛™g_maj‹__
 >= 4)

247 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

248 #ifde‡
__˝lu•lus


249 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

250 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

251 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

252 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

254 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

255 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

256 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

257 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

259 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

260 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

273 #i‡!(
deföed
 
__GNUC__
 || deföed 
__˛™g__
)

274 
	#__©åibuã__
(
xyz
Ë

	)

280 #i‡
	`__GNUC_PREREQ
 (2,96Ë|| 
	`__glibc_has_©åibuã
 (
__mÆloc__
)

281 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

283 
	#__©åibuã_mÆloc__


	)

288 #i‡
	`__GNUC_PREREQ
 (4, 3)

289 
	#__©åibuã_Æloc_size__
(
∑øms
) \

290 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

292 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

297 #i‡
	`__GNUC_PREREQ
 (4, 9Ë|| 
	`__glibc_has_©åibuã
 (
__Æloc_Æign__
)

298 
	#__©åibuã_Æloc_Æign__
(
∑øm
) \

299 
	`__©åibuã__
 ((
__Æloc_Æign__
 
∑øm
))

	)

301 
	#__©åibuã_Æloc_Æign__
(
∑øm
Ë

	)

307 #i‡
	`__GNUC_PREREQ
 (2,96Ë|| 
	`__glibc_has_©åibuã
 (
__puª__
)

308 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

310 
	#__©åibuã_puª__


	)

314 #i‡
	`__GNUC_PREREQ
 (2,5Ë|| 
	`__glibc_has_©åibuã
 (
__c⁄°__
)

315 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

317 
	#__©åibuã_c⁄°__


	)

320 #i‡
	`__GNUC_PREREQ
 (2,7Ë|| 
	`__glibc_has_©åibuã
 (
__unu£d__
)

321 
	#__©åibuã_maybe_unu£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

323 
	#__©åibuã_maybe_unu£d__


	)

329 #i‡
	`__GNUC_PREREQ
 (3,1Ë|| 
	`__glibc_has_©åibuã
 (
__u£d__
)

330 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

331 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

333 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

334 
	#__©åibuã_noölöe__


	)

338 #i‡
	`__GNUC_PREREQ
 (3,2Ë|| 
	`__glibc_has_©åibuã
 (
__dïªˇãd__
)

339 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

341 
	#__©åibuã_dïªˇãd__


	)

347 #i‡
	`__GNUC_PREREQ
 (4,5) \

348 || 
	$__glibc_has_exãnsi⁄
 (
__©åibuã_dïªˇãd_wôh_mesßge__
)

349 
	#__©åibuã_dïªˇãd_msg__
(
msg
) \

350 
	`__©åibuã__
 ((
	`__dïªˇãd__
 (
msg
)))

	)

352 
	#__©åibuã_dïªˇãd_msg__
(
msg
Ë
__©åibuã_dïªˇãd__


	)

361 #i‡
	`__GNUC_PREREQ
 (2,8Ë|| 
	`__glibc_has_©åibuã
 (
__f‹m©_¨g__
)

362 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

364 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

371 #i‡
	`__GNUC_PREREQ
 (2,97Ë|| 
	`__glibc_has_©åibuã
 (
__f‹m©__
)

372 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

373 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

375 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

382 #i‚de‡
__©åibuã_n⁄nuŒ__


383 #i‡
	`__GNUC_PREREQ
 (3,3Ë|| 
	`__glibc_has_©åibuã
 (
__n⁄nuŒ__
)

384 
	#__©åibuã_n⁄nuŒ__
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

386 
	#__©åibuã_n⁄nuŒ__
(
∑øms
)

	)

389 #i‚de‡
__n⁄nuŒ


390 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã_n⁄nuŒ__
 (∑øms)

	)

395 #i‚de‡
__ªtu∫s_n⁄nuŒ


396 #i‡
	`__GNUC_PREREQ
 (4, 9Ë|| 
	`__glibc_has_©åibuã
 (
__ªtu∫s_n⁄nuŒ__
)

397 
	#__ªtu∫s_n⁄nuŒ
 
	`__©åibuã__
 ((
__ªtu∫s_n⁄nuŒ__
))

	)

399 
	#__ªtu∫s_n⁄nuŒ


	)

405 #i‡
	`__GNUC_PREREQ
 (3,4Ë|| 
	`__glibc_has_©åibuã
 (
__w¨n_unu£d_ªsu…__
)

406 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

407 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

408 #i‡
deföed
 
__USE_FORTIFY_LEVEL
 && __USE_FORTIFY_LEVEL > 0

409 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

412 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

414 #i‚de‡
__wur


415 
	#__wur


	)

419 #i‡
	`__GNUC_PREREQ
 (3,2Ë|| 
	`__glibc_has_©åibuã
 (
__Æways_ölöe__
)

423 #unde‡
__Æways_ölöe


424 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

426 #unde‡
__Æways_ölöe


427 
	#__Æways_ölöe
 
__ölöe


	)

432 #i‡
	`__GNUC_PREREQ
 (4,3Ë|| 
	`__glibc_has_©åibuã
 (
__¨tificül__
)

433 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

435 
	#__©åibuã_¨tificül__


	)

447 #i‡(!
deföed
 
__˝lu•lus
 || 
	`__GNUC_PREREQ
 (4,3) \

448 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

449 || 
deföed
 
__GNUC_GNU_INLINE__
)))

450 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


451 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

452 
	#__exã∫_Æways_ölöe
 \

453 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

455 
	#__exã∫_ölöe
 
__ölöe


	)

456 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

460 #ifde‡
__exã∫_Æways_ölöe


461 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

466 #i‡
	`__GNUC_PREREQ
 (4,3)

467 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

468 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

475 #i‡!(
	`__GNUC_PREREQ
 (2,8Ë|| 
deföed
 
__˛™g__
)

476 
	#__exãnsi⁄__


	)

482 #i‡!(
	`__GNUC_PREREQ
 (2,92Ë|| 
__˛™g_maj‹__
 >= 3)

483 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

484 
	#__ª°ri˘
 
ª°ri˘


	)

486 
	#__ª°ri˘


	)

494 #i‡(
	`__GNUC_PREREQ
 (3,1Ë|| 
__˛™g_maj‹__
 >3Ë&& !
deföed
 
__˝lu•lus


495 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

497 #ifde‡
__GNUC__


498 
	#__ª°ri˘_¨r


	)

500 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

501 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

504 
	#__ª°ri˘_¨r


	)

509 #i‡(
__GNUC__
 >3Ë|| 
	`__glibc_has_buûtö
 (
__buûtö_ex≥˘
)

510 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

511 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

513 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

514 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

517 #i‡(!
deföed
 
_N‹ëu∫
 \

518 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

519 && !(
	`__GNUC_PREREQ
 (4,7) \

520 || (3 < 
__˛™g_maj‹__
 + (5 <
__˛™g_mö‹__
))))

521 #i‡
	`__GNUC_PREREQ
 (2,8)

522 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

524 
	#_N‹ëu∫


	)

528 #i‡
	`__GNUC_PREREQ
 (8, 0)

532 
	#__©åibuã_n⁄°rög__
 
	`__©åibuã__
 ((
__n⁄°rög__
))

	)

534 
	#__©åibuã_n⁄°rög__


	)

538 #unde‡
__©åibuã_c›y__


539 #i‡
	`__GNUC_PREREQ
 (9, 0)

542 
	#__©åibuã_c›y__
(
¨g
Ë
	`__©åibuã__
 ((
	`__c›y__
 (¨g)))

	)

544 
	#__©åibuã_c›y__
(
¨g
)

	)

547 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

548 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

549 && (!(
	`__GNUC_PREREQ
 (4, 6Ë|| 
__˛™g_maj‹__
 >= 4) \

550 || 
deföed
 
__STRICT_ANSI__
))

551 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

552 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

553 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

558 #i‚de‡
__GNULIB_CDEFS


559 
	~<bôs/w‹dsize.h
>

560 
	~<bôs/l⁄g-doubÀ.h
>

563 #i‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

564 #ifde‡
__REDIRECT


567 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë... 
unu£d__ldbl_ªdú


	)

568 
	#__LDBL_REDIR_DECL
(
«me
) \

569 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__" #«mê"õì128"));

	)

572 
	#__LDBL_REDIR2_DECL
(
«me
) \

573 
	`__ty≥of
 (
__
##
«me
) __##name \

574 
	`__asm
 (
	`__ASMNAME
 ("__" #«mê"õì128"));

	)

577 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë... 
unu£d__ldbl_ªdú1


	)

578 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

579 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

581 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

582 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

583 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

584 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__
##
Æüs
##
õì128
)

	)

587 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë... 
unu£d__ªdúe˘_ldbl


	)

588 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë... 
unu£d__ldbl_ªdú_¡h


	)

591 
	`_Sètic_as£π
 (0, "IEEE 128-bitsÜong doubleÑequiresÑedirection onÅhisÖlatform");

593 #ñi‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


594 
	#__LDBL_COMPAT
 1

	)

595 #ifde‡
__REDIRECT


596 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

597 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

598 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

599 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

600 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

601 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

602 
	#__LDBL_REDIR2_DECL
(
«me
) \

603 
	`__ty≥of
 (
__
##
«me
Ë__##«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl___" #«me));

	)

604 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

605 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

606 
	#__LDBL_REDIR_DECL
(
«me
) \

607 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

608 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

609 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

610 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

611 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

614 #i‡(!
deföed
 
__LDBL_COMPAT
 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0) \

615 || !
deföed
 
__REDIRECT


616 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

617 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

618 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

619 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

620 
	#__LDBL_REDIR2_DECL
(
«me
)

	)

621 
	#__LDBL_REDIR_DECL
(
«me
)

	)

622 #ifde‡
__REDIRECT


623 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

624 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

625 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

634 #i‡
	`__GNUC_PREREQ
 (4,8Ë|| 
	`__glibc_˛™g_¥îeq
 (3,5)

635 
	#__glibc_ma¸o_w¨nög1
(
mesßge
Ë
	`_Pøgma
 (#mesßge)

	)

636 
	#__glibc_ma¸o_w¨nög
(
mesßge
) \

637 
	`__glibc_ma¸o_w¨nög1
 (
GCC
 
w¨nög
 
mesßge
)

	)

639 
	#__glibc_ma¸o_w¨nög
(
msg
)

	)

649 #i‡!
deföed
 
__˝lu•lus
 \

650 && (
	`__GNUC_PREREQ
 (4, 9) \

651 || 
	`__glibc_has_exãnsi⁄
 (
c_gíîic_£À˘i⁄s
) \

652 || (!
deföed
 
__GNUC__
 && deföed 
__STDC_VERSION__
 \

653 && 
__STDC_VERSION__
 >= 201112L))

654 
	#__HAVE_GENERIC_SELECTION
 1

	)

656 
	#__HAVE_GENERIC_SELECTION
 0

	)

659 #i‡
	`__GNUC_PREREQ
 (10, 0)

665 
	#__©å_ac˚ss
(
x
Ë
	`__©åibuã__
 ((
__ac˚ss__
 x))

	)

670 #i‡
__USE_FORTIFY_LEVEL
 == 3

671 
	#__f‹tifõd_©å_ac˚ss
(
a
, 
o
, 
s
Ë
	`__©åibuã__
 ((
	`__ac˚ss__
 (a, o)))

	)

673 
	#__f‹tifõd_©å_ac˚ss
(
a
, 
o
, 
s
Ë
	`__©å_ac˚ss
 (◊, o, s))

	)

675 #i‡
	`__GNUC_PREREQ
 (11, 0)

676 
	#__©å_ac˚ss_n⁄e
(
¨gno
Ë
	`__©åibuã__
 ((
	`__ac˚ss__
 (
__n⁄e__
,árgno)))

	)

678 
	#__©å_ac˚ss_n⁄e
(
¨gno
)

	)

681 
	#__f‹tifõd_©å_ac˚ss
(
a
, 
o
, 
s
)

	)

682 
	#__©å_ac˚ss
(
x
)

	)

683 
	#__©å_ac˚ss_n⁄e
(
¨gno
)

	)

686 #i‡
	`__GNUC_PREREQ
 (11, 0)

689 
	#__©å_dóŒoc
(
dóŒoc
, 
¨gno
) \

690 
	`__©åibuã__
 ((
	`__mÆloc__
 (
dóŒoc
, 
¨gno
)))

	)

691 
	#__©å_dóŒoc_‰ì
 
	`__©å_dóŒoc
 (
__buûtö_‰ì
, 1)

	)

693 
	#__©å_dóŒoc
(
dóŒoc
, 
¨gno
)

	)

694 
	#__©å_dóŒoc_‰ì


	)

699 #i‡
	`__GNUC_PREREQ
 (4, 1)

700 
	#__©åibuã_ªtu∫s_twi˚__
 
	`__©åibuã__
 ((
__ªtu∫s_twi˚__
))

	)

702 
	#__©åibuã_ªtu∫s_twi˚__


	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_fchÊags


	)

12 
	#__°ub_gây


	)

13 
	#__°ub_ªvoke


	)

14 
	#__°ub_£éogö


	)

15 
	#__°ub_sigªtu∫


	)

16 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_gây


	)

14 
	#__°ub_ªvoke


	)

15 
	#__°ub_£éogö


	)

16 
	#__°ub_sigªtu∫


	)

17 
	#__°ub_°ty


	)

	@
1
.
1
/usr/include
100
8028
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/APP/I2C.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/APP/SHT4X.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/APP/broadcaster.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/APP/broadcaster_main.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/APP/include/I2C.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/APP/include/SHT4X.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/APP/include/broadcaster.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/KEY.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/LED.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/MCU.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/RTC.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/SLEEP.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/include/HAL.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/include/KEY.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/include/LED.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/include/RTC.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/include/SLEEP.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/HAL/include/config.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/LIB/CH57xBLE_LIB.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/LIB/CH57xBLE_ROM.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/Profile/devinfoservice.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/Profile/include/devinfoservice.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/RVMSIS/core_riscv.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/RVMSIS/core_riscv.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/Startup/startup_CH573.S
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_adc.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_clk.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_flash.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_gpio.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_pwm.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_pwr.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_spi0.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_sys.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_timer0.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_timer1.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_timer2.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_timer3.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_uart0.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_uart1.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_uart2.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_uart3.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_usbdev.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_usbhostBase.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/CH57x_usbhostClass.c
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH573SFR.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_adc.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_clk.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_common.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_flash.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_gpio.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_pwm.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_pwr.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_spi.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_sys.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_timer.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_uart.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_usbdev.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/CH57x_usbhost.h
/home/tong/05_files/top_github_aws/eda/ch571-f-ble-hygrometer/CH571_BLE_Hygrothermograph/StdPeriphDriver/inc/ISP573.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/string.h
/usr/include/bits/floatn.h
/usr/include/bits/getopt_posix.h
/usr/include/bits/libc-header-start.h
/usr/include/bits/stdint-intn.h
/usr/include/bits/stdint-uintn.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2-decl.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/string_fortified.h
/usr/include/bits/types.h
/usr/include/bits/types/FILE.h
/usr/include/bits/types/__FILE.h
/usr/include/bits/types/__fpos64_t.h
/usr/include/bits/types/__fpos_t.h
/usr/include/bits/types/cookie_io_functions_t.h
/usr/include/bits/types/locale_t.h
/usr/include/bits/types/struct_FILE.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/strings.h
/usr/include/bits/floatn-common.h
/usr/include/bits/getopt_core.h
/usr/include/bits/strings_fortified.h
/usr/include/bits/time64.h
/usr/include/bits/timesize.h
/usr/include/bits/types/__locale_t.h
/usr/include/bits/types/__mbstate_t.h
/usr/include/bits/typesizes.h
/usr/include/features.h
/usr/include/bits/long-double.h
/usr/include/features-time64.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
